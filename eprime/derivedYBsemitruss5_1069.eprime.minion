MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 7
# CSE_active_eliminated_expressions = 32
# CSE_active_total_size = 21
**VARIABLES**
DISCRETE S_00001_00001 #
{1..4}
DISCRETE S_00001_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(S_00001_00002, [2,2,4,4])
**VARIABLES**
DISCRETE S_00001_00003 #
{3..4}
DISCRETE S_00002_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(S_00002_00001, [1,1,3,3])
**VARIABLES**
DISCRETE S_00003_00001 #
{1..2}
DISCRETE aux0 #Active-CSE: 3 occurrences of this expression or equivalent: (-4 + 5*S_00002_00001)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux0, [1,1,11,11])
**VARIABLES**
DISCRETE aux1 #Active-CSE: 3 occurrences of this expression or equivalent: (-4 + 5*S_00003_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux1, [1,1,6,6])
**VARIABLES**
DISCRETE aux2 #Active-CSE: 8 occurrences of this expression or equivalent: (S_00001_00003 + -2)
{1..2}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00001_00001 + -4)
{1..16}
**CONSTRAINTS**
w-inintervalset(aux3, [1,1,6,6,11,11,16,16])
**VARIABLES**
DISCRETE aux4 #Active-CSE: 10 occurrences of this expression or equivalent: (S_00001_00002 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux4, [1,1,3,3])
**VARIABLES**
DISCRETE aux5 #Active-CSE: 3 occurrences of this expression or equivalent: (5*S_00001_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux5, [1,1,6,6])
**VARIABLES**
DISCRETE aux6 #Active-CSE: 3 occurrences of this expression or equivalent: (5*S_00001_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux6, [1,1,11,11])
**VARIABLES**
DISCRETE aux7 #ElementOne([1, 3, 2, 4], S_00001_00001)
{1..4}
DISCRETE aux8 #ElementOne([2, 4], aux2)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux8, [2,2,4,4])
**VARIABLES**
DISCRETE aux9 #ElementOne([3, 2, 4], aux4)
{2..4}
DISCRETE aux10 #ElementOne([1, 3], S_00003_00001)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux10, [1,1,3,3])
**VARIABLES**
DISCRETE aux11 #ElementOne([1, 3, 2], S_00002_00001)
{1..3}
DISCRETE aux12 #(6*S_00001_00001 + -5)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux12, [1,1,7,7,13,13,19,19])
**VARIABLES**
DISCRETE aux13 #(5*S_00001_00001 + S_00001_00002 + -6)
{1..18}
**CONSTRAINTS**
w-inintervalset(aux13, [1,1,3,3,6,6,8,8,11,11,13,13,16,16,18,18])
**VARIABLES**
DISCRETE aux14 #(5*S_00001_00001 + S_00001_00003 + -7)
{1..17}
**CONSTRAINTS**
w-inintervalset(aux14, [1,2,6,7,11,12,16,17])
**VARIABLES**
DISCRETE aux15 #(S_00001_00001 + 5*S_00001_00002 + -10)
{1..14}
**CONSTRAINTS**
w-inintervalset(aux15, [1,4,11,14])
**VARIABLES**
DISCRETE aux16 #(6*S_00001_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux16, [1,1,13,13])
**VARIABLES**
DISCRETE aux17 #(5*S_00001_00002 + S_00001_00003 + -12)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux17, [1,2,11,12])
**VARIABLES**
DISCRETE aux18 #(S_00001_00001 + 5*S_00001_00003 + -15)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux18, [1,4,6,9])
**VARIABLES**
DISCRETE aux19 #(S_00001_00002 + 5*S_00001_00003 + -16)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux19, [1,1,3,3,6,6,8,8])
**VARIABLES**
DISCRETE aux20 #(6*S_00001_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux20, [1,1,7,7])
**VARIABLES**
DISCRETE aux21 #(-5 + 6*S_00002_00001)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux21, [1,1,13,13])
**VARIABLES**
DISCRETE aux22 #(S_00001_00002 + -6 + 5*S_00002_00001)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux22, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux23 #(5*S_00001_00002 + -10 + S_00002_00001)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux23, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux24 #(-5 + 6*S_00003_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux24, [1,1,7,7])
**VARIABLES**
DISCRETE aux25 #(S_00001_00003 + -7 + 5*S_00003_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux25, [1,2,6,7])
**VARIABLES**
DISCRETE aux26 #(5*S_00001_00003 + -15 + S_00003_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux26, [1,2,6,7])
**VARIABLES**
**TUPLELIST**
perms 1 5
1 3 2 4 5 
**VARIABLES**
ALIAS perms[1,5]=[[1, 3, 2, 4, 5]]
**TUPLELIST**
inverses 1 5
1 3 2 4 5 
**VARIABLES**
ALIAS inverses[1,5]=[[1, 3, 2, 4, 5]]
**TUPLELIST**
M 5 5
1 1 1 1 1 
1 2 1 2 2 
1 1 3 3 3 
1 2 3 4 4 
1 2 3 4 5 
**VARIABLES**
ALIAS M[5,5]=[[1, 1, 1, 1, 1], [1, 2, 1, 2, 2], [1, 1, 3, 3, 3], [1, 2, 3, 4, 4], [1, 2, 3, 4, 5]]
**SEARCH**
PRINT[[S_00001_00001],[S_00001_00002],[S_00001_00003],[S_00002_00001],[S_00003_00001]]
VARORDER STATIC [S_00001_00001, S_00001_00002, S_00001_00003, S_00002_00001, S_00003_00001]
**CONSTRAINTS**
watchelement_one([1, 3, 2, 4], S_00001_00001, aux7)
watchelement_one([2, 4], aux2, aux8)
watchelement_one([3, 2, 4], aux4, aux9)
watchelement_one([1, 3], S_00003_00001, aux10)
watchelement_one([1, 3, 2], S_00002_00001, aux11)
lexleq([S_00001_00001, S_00001_00002, S_00001_00003, S_00002_00001, S_00003_00001],[aux7, aux8, aux9, aux10, aux11])
watchelement_one([1, 1, 1, 1], S_00001_00001, 1)
watchelement_one([1, 2, 1], S_00002_00001, 1)
watchelement_one([1, 1], S_00003_00001, 1)
watchelement_one([1, 1, 1], aux4, 1)
watchelement_one([2, 1, 2], aux4, 2)
watchelement_one([1, 1], aux2, 1)
watchelement_one([3, 3], aux2, 3)
watchelement_one([S_00001_00001, S_00002_00001, S_00003_00001, 1], S_00001_00001, 1)
watchelement_one([S_00001_00002, S_00001_00002, 2], S_00002_00001, 2)
watchelement_one([S_00001_00003, 3], S_00003_00001, 3)
watchelement_one([S_00002_00001, S_00003_00001, 1], aux4, 1)
watchelement_one([S_00001_00002, 2, 2], aux4, 2)
watchelement_one([S_00003_00001, 1], aux2, 1)
watchelement_one([S_00001_00003, 3], aux2, 3)
watchelement_one([1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4], aux12, S_00001_00001)
watchelement_one([1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4], aux13, S_00001_00001)
watchelement_one([1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4], aux14, S_00001_00001)
watchelement_one([1, 1, 1, 2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4], aux3, S_00001_00001)
watchelement_one([1, 1, 2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4, 4], aux3, S_00001_00001)
watchelement_one([1, 2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4], aux15, S_00001_00001)
watchelement_one([2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4], aux16, S_00001_00002)
watchelement_one([1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4], aux17, S_00001_00001)
watchelement_one([2, 2, 1, 1, 3, 3, 3, 1, 2, 3, 4], aux6, S_00001_00002)
watchelement_one([2, 1, 1, 3, 3, 3, 1, 2, 3, 4, 4], aux6, S_00001_00002)
watchelement_one([1, 1, 3, 3, 3, 1, 2, 3, 4], aux18, S_00001_00001)
watchelement_one([1, 3, 3, 3, 1, 2, 3, 4], aux19, S_00001_00001)
watchelement_one([3, 3, 3, 1, 2, 3, 4], aux20, S_00001_00003)
watchelement_one([3, 3, 1, 2, 3, 4], aux5, S_00001_00003)
watchelement_one([3, 1, 2, 3, 4, 4], aux5, S_00001_00003)
watchelement_one([1, 2, 3, 4], S_00001_00001, S_00001_00001)
watchelement_one([2, 3, 4], aux4, S_00001_00002)
watchelement_one([3, 4], aux2, S_00001_00003)
watchelement_one([1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 3], aux21, S_00002_00001)
watchelement_one([1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 3, 3], aux22, S_00002_00001)
watchelement_one([1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 3], aux0, S_00002_00001)
watchelement_one([1, 1, 1, 2, 1, 2, 2, 1, 1, 3, 3], aux0, S_00002_00001)
watchelement_one([1, 1, 2, 1, 2, 2, 1, 1, 3, 3, 3], aux0, S_00002_00001)
watchelement_one([1, 2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3], aux23, S_00002_00001)
watchelement_one([1, 2, 2, 1, 1, 3, 3, 3, 1, 2, 3], aux6, S_00002_00001)
watchelement_one([1, 1, 3], S_00002_00001, S_00002_00001)
watchelement_one([1, 3, 3], aux4, S_00002_00001)
watchelement_one([1, 2, 3], S_00002_00001, S_00002_00001)
watchelement_one([1, 1, 1, 1, 1, 1, 2], aux24, S_00003_00001)
watchelement_one([1, 1, 1, 1, 1, 2], aux1, S_00003_00001)
watchelement_one([1, 1, 1, 1, 2, 1, 2], aux25, S_00003_00001)
watchelement_one([1, 1, 1, 2, 1, 2], aux1, S_00003_00001)
watchelement_one([1, 1, 2, 1, 2, 2], aux1, S_00003_00001)
watchelement_one([1, 2], S_00003_00001, S_00003_00001)
watchelement_one([1, 2], aux2, S_00003_00001)
watchelement_one([1, 1, 3, 3, 3, 1, 2], aux26, S_00003_00001)
watchelement_one([1, 3, 3, 3, 1, 2], aux5, S_00003_00001)
watchelement_one([S_00001_00001, S_00001_00002, S_00001_00003, 4], S_00001_00001, S_00001_00001)
watchelement_one([S_00001_00002, S_00001_00003, 4], aux4, S_00001_00002)
watchelement_one([S_00001_00003, 4], aux2, S_00001_00003)
watchelement_one([S_00002_00001, S_00001_00002, 3, 4], S_00001_00001, S_00001_00001)
watchelement_one([S_00001_00002, 3, 4], aux4, S_00001_00002)
watchelement_one([S_00003_00001, 2, S_00001_00003, 4], S_00001_00001, S_00001_00001)
watchelement_one([2, S_00001_00003, 4], aux4, S_00001_00002)
watchelement_one([S_00001_00001, S_00001_00002, S_00001_00003], S_00002_00001, S_00001_00001)
watchelement_one([S_00002_00001, S_00001_00002, 3], S_00002_00001, S_00002_00001)
watchelement_one([S_00003_00001, 2, S_00001_00003], S_00002_00001, S_00001_00001)
watchelement_one([S_00001_00001, S_00001_00002], S_00003_00001, S_00001_00001)
watchelement_one([S_00002_00001, S_00001_00002], S_00003_00001, S_00001_00001)
watchelement_one([S_00003_00001, 2], S_00003_00001, S_00003_00001)
weightedsumleq([6,1],[S_00001_00001,-5],aux12)
weightedsumgeq([6,1],[S_00001_00001,-5],aux12)
weightedsumleq([5,1,1],[S_00001_00001,S_00001_00002,-6],aux13)
weightedsumgeq([5,1,1],[S_00001_00001,S_00001_00002,-6],aux13)
weightedsumleq([5,1,1],[S_00001_00001,S_00001_00003,-7],aux14)
weightedsumgeq([5,1,1],[S_00001_00001,S_00001_00003,-7],aux14)
weightedsumleq([1,5,1],[S_00001_00001,S_00001_00002,-10],aux15)
weightedsumgeq([1,5,1],[S_00001_00001,S_00001_00002,-10],aux15)
weightedsumleq([6,1],[S_00001_00002,-11],aux16)
weightedsumgeq([6,1],[S_00001_00002,-11],aux16)
weightedsumleq([5,1,1],[S_00001_00002,S_00001_00003,-12],aux17)
weightedsumgeq([5,1,1],[S_00001_00002,S_00001_00003,-12],aux17)
weightedsumleq([1,5,1],[S_00001_00001,S_00001_00003,-15],aux18)
weightedsumgeq([1,5,1],[S_00001_00001,S_00001_00003,-15],aux18)
weightedsumleq([1,5,1],[S_00001_00002,S_00001_00003,-16],aux19)
weightedsumgeq([1,5,1],[S_00001_00002,S_00001_00003,-16],aux19)
weightedsumleq([6,1],[S_00001_00003,-17],aux20)
weightedsumgeq([6,1],[S_00001_00003,-17],aux20)
weightedsumleq([1,6],[-5,S_00002_00001],aux21)
weightedsumgeq([1,6],[-5,S_00002_00001],aux21)
weightedsumleq([1,1,5],[S_00001_00002,-6,S_00002_00001],aux22)
weightedsumgeq([1,1,5],[S_00001_00002,-6,S_00002_00001],aux22)
weightedsumleq([5,1,1],[S_00001_00002,-10,S_00002_00001],aux23)
weightedsumgeq([5,1,1],[S_00001_00002,-10,S_00002_00001],aux23)
weightedsumleq([1,6],[-5,S_00003_00001],aux24)
weightedsumgeq([1,6],[-5,S_00003_00001],aux24)
weightedsumleq([1,1,5],[S_00001_00003,-7,S_00003_00001],aux25)
weightedsumgeq([1,1,5],[S_00001_00003,-7,S_00003_00001],aux25)
weightedsumleq([5,1,1],[S_00001_00003,-15,S_00003_00001],aux26)
weightedsumgeq([5,1,1],[S_00001_00003,-15,S_00003_00001],aux26)
weightedsumleq([1,5],[-4,S_00002_00001],aux0)
weightedsumgeq([1,5],[-4,S_00002_00001],aux0)
weightedsumleq([1,5],[-4,S_00003_00001],aux1)
weightedsumgeq([1,5],[-4,S_00003_00001],aux1)
sumleq([S_00001_00003,-2],aux2)
sumgeq([S_00001_00003,-2],aux2)
weightedsumleq([5,1],[S_00001_00001,-4],aux3)
weightedsumgeq([5,1],[S_00001_00001,-4],aux3)
sumleq([S_00001_00002,-1],aux4)
sumgeq([S_00001_00002,-1],aux4)
weightedsumleq([5,1],[S_00001_00003,-14],aux5)
weightedsumgeq([5,1],[S_00001_00003,-14],aux5)
weightedsumleq([5,1],[S_00001_00002,-9],aux6)
weightedsumgeq([5,1],[S_00001_00002,-9],aux6)
**EOF**
