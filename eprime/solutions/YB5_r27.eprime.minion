MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 158
# CSE_active_eliminated_expressions = 360
# CSE_active_total_size = 768
**VARIABLES**
DISCRETE M_00001_00002 #
{2..3}
DISCRETE M_00001_00003 #
{2..3}
DISCRETE M_00001_00004 #
{4..5}
DISCRETE M_00001_00005 #
{4..5}
DISCRETE M_00002_00002 #
{2..3}
DISCRETE M_00002_00003 #
{2..3}
DISCRETE M_00002_00004 #
{4..5}
DISCRETE M_00002_00005 #
{4..5}
DISCRETE M_00003_00002 #
{2..3}
DISCRETE M_00003_00003 #
{2..3}
DISCRETE M_00003_00004 #
{4..5}
DISCRETE M_00003_00005 #
{4..5}
DISCRETE M_00004_00002 #
{2..3}
DISCRETE M_00004_00003 #
{2..3}
DISCRETE M_00004_00004 #
{4..5}
DISCRETE M_00004_00005 #
{4..5}
DISCRETE M_00005_00002 #
{2..3}
DISCRETE M_00005_00003 #
{2..3}
DISCRETE M_00005_00004 #
{4..5}
DISCRETE M_00005_00005 #
{4..5}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00001_00004))
{4..5}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00001_00005))
{4..5}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00001_00003))
{2..3}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00001_00002))
{2..3}
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00003_00004 + -3))
{4..5}
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00003_00005 + -3))
{4..5}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00003_00002 + -1))
{2..3}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00003_00003 + -1))
{2..3}
DISCRETE aux16 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00002_00004 + -3))
{4..5}
DISCRETE aux17 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00002_00005 + -3))
{4..5}
DISCRETE aux18 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00002 + -1))
{2..3}
DISCRETE aux19 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00003 + -1))
{2..3}
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00002_00002 + -1))
{2..3}
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00002_00003 + -1))
{2..3}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00002_00004 + -3))
{4..5}
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00002_00005 + -3))
{4..5}
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00005_00002))
{2..3}
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00005_00003))
{2..3}
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00005_00004))
{4..5}
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00005_00005))
{4..5}
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00004_00004 + -3))
{4..5}
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00004_00005 + -3))
{4..5}
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00004_00003 + -1))
{2..3}
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00004_00002 + -1))
{2..3}
DISCRETE aux44 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00003_00005 + -3))
{4..5}
DISCRETE aux45 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00003_00004 + -3))
{4..5}
DISCRETE aux46 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00003_00003 + -1))
{2..3}
DISCRETE aux47 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00003_00002 + -1))
{2..3}
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux48, [1,2,6,7])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux49, [1,2,6,7])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux50, [1,2,6,7])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux51, [1,2,6,7])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux52, [1,2,6,7])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004 + 5*M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux53, [1,2,6,7])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux54, [1,2,6,7])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux55, [1,2,6,7])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux56, [1,2,6,7])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux57, [1,2,6,7])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux58, [1,2,6,7])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux59, [1,2,6,7])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux60, [1,2,6,7])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux61, [1,2,6,7])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux62, [1,2,6,7])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux63, [1,2,6,7])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux64, [1,2,6,7])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux65, [1,2,6,7])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux66, [1,2,6,7])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux67, [1,2,6,7])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00004 + 5*M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux68, [1,2,6,7])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux69, [1,2,6,7])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux70, [1,2,6,7])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux71, [1,2,6,7])
**VARIABLES**
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux72, [1,2,6,7])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux73, [1,2,6,7])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux74, [1,2,6,7])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux75, [1,2,6,7])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux76, [1,2,6,7])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux77, [1,2,6,7])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00004 + 5*M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux78, [1,2,6,7])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux79, [1,2,6,7])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux80, [1,2,6,7])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 5*M_00005_00004 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux81, [1,2,6,7])
**VARIABLES**
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00003 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux82, [1,2,6,7])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00002 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux83, [1,2,6,7])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00002 + 5*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux84, [1,2,6,7])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00003 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux85, [1,2,6,7])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00003 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux86, [1,2,6,7])
**VARIABLES**
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00002 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux87, [1,2,6,7])
**VARIABLES**
DISCRETE aux88 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00002 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux88, [1,2,6,7])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00002 + M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux89, [1,2,6,7])
**VARIABLES**
DISCRETE aux90 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00003 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux90, [1,2,6,7])
**VARIABLES**
DISCRETE aux91 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00003 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux91, [1,2,6,7])
**VARIABLES**
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00002 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux92, [1,2,6,7])
**VARIABLES**
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00002 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux93, [1,2,6,7])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 5*M_00001_00004 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux94, [1,2,6,7])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + M_00001_00004 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux95, [1,2,6,7])
**VARIABLES**
DISCRETE aux96 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00001_00002 + M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux96, [1,2,6,7])
**VARIABLES**
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00003 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux97, [1,2,6,7])
**VARIABLES**
DISCRETE aux98 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00003 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux98, [1,2,6,7])
**VARIABLES**
DISCRETE aux99 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00002 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux99, [1,2,6,7])
**VARIABLES**
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00002 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux100, [1,2,6,7])
**VARIABLES**
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00001_00002 + 5*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux101, [1,2,6,7])
**VARIABLES**
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux102, [1,1,6,6])
**VARIABLES**
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux103, [1,1,7,7])
**VARIABLES**
DISCRETE aux104 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux104, [1,1,7,7])
**VARIABLES**
DISCRETE aux105 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux105, [1,1,7,7])
**VARIABLES**
DISCRETE aux106 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux106, [1,1,7,7])
**VARIABLES**
DISCRETE aux107 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux107, [1,1,6,6])
**VARIABLES**
DISCRETE aux108 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux108, [1,1,6,6])
**VARIABLES**
DISCRETE aux109 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux109, [1,1,6,6])
**VARIABLES**
DISCRETE aux110 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00002 + -1)
{1..2}
DISCRETE aux111 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004 + -3)
{1..2}
DISCRETE aux112 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00003 + -1)
{1..2}
DISCRETE aux113 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00005_00002)
{1..2}
DISCRETE aux114 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00005_00003)
{1..2}
DISCRETE aux115 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux115, [1,1,7,7])
**VARIABLES**
DISCRETE aux116 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux116, [1,1,7,7])
**VARIABLES**
DISCRETE aux117 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00005)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux117, [1,1,6,6])
**VARIABLES**
DISCRETE aux118 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux118, [1,1,6,6])
**VARIABLES**
DISCRETE aux119 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux119, [1,1,6,6])
**VARIABLES**
DISCRETE aux120 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux120, [1,1,6,6])
**VARIABLES**
DISCRETE aux121 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux121, [1,1,7,7])
**VARIABLES**
DISCRETE aux122 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux122, [1,1,7,7])
**VARIABLES**
DISCRETE aux123 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00005 + -3)
{1..2}
DISCRETE aux124 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004 + -3)
{1..2}
DISCRETE aux125 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00003 + -1)
{1..2}
DISCRETE aux126 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00001_00003)
{1..2}
DISCRETE aux127 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00001_00002)
{1..2}
DISCRETE aux128 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00005 + -3)
{1..2}
DISCRETE aux129 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + M_00001_00005)
{1..2}
DISCRETE aux130 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + M_00001_00004)
{1..2}
DISCRETE aux131 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00005 + -3)
{1..2}
DISCRETE aux132 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004 + -3)
{1..2}
DISCRETE aux133 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00005_00004)
{1..2}
DISCRETE aux134 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00005_00005)
{1..2}
DISCRETE aux135 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux135, [1,1,6,6])
**VARIABLES**
DISCRETE aux136 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux136, [1,1,6,6])
**VARIABLES**
DISCRETE aux137 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00005_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux137, [1,1,6,6])
**VARIABLES**
DISCRETE aux138 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux138, [1,1,7,7])
**VARIABLES**
DISCRETE aux139 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux139, [1,1,7,7])
**VARIABLES**
DISCRETE aux140 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux140, [1,1,7,7])
**VARIABLES**
DISCRETE aux141 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux141, [1,1,7,7])
**VARIABLES**
DISCRETE aux142 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux142, [1,1,7,7])
**VARIABLES**
DISCRETE aux143 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux143, [1,1,7,7])
**VARIABLES**
DISCRETE aux144 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux144, [1,1,7,7])
**VARIABLES**
DISCRETE aux145 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux145, [1,1,6,6])
**VARIABLES**
DISCRETE aux146 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux146, [1,1,6,6])
**VARIABLES**
DISCRETE aux147 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux147, [1,1,6,6])
**VARIABLES**
DISCRETE aux148 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux148, [1,1,6,6])
**VARIABLES**
DISCRETE aux149 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00003 + -1)
{1..2}
DISCRETE aux150 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00002 + -1)
{1..2}
DISCRETE aux151 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux151, [1,1,6,6])
**VARIABLES**
DISCRETE aux152 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux152, [1,1,7,7])
**VARIABLES**
DISCRETE aux153 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux153, [1,1,7,7])
**VARIABLES**
DISCRETE aux154 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux154, [1,1,7,7])
**VARIABLES**
DISCRETE aux155 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux155, [1,1,6,6])
**VARIABLES**
DISCRETE aux156 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux156, [1,1,6,6])
**VARIABLES**
DISCRETE aux157 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002 + -1)
{1..2}
DISCRETE aux158 #ElementOne([M_00001_00002, M_00001_00003], aux157) --- ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux92)
{2..3}
DISCRETE aux159 #ElementOne([M_00001_00002, M_00001_00003], aux149) --- ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux91)
{2..3}
DISCRETE aux160 #ElementOne([M_00001_00004, M_00001_00005], aux132) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux115)
{4..5}
DISCRETE aux161 #ElementOne([M_00001_00004, M_00001_00005], aux123) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux94)
{4..5}
DISCRETE aux162 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux93) --- ElementOne([M_00001_00002, M_00001_00003], aux113)
{2..3}
DISCRETE aux163 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux90) --- ElementOne([M_00001_00002, M_00001_00003], aux114)
{2..3}
DISCRETE aux164 #ElementOne([M_00001_00004, M_00001_00005], aux133) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux95)
{4..5}
DISCRETE aux165 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux116) --- ElementOne([M_00001_00004, M_00001_00005], aux134)
{4..5}
DISCRETE aux166 #ElementOne([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux155) --- ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux109)
{1..5}
DISCRETE aux167 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux49) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux153)
{1..5}
DISCRETE aux168 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux52) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux62)
{1..5}
DISCRETE aux169 #ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux60) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux105)
{1..5}
DISCRETE aux170 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux54) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux61)
{1..5}
DISCRETE aux171 #ElementOne([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux135) --- ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux107)
{1..5}
DISCRETE aux172 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux50) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux139)
{1..5}
DISCRETE aux173 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux51) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux89)
{1..5}
DISCRETE aux174 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux53) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux88)
{1..5}
DISCRETE aux175 #ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux87) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux103)
{1..5}
DISCRETE aux176 #ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux148) --- ElementOne([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux156)
{1..5}
DISCRETE aux177 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux76) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux66)
{1..5}
DISCRETE aux178 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux79) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux152)
{1..5}
DISCRETE aux179 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux142) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux64)
{1..5}
DISCRETE aux180 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux72) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux63)
{1..5}
DISCRETE aux181 #ElementOne([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux136) --- ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux147)
{1..5}
DISCRETE aux182 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux75) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux84)
{1..5}
DISCRETE aux183 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux80) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux140)
{1..5}
DISCRETE aux184 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux78) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux85)
{1..5}
DISCRETE aux185 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux143) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux86)
{1..5}
DISCRETE aux186 #ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux137) --- ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux151)
{1..5}
DISCRETE aux187 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux83) --- ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux65)
{1..5}
DISCRETE aux188 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux82) --- ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux67)
{1..5}
DISCRETE aux189 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux68) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux138)
{1..5}
DISCRETE aux190 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux81) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux154)
{1..5}
DISCRETE aux191 #(5*M_00004_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux191, [1,1,6,6])
**VARIABLES**
DISCRETE aux192 #(M_00004_00002 + 5*M_00004_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux192, [1,2,6,7])
**VARIABLES**
DISCRETE aux193 #(M_00004_00003 + 5*M_00004_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux193, [1,2,6,7])
**VARIABLES**
DISCRETE aux194 #(6*M_00004_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux194, [1,1,7,7])
**VARIABLES**
DISCRETE aux195 #(5*M_00004_00004 + M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux195, [1,2,6,7])
**VARIABLES**
DISCRETE aux196 #(-19 + 5*M_00005_00005)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux196, [1,1,6,6])
**VARIABLES**
DISCRETE aux197 #(-21 + M_00005_00002 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux197, [1,2,6,7])
**VARIABLES**
DISCRETE aux198 #(-21 + M_00005_00003 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux198, [1,2,6,7])
**VARIABLES**
DISCRETE aux199 #(-23 + M_00005_00004 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux199, [1,2,6,7])
**VARIABLES**
DISCRETE aux200 #(-23 + 6*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux200, [1,1,7,7])
**VARIABLES**
**TUPLELIST**
rack 5 5
1 2 3 4 5 
1 1 1 4 5 
1 1 1 4 5 
1 2 3 4 5 
1 2 3 4 5 
**VARIABLES**
ALIAS rack[5,5]=[[1, 2, 3, 4, 5], [1, 1, 1, 4, 5], [1, 1, 1, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]
**TUPLELIST**
perms 4 5
1 2 3 4 5 
1 2 3 5 4 
1 3 2 4 5 
1 3 2 5 4 
**VARIABLES**
ALIAS perms[4,5]=[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4]]
**TUPLELIST**
inverses 4 5
1 2 3 4 5 
1 2 3 5 4 
1 3 2 4 5 
1 3 2 5 4 
**VARIABLES**
ALIAS inverses[4,5]=[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4]]
**SEARCH**
PRINT[[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00001_00005],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00002_00005],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00003_00005],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00004_00005],[M_00005_00002],[M_00005_00003],[M_00005_00004],[M_00005_00005]]
VARORDER STATIC [M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005]
**CONSTRAINTS**
watchelement_one([5, 4], aux130, aux0)
watchelement_one([5, 4], aux129, aux1)
watchelement_one([3, 2], aux126, aux2)
watchelement_one([3, 2], aux127, aux3)
watchelement_one([4, 5], aux111, M_00002_00004)
watchelement_one([4, 5], aux131, M_00002_00005)
watchelement_one([2, 3], aux112, M_00002_00003)
watchelement_one([2, 3], aux150, M_00002_00002)
watchelement_one([4, 5], aux132, M_00004_00004)
watchelement_one([4, 5], aux123, M_00004_00005)
watchelement_one([2, 3], aux157, M_00004_00002)
watchelement_one([2, 3], aux149, M_00004_00003)
watchelement_one([5, 4], aux124, aux12)
watchelement_one([5, 4], aux128, aux13)
watchelement_one([3, 2], aux110, aux14)
watchelement_one([3, 2], aux125, aux15)
watchelement_one([M_00001_00004, M_00001_00005], aux111, aux16)
watchelement_one([M_00001_00004, M_00001_00005], aux131, aux17)
watchelement_one([M_00001_00002, M_00001_00003], aux150, aux18)
watchelement_one([M_00001_00002, M_00001_00003], aux112, aux19)
watchelement_one([3, 2], aux150, aux20)
watchelement_one([3, 2], aux112, aux21)
watchelement_one([5, 4], aux111, aux22)
watchelement_one([5, 4], aux131, aux23)
watchelement_one([2, 3], aux125, M_00003_00003)
watchelement_one([2, 3], aux110, M_00003_00002)
watchelement_one([4, 5], aux128, M_00003_00005)
watchelement_one([4, 5], aux124, M_00003_00004)
watchelement_one([3, 2], aux113, aux28)
watchelement_one([3, 2], aux114, aux29)
watchelement_one([5, 4], aux133, aux30)
watchelement_one([5, 4], aux134, aux31)
watchelement_one([5, 4], aux132, aux32)
watchelement_one([5, 4], aux123, aux33)
watchelement_one([3, 2], aux149, aux34)
watchelement_one([3, 2], aux157, aux35)
watchelement_one([4, 5], aux129, M_00001_00005)
watchelement_one([4, 5], aux130, M_00001_00004)
watchelement_one([2, 3], aux127, M_00001_00002)
watchelement_one([2, 3], aux126, M_00001_00003)
watchelement_one([4, 5], aux134, M_00005_00005)
watchelement_one([4, 5], aux133, M_00005_00004)
watchelement_one([2, 3], aux113, M_00005_00002)
watchelement_one([2, 3], aux114, M_00005_00003)
watchelement_one([M_00001_00004, M_00001_00005], aux128, aux44)
watchelement_one([M_00001_00004, M_00001_00005], aux124, aux45)
watchelement_one([M_00001_00002, M_00001_00003], aux125, aux46)
watchelement_one([M_00001_00002, M_00001_00003], aux110, aux47)
gacalldiff([M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005])
gacalldiff([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005])
gacalldiff([M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005])
gacalldiff([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005])
gacalldiff([M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005])
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux120, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux121, aux18)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux96, aux19)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux100, aux16)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux99, aux17)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux119, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux101, aux47)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux122, aux46)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux98, aux45)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux97, aux44)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux118, 1)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux117, 1)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux102, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux104, aux18)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux55, aux19)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux56, aux16)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux57, aux17)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux146, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux144, aux18)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux71, aux19)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux70, aux16)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux69, aux17)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux108, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux48, aux47)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux106, aux46)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux59, aux45)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux58, aux44)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux145, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux77, aux47)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux141, aux46)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux73, aux45)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux74, aux44)
watchelement_one([1, 1, 1, 4, 5, 1], aux120, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux121, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux96, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux100, M_00001_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux99, M_00001_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux119, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux101, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux122, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux98, M_00001_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux97, M_00001_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux118, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux92, M_00001_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux91, M_00001_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux115, M_00001_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux94, M_00001_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux117, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux93, M_00001_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux90, M_00001_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux95, M_00001_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux116, M_00001_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux102, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux104, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux55, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux56, M_00002_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux57, M_00002_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux108, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux48, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux106, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux59, M_00002_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux58, M_00002_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux109, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux49, M_00002_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux52, M_00002_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux105, M_00002_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux54, M_00002_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux107, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux50, M_00002_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux51, M_00002_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux53, M_00002_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux103, M_00002_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux146, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux144, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux71, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux70, M_00003_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux69, M_00003_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux145, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux77, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux141, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux73, M_00003_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux74, M_00003_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux148, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux76, M_00003_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux79, M_00003_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux142, M_00003_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux72, M_00003_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux147, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux75, M_00003_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux80, M_00003_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux78, M_00003_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux143, M_00003_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux155, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux153, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux62, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux60, M_00004_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux61, M_00004_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux156, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux66, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux152, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux64, M_00004_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux63, M_00004_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux191, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux192, M_00004_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux193, M_00004_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux194, M_00004_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux195, M_00004_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux151, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux65, M_00004_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux67, M_00004_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux68, M_00004_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux154, M_00004_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux135, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux139, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux89, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux88, M_00005_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux87, M_00005_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux136, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux84, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux140, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux85, M_00005_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux86, M_00005_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux137, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux83, M_00005_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux82, M_00005_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux138, M_00005_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux81, M_00005_00005)
watchelement_one([1, 2, 3, 4, 5, 1], aux196, 1)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux197, M_00005_00002)
watchelement_one([2, 3, 4, 5, 1, 2, 3], aux198, M_00005_00003)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux199, M_00005_00004)
watchelement_one([4, 5, 1, 2, 3, 4, 5], aux200, M_00005_00005)
lexleq([M_00001_00004, M_00001_00005, M_00002_00004, M_00002_00005, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00004, M_00005_00005],[aux1, aux0, aux23, aux22, aux13, aux12, M_00005_00002, M_00005_00003, aux31, aux30, aux33, aux32])
lexleq([M_00001_00002, M_00001_00003, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00004_00002, M_00004_00003, M_00005_00002, M_00005_00003],[aux2, aux3, aux15, aux14, M_00003_00004, M_00003_00005, aux21, aux20, aux34, aux35, aux29, aux28])
lexleq([M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005],[aux2, aux3, aux1, aux0, aux15, aux14, aux13, aux12, aux21, aux20, aux23, aux22, aux29, aux28, aux31, aux30, aux34, aux35, aux33, aux32])
watchelement_one([M_00001_00002, M_00001_00003], aux157, aux158)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux92, aux158)
watchelement_one([M_00001_00002, M_00001_00003], aux149, aux159)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux91, aux159)
watchelement_one([M_00001_00004, M_00001_00005], aux132, aux160)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux115, aux160)
watchelement_one([M_00001_00004, M_00001_00005], aux123, aux161)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux94, aux161)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux93, aux162)
watchelement_one([M_00001_00002, M_00001_00003], aux113, aux162)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux90, aux163)
watchelement_one([M_00001_00002, M_00001_00003], aux114, aux163)
watchelement_one([M_00001_00004, M_00001_00005], aux133, aux164)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux95, aux164)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux116, aux165)
watchelement_one([M_00001_00004, M_00001_00005], aux134, aux165)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux155, aux166)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux109, aux166)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux49, aux167)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux153, aux167)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux52, aux168)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux62, aux168)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux60, aux169)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux105, aux169)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux54, aux170)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux61, aux170)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux135, aux171)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux107, aux171)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux50, aux172)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux139, aux172)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux51, aux173)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux89, aux173)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux53, aux174)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux88, aux174)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux87, aux175)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux103, aux175)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux148, aux176)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux156, aux176)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux76, aux177)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux66, aux177)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux79, aux178)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux152, aux178)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux142, aux179)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux64, aux179)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux72, aux180)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux63, aux180)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux136, aux181)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux147, aux181)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux75, aux182)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux84, aux182)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux80, aux183)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux140, aux183)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux78, aux184)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux85, aux184)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux143, aux185)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux86, aux185)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux137, aux186)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux151, aux186)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux83, aux187)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux65, aux187)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux82, aux188)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux67, aux188)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux68, aux189)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux138, aux189)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux81, aux190)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux154, aux190)
weightedsumleq([5,1],[M_00004_00004,-19],aux191)
weightedsumgeq([5,1],[M_00004_00004,-19],aux191)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00004,-21],aux192)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00004,-21],aux192)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00004,-21],aux193)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00004,-21],aux193)
weightedsumleq([6,1],[M_00004_00004,-23],aux194)
weightedsumgeq([6,1],[M_00004_00004,-23],aux194)
weightedsumleq([5,1,1],[M_00004_00004,M_00004_00005,-23],aux195)
weightedsumgeq([5,1,1],[M_00004_00004,M_00004_00005,-23],aux195)
weightedsumleq([1,5],[-19,M_00005_00005],aux196)
weightedsumgeq([1,5],[-19,M_00005_00005],aux196)
weightedsumleq([1,1,5],[-21,M_00005_00002,M_00005_00005],aux197)
weightedsumgeq([1,1,5],[-21,M_00005_00002,M_00005_00005],aux197)
weightedsumleq([1,1,5],[-21,M_00005_00003,M_00005_00005],aux198)
weightedsumgeq([1,1,5],[-21,M_00005_00003,M_00005_00005],aux198)
weightedsumleq([1,1,5],[-23,M_00005_00004,M_00005_00005],aux199)
weightedsumgeq([1,1,5],[-23,M_00005_00004,M_00005_00005],aux199)
weightedsumleq([1,6],[-23,M_00005_00005],aux200)
weightedsumgeq([1,6],[-23,M_00005_00005],aux200)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00003,-11],aux48)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00003,-11],aux48)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00004,-21],aux49)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00004,-21],aux49)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00005,-21],aux50)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00005,-21],aux50)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00005,-21],aux51)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00005,-21],aux51)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-21],aux52)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-21],aux52)
weightedsumleq([1,5,1],[M_00002_00004,M_00002_00005,-23],aux53)
weightedsumgeq([1,5,1],[M_00002_00004,M_00002_00005,-23],aux53)
weightedsumleq([5,1,1],[M_00002_00004,M_00002_00005,-23],aux54)
weightedsumgeq([5,1,1],[M_00002_00004,M_00002_00005,-23],aux54)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00003,-11],aux55)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00003,-11],aux55)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00004,-13],aux56)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00004,-13],aux56)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00005,-13],aux57)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00005,-13],aux57)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00005,-13],aux58)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00005,-13],aux58)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-13],aux59)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-13],aux59)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00004,-13],aux60)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00004,-13],aux60)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00005,-13],aux61)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00005,-13],aux61)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-11],aux62)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-11],aux62)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00005,-13],aux63)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00005,-13],aux63)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00004,-13],aux64)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00004,-13],aux64)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00005,-21],aux65)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00005,-21],aux65)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-11],aux66)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-11],aux66)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00005,-21],aux67)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00005,-21],aux67)
weightedsumleq([1,5,1],[M_00004_00004,M_00004_00005,-23],aux68)
weightedsumgeq([1,5,1],[M_00004_00004,M_00004_00005,-23],aux68)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00005,-13],aux69)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00005,-13],aux69)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-13],aux70)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-13],aux70)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux71)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux71)
weightedsumleq([5,1,1],[M_00003_00004,M_00003_00005,-23],aux72)
weightedsumgeq([5,1,1],[M_00003_00004,M_00003_00005,-23],aux72)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00004,-13],aux73)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00004,-13],aux73)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00005,-13],aux74)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00005,-13],aux74)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00005,-21],aux75)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00005,-21],aux75)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-21],aux76)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-21],aux76)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux77)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux77)
weightedsumleq([1,5,1],[M_00003_00004,M_00003_00005,-23],aux78)
weightedsumgeq([1,5,1],[M_00003_00004,M_00003_00005,-23],aux78)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00004,-21],aux79)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00004,-21],aux79)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00005,-21],aux80)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00005,-21],aux80)
weightedsumleq([1,5,1],[-23,M_00005_00004,M_00005_00005],aux81)
weightedsumgeq([1,5,1],[-23,M_00005_00004,M_00005_00005],aux81)
weightedsumleq([1,1,5],[-21,M_00005_00003,M_00005_00004],aux82)
weightedsumgeq([1,1,5],[-21,M_00005_00003,M_00005_00004],aux82)
weightedsumleq([1,1,5],[-21,M_00005_00002,M_00005_00004],aux83)
weightedsumgeq([1,1,5],[-21,M_00005_00002,M_00005_00004],aux83)
weightedsumleq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux84)
weightedsumgeq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux84)
weightedsumleq([1,5,1],[-13,M_00005_00003,M_00005_00004],aux85)
weightedsumgeq([1,5,1],[-13,M_00005_00003,M_00005_00004],aux85)
weightedsumleq([1,5,1],[-13,M_00005_00003,M_00005_00005],aux86)
weightedsumgeq([1,5,1],[-13,M_00005_00003,M_00005_00005],aux86)
weightedsumleq([1,5,1],[-13,M_00005_00002,M_00005_00005],aux87)
weightedsumgeq([1,5,1],[-13,M_00005_00002,M_00005_00005],aux87)
weightedsumleq([1,5,1],[-13,M_00005_00002,M_00005_00004],aux88)
weightedsumgeq([1,5,1],[-13,M_00005_00002,M_00005_00004],aux88)
weightedsumleq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux89)
weightedsumgeq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux89)
weightedsumleq([1,1,5],[-21,M_00001_00003,M_00001_00005],aux90)
weightedsumgeq([1,1,5],[-21,M_00001_00003,M_00001_00005],aux90)
weightedsumleq([1,1,5],[-21,M_00001_00003,M_00001_00004],aux91)
weightedsumgeq([1,1,5],[-21,M_00001_00003,M_00001_00004],aux91)
weightedsumleq([1,1,5],[-21,M_00001_00002,M_00001_00004],aux92)
weightedsumgeq([1,1,5],[-21,M_00001_00002,M_00001_00004],aux92)
weightedsumleq([1,1,5],[-21,M_00001_00002,M_00001_00005],aux93)
weightedsumgeq([1,1,5],[-21,M_00001_00002,M_00001_00005],aux93)
weightedsumleq([1,5,1],[-23,M_00001_00004,M_00001_00005],aux94)
weightedsumgeq([1,5,1],[-23,M_00001_00004,M_00001_00005],aux94)
weightedsumleq([1,1,5],[-23,M_00001_00004,M_00001_00005],aux95)
weightedsumgeq([1,1,5],[-23,M_00001_00004,M_00001_00005],aux95)
weightedsumleq([1,5,1],[-11,M_00001_00002,M_00001_00003],aux96)
weightedsumgeq([1,5,1],[-11,M_00001_00002,M_00001_00003],aux96)
weightedsumleq([1,5,1],[-13,M_00001_00003,M_00001_00005],aux97)
weightedsumgeq([1,5,1],[-13,M_00001_00003,M_00001_00005],aux97)
weightedsumleq([1,5,1],[-13,M_00001_00003,M_00001_00004],aux98)
weightedsumgeq([1,5,1],[-13,M_00001_00003,M_00001_00004],aux98)
weightedsumleq([1,5,1],[-13,M_00001_00002,M_00001_00005],aux99)
weightedsumgeq([1,5,1],[-13,M_00001_00002,M_00001_00005],aux99)
weightedsumleq([1,5,1],[-13,M_00001_00002,M_00001_00004],aux100)
weightedsumgeq([1,5,1],[-13,M_00001_00002,M_00001_00004],aux100)
weightedsumleq([1,1,5],[-11,M_00001_00002,M_00001_00003],aux101)
weightedsumgeq([1,1,5],[-11,M_00001_00002,M_00001_00003],aux101)
weightedsumleq([5,1],[M_00002_00002,-9],aux102)
weightedsumgeq([5,1],[M_00002_00002,-9],aux102)
weightedsumleq([6,1],[M_00002_00005,-23],aux103)
weightedsumgeq([6,1],[M_00002_00005,-23],aux103)
weightedsumleq([6,1],[M_00002_00002,-11],aux104)
weightedsumgeq([6,1],[M_00002_00002,-11],aux104)
weightedsumleq([6,1],[M_00002_00004,-23],aux105)
weightedsumgeq([6,1],[M_00002_00004,-23],aux105)
weightedsumleq([6,1],[M_00002_00003,-11],aux106)
weightedsumgeq([6,1],[M_00002_00003,-11],aux106)
weightedsumleq([5,1],[M_00002_00005,-19],aux107)
weightedsumgeq([5,1],[M_00002_00005,-19],aux107)
weightedsumleq([5,1],[M_00002_00003,-9],aux108)
weightedsumgeq([5,1],[M_00002_00003,-9],aux108)
weightedsumleq([5,1],[M_00002_00004,-19],aux109)
weightedsumgeq([5,1],[M_00002_00004,-19],aux109)
sumleq([M_00003_00002,-1],aux110)
sumgeq([M_00003_00002,-1],aux110)
sumleq([M_00002_00004,-3],aux111)
sumgeq([M_00002_00004,-3],aux111)
sumleq([M_00002_00003,-1],aux112)
sumgeq([M_00002_00003,-1],aux112)
sumleq([-1,M_00005_00002],aux113)
sumgeq([-1,M_00005_00002],aux113)
sumleq([-1,M_00005_00003],aux114)
sumgeq([-1,M_00005_00003],aux114)
weightedsumleq([1,6],[-23,M_00001_00004],aux115)
weightedsumgeq([1,6],[-23,M_00001_00004],aux115)
weightedsumleq([1,6],[-23,M_00001_00005],aux116)
weightedsumgeq([1,6],[-23,M_00001_00005],aux116)
weightedsumleq([1,5],[-19,M_00001_00005],aux117)
weightedsumgeq([1,5],[-19,M_00001_00005],aux117)
weightedsumleq([1,5],[-19,M_00001_00004],aux118)
weightedsumgeq([1,5],[-19,M_00001_00004],aux118)
weightedsumleq([1,5],[-9,M_00001_00003],aux119)
weightedsumgeq([1,5],[-9,M_00001_00003],aux119)
weightedsumleq([1,5],[-9,M_00001_00002],aux120)
weightedsumgeq([1,5],[-9,M_00001_00002],aux120)
weightedsumleq([1,6],[-11,M_00001_00002],aux121)
weightedsumgeq([1,6],[-11,M_00001_00002],aux121)
weightedsumleq([1,6],[-11,M_00001_00003],aux122)
weightedsumgeq([1,6],[-11,M_00001_00003],aux122)
sumleq([M_00004_00005,-3],aux123)
sumgeq([M_00004_00005,-3],aux123)
sumleq([M_00003_00004,-3],aux124)
sumgeq([M_00003_00004,-3],aux124)
sumleq([M_00003_00003,-1],aux125)
sumgeq([M_00003_00003,-1],aux125)
sumleq([-1,M_00001_00003],aux126)
sumgeq([-1,M_00001_00003],aux126)
sumleq([-1,M_00001_00002],aux127)
sumgeq([-1,M_00001_00002],aux127)
sumleq([M_00003_00005,-3],aux128)
sumgeq([M_00003_00005,-3],aux128)
sumleq([-3,M_00001_00005],aux129)
sumgeq([-3,M_00001_00005],aux129)
sumleq([-3,M_00001_00004],aux130)
sumgeq([-3,M_00001_00004],aux130)
sumleq([M_00002_00005,-3],aux131)
sumgeq([M_00002_00005,-3],aux131)
sumleq([M_00004_00004,-3],aux132)
sumgeq([M_00004_00004,-3],aux132)
sumleq([-3,M_00005_00004],aux133)
sumgeq([-3,M_00005_00004],aux133)
sumleq([-3,M_00005_00005],aux134)
sumgeq([-3,M_00005_00005],aux134)
weightedsumleq([1,5],[-9,M_00005_00002],aux135)
weightedsumgeq([1,5],[-9,M_00005_00002],aux135)
weightedsumleq([1,5],[-9,M_00005_00003],aux136)
weightedsumgeq([1,5],[-9,M_00005_00003],aux136)
weightedsumleq([1,5],[-19,M_00005_00004],aux137)
weightedsumgeq([1,5],[-19,M_00005_00004],aux137)
weightedsumleq([1,6],[-23,M_00005_00004],aux138)
weightedsumgeq([1,6],[-23,M_00005_00004],aux138)
weightedsumleq([1,6],[-11,M_00005_00002],aux139)
weightedsumgeq([1,6],[-11,M_00005_00002],aux139)
weightedsumleq([1,6],[-11,M_00005_00003],aux140)
weightedsumgeq([1,6],[-11,M_00005_00003],aux140)
weightedsumleq([6,1],[M_00003_00003,-11],aux141)
weightedsumgeq([6,1],[M_00003_00003,-11],aux141)
weightedsumleq([6,1],[M_00003_00004,-23],aux142)
weightedsumgeq([6,1],[M_00003_00004,-23],aux142)
weightedsumleq([6,1],[M_00003_00005,-23],aux143)
weightedsumgeq([6,1],[M_00003_00005,-23],aux143)
weightedsumleq([6,1],[M_00003_00002,-11],aux144)
weightedsumgeq([6,1],[M_00003_00002,-11],aux144)
weightedsumleq([5,1],[M_00003_00003,-9],aux145)
weightedsumgeq([5,1],[M_00003_00003,-9],aux145)
weightedsumleq([5,1],[M_00003_00002,-9],aux146)
weightedsumgeq([5,1],[M_00003_00002,-9],aux146)
weightedsumleq([5,1],[M_00003_00005,-19],aux147)
weightedsumgeq([5,1],[M_00003_00005,-19],aux147)
weightedsumleq([5,1],[M_00003_00004,-19],aux148)
weightedsumgeq([5,1],[M_00003_00004,-19],aux148)
sumleq([M_00004_00003,-1],aux149)
sumgeq([M_00004_00003,-1],aux149)
sumleq([M_00002_00002,-1],aux150)
sumgeq([M_00002_00002,-1],aux150)
weightedsumleq([5,1],[M_00004_00005,-19],aux151)
weightedsumgeq([5,1],[M_00004_00005,-19],aux151)
weightedsumleq([6,1],[M_00004_00003,-11],aux152)
weightedsumgeq([6,1],[M_00004_00003,-11],aux152)
weightedsumleq([6,1],[M_00004_00002,-11],aux153)
weightedsumgeq([6,1],[M_00004_00002,-11],aux153)
weightedsumleq([6,1],[M_00004_00005,-23],aux154)
weightedsumgeq([6,1],[M_00004_00005,-23],aux154)
weightedsumleq([5,1],[M_00004_00002,-9],aux155)
weightedsumgeq([5,1],[M_00004_00002,-9],aux155)
weightedsumleq([5,1],[M_00004_00003,-9],aux156)
weightedsumgeq([5,1],[M_00004_00003,-9],aux156)
sumleq([M_00004_00002,-1],aux157)
sumgeq([M_00004_00002,-1],aux157)
**EOF**
