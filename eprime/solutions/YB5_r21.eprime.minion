MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 62
# CSE_active_eliminated_expressions = 206
# CSE_active_total_size = 306
**VARIABLES**
DISCRETE M_00001_00002 #
{2..3}
DISCRETE M_00001_00003 #
{2..3}
DISCRETE M_00002_00002 #
{2..3}
DISCRETE M_00002_00003 #
{2..3}
DISCRETE M_00003_00002 #
{2..3}
DISCRETE M_00003_00003 #
{2..3}
DISCRETE M_00004_00002 #
{2..3}
DISCRETE M_00004_00003 #
{2..3}
DISCRETE M_00005_00002 #
{2..3}
DISCRETE M_00005_00003 #
{2..3}
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003], (M_00002_00002 + -1))
{2..3}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003], (M_00002_00003 + -1))
{2..3}
DISCRETE aux6 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (-1 + M_00005_00003))
{2..3}
DISCRETE aux7 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (-1 + M_00005_00002))
{2..3}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003], (-1 + M_00005_00002))
{2..3}
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003], (-1 + M_00005_00003))
{2..3}
DISCRETE aux10 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00002 + -1))
{2..3}
DISCRETE aux11 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00003 + -1))
{2..3}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003], (M_00003_00002 + -1))
{2..3}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003], (M_00003_00003 + -1))
{2..3}
DISCRETE aux20 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00003_00003 + -1))
{2..3}
DISCRETE aux21 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00003_00002 + -1))
{2..3}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux22, [1,2,6,7])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux23, [1,2,6,7])
**VARIABLES**
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux24, [1,2,6,7])
**VARIABLES**
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux25, [1,2,6,7])
**VARIABLES**
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux26, [1,2,6,7])
**VARIABLES**
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux27, [1,2,6,7])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00002 + 5*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux28, [1,2,6,7])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00002 + M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux29, [1,2,6,7])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00001_00002 + M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux30, [1,2,6,7])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00001_00002 + 5*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux31, [1,2,6,7])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00002_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux32, [1,1,6,6])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux33, [1,1,7,7])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux34, [1,1,7,7])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00003_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux35, [1,1,6,6])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux36, [1,1,7,7])
**VARIABLES**
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux37, [1,1,7,7])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00003_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux38, [1,1,6,6])
**VARIABLES**
DISCRETE aux39 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00003_00002 + -1)
{1..2}
DISCRETE aux40 #Active-CSE: 6 occurrences of this expression or equivalent: (-1 + M_00005_00002)
{1..2}
DISCRETE aux41 #Active-CSE: 5 occurrences of this expression or equivalent: (-1 + M_00001_00003)
{1..2}
DISCRETE aux42 #Active-CSE: 5 occurrences of this expression or equivalent: (-1 + M_00001_00002)
{1..2}
DISCRETE aux43 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00002_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux43, [1,1,6,6])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 6 occurrences of this expression or equivalent: (-9 + 5*M_00005_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux44, [1,1,6,6])
**VARIABLES**
DISCRETE aux45 #Active-CSE: 6 occurrences of this expression or equivalent: (-9 + 5*M_00005_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux45, [1,1,6,6])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux46, [1,1,7,7])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux47, [1,1,7,7])
**VARIABLES**
DISCRETE aux48 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00004_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux48, [1,1,6,6])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux49, [1,1,7,7])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux50, [1,1,7,7])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00003 + -1)
{1..2}
DISCRETE aux52 #Active-CSE: 6 occurrences of this expression or equivalent: (-1 + M_00005_00003)
{1..2}
DISCRETE aux53 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00002_00003 + -1)
{1..2}
DISCRETE aux54 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00004_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux54, [1,1,6,6])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux55, [1,1,7,7])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux56, [1,1,7,7])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00002 + -1)
{1..2}
DISCRETE aux58 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00003_00003 + -1)
{1..2}
DISCRETE aux59 #Active-CSE: 6 occurrences of this expression or equivalent: (-9 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux59, [1,1,6,6])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 6 occurrences of this expression or equivalent: (-9 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux60, [1,1,6,6])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00002_00002 + -1)
{1..2}
DISCRETE aux62 #ElementOne([M_00001_00002, M_00001_00003], aux57) --- ElementOne([M_00004_00002, M_00004_00003], aux42)
{2..3}
DISCRETE aux63 #ElementOne([M_00001_00002, M_00001_00003], aux51) --- ElementOne([M_00004_00002, M_00004_00003], aux41)
{2..3}
DISCRETE aux64 #ElementOne([3, 2], aux41)
{2..3}
DISCRETE aux65 #ElementOne([3, 2], aux42)
{2..3}
DISCRETE aux66 #ElementOne([3, 2], aux58)
{2..3}
DISCRETE aux67 #ElementOne([3, 2], aux39)
{2..3}
DISCRETE aux68 #ElementOne([3, 2], aux53)
{2..3}
DISCRETE aux69 #ElementOne([3, 2], aux61)
{2..3}
DISCRETE aux70 #ElementOne([3, 2], aux51)
{2..3}
DISCRETE aux71 #ElementOne([3, 2], aux57)
{2..3}
DISCRETE aux72 #ElementOne([3, 2], aux52)
{2..3}
DISCRETE aux73 #ElementOne([3, 2], aux40)
{2..3}
**TUPLELIST**
rack 5 5
1 2 3 4 5 
1 1 1 4 4 
1 1 1 4 4 
1 2 3 4 5 
1 1 1 4 4 
**VARIABLES**
ALIAS rack[5,5]=[[1, 2, 3, 4, 5], [1, 1, 1, 4, 4], [1, 1, 1, 4, 4], [1, 2, 3, 4, 5], [1, 1, 1, 4, 4]]
**TUPLELIST**
perms 2 5
1 2 3 4 5 
1 3 2 4 5 
**VARIABLES**
ALIAS perms[2,5]=[[1, 2, 3, 4, 5], [1, 3, 2, 4, 5]]
**TUPLELIST**
inverses 2 5
1 2 3 4 5 
1 3 2 4 5 
**VARIABLES**
ALIAS inverses[2,5]=[[1, 2, 3, 4, 5], [1, 3, 2, 4, 5]]
**SEARCH**
PRINT[[M_00001_00002],[M_00001_00003],[M_00002_00002],[M_00002_00003],[M_00003_00002],[M_00003_00003],[M_00004_00002],[M_00004_00003],[M_00005_00002],[M_00005_00003]]
VARORDER STATIC [M_00001_00002, M_00001_00003, M_00002_00002, M_00002_00003, M_00003_00002, M_00003_00003, M_00004_00002, M_00004_00003, M_00005_00002, M_00005_00003]
**CONSTRAINTS**
watchelement_one([3, 2], aux41, aux64)
watchelement_one([3, 2], aux42, aux65)
watchelement_one([3, 2], aux58, aux66)
watchelement_one([3, 2], aux39, aux67)
watchelement_one([3, 2], aux53, aux68)
watchelement_one([3, 2], aux61, aux69)
watchelement_one([3, 2], aux51, aux70)
watchelement_one([3, 2], aux57, aux71)
watchelement_one([3, 2], aux52, aux72)
watchelement_one([3, 2], aux40, aux73)
watchelement_one([2, 3], aux42, M_00001_00002)
watchelement_one([2, 3], aux41, M_00001_00003)
watchelement_one([2, 3], aux58, M_00003_00003)
watchelement_one([2, 3], aux39, M_00003_00002)
watchelement_one([M_00004_00002, M_00004_00003], aux61, aux4)
watchelement_one([M_00004_00002, M_00004_00003], aux53, aux5)
watchelement_one([M_00001_00002, M_00001_00003], aux52, aux6)
watchelement_one([M_00001_00002, M_00001_00003], aux40, aux7)
watchelement_one([M_00004_00002, M_00004_00003], aux40, aux8)
watchelement_one([M_00004_00002, M_00004_00003], aux52, aux9)
watchelement_one([M_00001_00002, M_00001_00003], aux61, aux10)
watchelement_one([M_00001_00002, M_00001_00003], aux53, aux11)
watchelement_one([2, 3], aux61, M_00002_00002)
watchelement_one([2, 3], aux53, M_00002_00003)
watchelement_one([M_00004_00002, M_00004_00003], aux39, aux14)
watchelement_one([M_00004_00002, M_00004_00003], aux58, aux15)
watchelement_one([2, 3], aux52, M_00005_00003)
watchelement_one([2, 3], aux40, M_00005_00002)
watchelement_one([2, 3], aux57, M_00004_00002)
watchelement_one([2, 3], aux51, M_00004_00003)
watchelement_one([M_00001_00002, M_00001_00003], aux58, aux20)
watchelement_one([M_00001_00002, M_00001_00003], aux39, aux21)
diseq(M_00001_00002,M_00001_00003)
diseq(M_00002_00002,M_00002_00003)
diseq(M_00003_00002,M_00003_00003)
diseq(M_00004_00002,M_00004_00003)
diseq(M_00005_00002,M_00005_00003)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux59, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux36, aux10)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux30, aux11)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux59, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux59, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux60, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux31, aux21)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux37, aux20)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux60, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux60, 5)
watchelement_one([M_00005_00002, M_00005_00003], aux42, aux7)
watchelement_one([M_00005_00002, M_00005_00003], aux41, aux6)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux32, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux33, aux10)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux23, aux11)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux32, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux32, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux35, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux50, aux10)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux26, aux11)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux35, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux35, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux54, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux56, aux4)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux24, aux5)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux54, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux54, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux44, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux46, aux4)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux29, aux5)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux44, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux44, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux43, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux22, aux21)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux34, aux20)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux43, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux43, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux38, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux27, aux21)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux49, aux20)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux38, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux38, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux48, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux25, aux14)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux55, aux15)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux48, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux48, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, 4, 5, 1], aux45, 1)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux28, aux14)
watchelement_one([M_00002_00002, M_00002_00003, 4, 5, 1, M_00003_00002, M_00003_00003], aux47, aux15)
watchelement_one([4, 5, 1, M_00003_00002, M_00003_00003, 4], aux45, 4)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, 4, 5], aux45, 5)
watchelement_one([M_00005_00002, M_00005_00003], aux57, aux8)
watchelement_one([M_00005_00002, M_00005_00003], aux51, aux9)
watchelement_one([M_00005_00002, M_00005_00003], aux61, aux7)
watchelement_one([M_00005_00002, M_00005_00003], aux53, aux6)
watchelement_one([M_00005_00002, M_00005_00003], aux39, aux7)
watchelement_one([M_00005_00002, M_00005_00003], aux58, aux6)
watchelement_one([M_00005_00002, M_00005_00003], aux40, aux8)
watchelement_one([M_00005_00002, M_00005_00003], aux52, aux9)
watchelement_one([1, 1, 1, 4, 4, 1], aux59, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux36, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux30, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux59, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux59, 4)
watchelement_one([1, 1, 1, 4, 4, 1], aux60, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux31, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux37, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux60, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux60, 4)
watchelement_one([1, 1], aux42, 1)
watchelement_one([1, 1], aux41, 1)
watchelement_one([1, 1, 1, 4, 4, 1], aux32, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux33, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux23, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux32, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux32, 4)
watchelement_one([1, 1, 1, 4, 4, 1], aux43, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux22, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux34, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux43, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux43, 4)
watchelement_one([1, 1], aux61, 1)
watchelement_one([1, 1], aux53, 1)
watchelement_one([1, 1, 1, 4, 4, 1], aux35, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux50, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux26, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux35, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux35, 4)
watchelement_one([1, 1, 1, 4, 4, 1], aux38, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux27, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux49, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux38, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux38, 4)
watchelement_one([1, 1], aux39, 1)
watchelement_one([1, 1], aux58, 1)
watchelement_one([1, 1, 1, 4, 4, 1], aux54, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux56, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux24, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux54, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux54, 4)
watchelement_one([1, 1, 1, 4, 4, 1], aux48, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux25, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux55, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux48, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux48, 4)
watchelement_one([1, 1], aux57, 1)
watchelement_one([1, 1], aux51, 1)
watchelement_one([1, 1, 1, 4, 4, 1], aux44, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux46, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux29, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux44, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux44, 4)
watchelement_one([1, 1, 1, 4, 4, 1], aux45, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux28, 1)
watchelement_one([1, 1, 4, 4, 1, 1, 1], aux47, 1)
watchelement_one([4, 4, 1, 1, 1, 4], aux45, 4)
watchelement_one([4, 1, 1, 1, 4, 4], aux45, 4)
watchelement_one([1, 1], aux40, 1)
watchelement_one([1, 1], aux52, 1)
lexleq([M_00001_00002, M_00001_00003, M_00002_00002, M_00002_00003, M_00003_00002, M_00003_00003, M_00004_00002, M_00004_00003, M_00005_00002, M_00005_00003],[aux64, aux65, aux66, aux67, aux68, aux69, aux70, aux71, aux72, aux73])
watchelement_one([M_00001_00002, M_00001_00003], aux57, aux62)
watchelement_one([M_00004_00002, M_00004_00003], aux42, aux62)
watchelement_one([M_00001_00002, M_00001_00003], aux51, aux63)
watchelement_one([M_00004_00002, M_00004_00003], aux41, aux63)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00003,-11],aux22)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00003,-11],aux22)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00003,-11],aux23)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00003,-11],aux23)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-11],aux24)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-11],aux24)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-11],aux25)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-11],aux25)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux26)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux26)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux27)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux27)
weightedsumleq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux28)
weightedsumgeq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux28)
weightedsumleq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux29)
weightedsumgeq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux29)
weightedsumleq([1,5,1],[-11,M_00001_00002,M_00001_00003],aux30)
weightedsumgeq([1,5,1],[-11,M_00001_00002,M_00001_00003],aux30)
weightedsumleq([1,1,5],[-11,M_00001_00002,M_00001_00003],aux31)
weightedsumgeq([1,1,5],[-11,M_00001_00002,M_00001_00003],aux31)
weightedsumleq([5,1],[M_00002_00002,-9],aux32)
weightedsumgeq([5,1],[M_00002_00002,-9],aux32)
weightedsumleq([6,1],[M_00002_00002,-11],aux33)
weightedsumgeq([6,1],[M_00002_00002,-11],aux33)
weightedsumleq([6,1],[M_00002_00003,-11],aux34)
weightedsumgeq([6,1],[M_00002_00003,-11],aux34)
weightedsumleq([5,1],[M_00003_00002,-9],aux35)
weightedsumgeq([5,1],[M_00003_00002,-9],aux35)
weightedsumleq([1,6],[-11,M_00001_00002],aux36)
weightedsumgeq([1,6],[-11,M_00001_00002],aux36)
weightedsumleq([1,6],[-11,M_00001_00003],aux37)
weightedsumgeq([1,6],[-11,M_00001_00003],aux37)
weightedsumleq([5,1],[M_00003_00003,-9],aux38)
weightedsumgeq([5,1],[M_00003_00003,-9],aux38)
sumleq([M_00003_00002,-1],aux39)
sumgeq([M_00003_00002,-1],aux39)
sumleq([-1,M_00005_00002],aux40)
sumgeq([-1,M_00005_00002],aux40)
sumleq([-1,M_00001_00003],aux41)
sumgeq([-1,M_00001_00003],aux41)
sumleq([-1,M_00001_00002],aux42)
sumgeq([-1,M_00001_00002],aux42)
weightedsumleq([5,1],[M_00002_00003,-9],aux43)
weightedsumgeq([5,1],[M_00002_00003,-9],aux43)
weightedsumleq([1,5],[-9,M_00005_00002],aux44)
weightedsumgeq([1,5],[-9,M_00005_00002],aux44)
weightedsumleq([1,5],[-9,M_00005_00003],aux45)
weightedsumgeq([1,5],[-9,M_00005_00003],aux45)
weightedsumleq([1,6],[-11,M_00005_00002],aux46)
weightedsumgeq([1,6],[-11,M_00005_00002],aux46)
weightedsumleq([1,6],[-11,M_00005_00003],aux47)
weightedsumgeq([1,6],[-11,M_00005_00003],aux47)
weightedsumleq([5,1],[M_00004_00003,-9],aux48)
weightedsumgeq([5,1],[M_00004_00003,-9],aux48)
weightedsumleq([6,1],[M_00003_00003,-11],aux49)
weightedsumgeq([6,1],[M_00003_00003,-11],aux49)
weightedsumleq([6,1],[M_00003_00002,-11],aux50)
weightedsumgeq([6,1],[M_00003_00002,-11],aux50)
sumleq([M_00004_00003,-1],aux51)
sumgeq([M_00004_00003,-1],aux51)
sumleq([-1,M_00005_00003],aux52)
sumgeq([-1,M_00005_00003],aux52)
sumleq([M_00002_00003,-1],aux53)
sumgeq([M_00002_00003,-1],aux53)
weightedsumleq([5,1],[M_00004_00002,-9],aux54)
weightedsumgeq([5,1],[M_00004_00002,-9],aux54)
weightedsumleq([6,1],[M_00004_00003,-11],aux55)
weightedsumgeq([6,1],[M_00004_00003,-11],aux55)
weightedsumleq([6,1],[M_00004_00002,-11],aux56)
weightedsumgeq([6,1],[M_00004_00002,-11],aux56)
sumleq([M_00004_00002,-1],aux57)
sumgeq([M_00004_00002,-1],aux57)
sumleq([M_00003_00003,-1],aux58)
sumgeq([M_00003_00003,-1],aux58)
weightedsumleq([1,5],[-9,M_00001_00002],aux59)
weightedsumgeq([1,5],[-9,M_00001_00002],aux59)
weightedsumleq([1,5],[-9,M_00001_00003],aux60)
weightedsumgeq([1,5],[-9,M_00001_00003],aux60)
sumleq([M_00002_00002,-1],aux61)
sumgeq([M_00002_00002,-1],aux61)
**EOF**
