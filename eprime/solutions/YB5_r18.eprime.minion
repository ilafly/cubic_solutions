MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 99
# CSE_active_eliminated_expressions = 330
# CSE_active_total_size = 463
**VARIABLES**
DISCRETE M_00001_00002 #
{2..3}
DISCRETE M_00001_00003 #
{3..4}
DISCRETE M_00001_00004 #
{2..4}
DISCRETE M_00002_00002 #
{2..3}
DISCRETE M_00002_00003 #
{3..4}
DISCRETE M_00002_00004 #
{2..4}
DISCRETE M_00003_00002 #
{2..4}
DISCRETE M_00003_00003 #
{2..4}
DISCRETE M_00003_00004 #
{2..4}
DISCRETE M_00004_00002 #
{2..4}
DISCRETE M_00004_00003 #
{3..4}
DISCRETE M_00004_00004 #
{2..4}
DISCRETE M_00005_00002 #
{2..4}
DISCRETE M_00005_00003 #
{2..4}
DISCRETE M_00005_00004 #
{2..4}
DISCRETE aux0 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], (M_00004_00002 + -1))
{2..4}
DISCRETE aux1 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], (M_00004_00004 + -1))
{2..4}
DISCRETE aux5 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], (M_00003_00004 + -1))
{2..4}
DISCRETE aux6 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], (M_00003_00003 + -1))
{2..4}
DISCRETE aux7 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], (M_00003_00002 + -1))
{2..4}
DISCRETE aux14 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], (M_00002_00004 + -1))
{2..4}
DISCRETE aux21 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00004_00003 + -2))
{2..4}
DISCRETE aux22 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00002 + -1))
{2..4}
DISCRETE aux23 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00002_00003 + -2))
{2..4}
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00003 + -16)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux24, [1,2,6,7])
**VARIABLES**
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00004 + -11)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux25, [1,2,6,7,11,12])
**VARIABLES**
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00004 + -12)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux26, [1,2,6,7,11,12])
**VARIABLES**
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00003 + -12)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux27, [1,2,6,7])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00004 + -11)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux28, [1,3,6,8])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00004 + -16)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux29, [1,3,6,8])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux30, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00003 + -12)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux31, [1,2,6,7,11,12])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00004 + -16)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux32, [1,3,6,8])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux33, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00003 + -16)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux34, [1,3,6,8])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00004 + -12)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux35, [1,2,6,7,11,12])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux36, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00003 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux37, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux38, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux39, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux40 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00003 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux40, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux41 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux41, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00003 + 5*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux42, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00002 + 5*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux43, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00002 + 5*M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux44, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00002 + M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux45, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00003 + M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux46, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00002 + M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux47, [1,3,6,8,11,13])
**VARIABLES**
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00001_00002 + M_00001_00004)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux48, [1,3,6,8])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (-16 + M_00001_00002 + 5*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux49, [1,2,6,7])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00003 + 5*M_00001_00004)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux50, [1,2,6,7,11,12])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00001_00002 + 5*M_00001_00004)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux51, [1,2,6,7,11,12])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + 5*M_00001_00002 + M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux52, [1,2,6,7])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (-16 + 5*M_00001_00003 + M_00001_00004)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux53, [1,3,6,8])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00004_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux54, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00004_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux55, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00004_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux56, [1,1,6,6])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux57, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux58, [1,1,7,7])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux59, [1,1,7,7])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 4 occurrences of this expression or equivalent: (-9 + 5*M_00001_00004)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux60, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 4 occurrences of this expression or equivalent: (-9 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux61, [1,1,6,6])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 4 occurrences of this expression or equivalent: (-14 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux62, [1,1,6,6])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 7 occurrences of this expression or equivalent: (-1 + M_00001_00004)
{1..3}
DISCRETE aux64 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00004_00002 + -1)
{1..3}
DISCRETE aux65 #Active-CSE: 7 occurrences of this expression or equivalent: (-2 + M_00001_00003)
{1..2}
DISCRETE aux66 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00004_00003 + -2)
{1..2}
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux67, [1,1,7,7])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux68, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux69, [1,1,7,7])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00003_00004 + -1)
{1..3}
DISCRETE aux71 #Active-CSE: 7 occurrences of this expression or equivalent: (-1 + M_00001_00002)
{1..2}
DISCRETE aux72 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00002_00004 + -1)
{1..3}
DISCRETE aux73 #Active-CSE: 7 occurrences of this expression or equivalent: (-1 + M_00005_00002)
{1..3}
DISCRETE aux74 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00003_00003 + -1)
{1..3}
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux75, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux76, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux77, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00003 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux78, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux79, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux80, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00004_00004 + -1)
{1..3}
DISCRETE aux82 #Active-CSE: 7 occurrences of this expression or equivalent: (-1 + M_00005_00004)
{1..3}
DISCRETE aux83 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00002_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux83, [1,1,6,6])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00002_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux84, [1,1,6,6])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00002_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux85, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00002_00002 + -1)
{1..2}
DISCRETE aux87 #Active-CSE: 7 occurrences of this expression or equivalent: (-1 + M_00005_00003)
{1..3}
DISCRETE aux88 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00003_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux88, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00003_00003 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux89, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux90 #Active-CSE: 4 occurrences of this expression or equivalent: (5*M_00003_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux90, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux91 #Active-CSE: 4 occurrences of this expression or equivalent: (-9 + 5*M_00005_00003)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux91, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux92 #Active-CSE: 4 occurrences of this expression or equivalent: (-9 + 5*M_00005_00004)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux92, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux93 #Active-CSE: 4 occurrences of this expression or equivalent: (-9 + 5*M_00005_00002)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux93, [1,1,6,6,11,11])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux94, [1,1,7,7])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux95, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux96 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux96, [1,1,7,7,13,13])
**VARIABLES**
DISCRETE aux97 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00003_00002 + -1)
{1..3}
DISCRETE aux98 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00002_00003 + -2)
{1..2}
DISCRETE aux99 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], aux73) --- ElementOne([M_00005_00002, M_00005_00003], aux71)
{2..4}
DISCRETE aux100 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], aux87) --- ElementOne([M_00005_00003, M_00005_00004], aux65)
{2..4}
DISCRETE aux101 #ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux63) --- ElementOne([M_00001_00002, M_00001_00003, M_00001_00004], aux82)
{2..4}
DISCRETE aux102 #ElementOne([M_00005_00002, M_00005_00003], aux86) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux76)
{2..4}
DISCRETE aux103 #ElementOne([M_00005_00003, M_00005_00004], aux98) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux45)
{2..4}
DISCRETE aux104 #ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux72) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux47)
{2..4}
DISCRETE aux105 #ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux97) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux44)
{2..4}
DISCRETE aux106 #ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux74) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux77)
{2..4}
DISCRETE aux107 #ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux70) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux46)
{2..4}
DISCRETE aux108 #ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux64) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux43)
{2..4}
DISCRETE aux109 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux42) --- ElementOne([M_00005_00003, M_00005_00004], aux66)
{2..4}
DISCRETE aux110 #ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux81) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux75)
{2..4}
DISCRETE aux111 #ElementOne([2, 4], aux71)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux111, [2,2,4,4])
**VARIABLES**
DISCRETE aux112 #ElementOne([2, 4, 3], aux63)
{2..4}
DISCRETE aux113 #ElementOne([4, 3], aux65)
{3..4}
DISCRETE aux114 #ElementOne([2, 4], aux86)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux114, [2,2,4,4])
**VARIABLES**
DISCRETE aux115 #ElementOne([2, 4, 3], aux72)
{2..4}
DISCRETE aux116 #ElementOne([4, 3], aux98)
{3..4}
DISCRETE aux117 #ElementOne([2, 4, 3], aux64)
{2..4}
DISCRETE aux118 #ElementOne([2, 4, 3], aux81)
{2..4}
DISCRETE aux119 #ElementOne([4, 3], aux66)
{3..4}
DISCRETE aux120 #ElementOne([2, 4, 3], aux97)
{2..4}
DISCRETE aux121 #ElementOne([2, 4, 3], aux70)
{2..4}
DISCRETE aux122 #ElementOne([2, 4, 3], aux74)
{2..4}
DISCRETE aux123 #ElementOne([2, 4, 3], aux73)
{2..4}
DISCRETE aux124 #ElementOne([2, 4, 3], aux82)
{2..4}
DISCRETE aux125 #ElementOne([2, 4, 3], aux87)
{2..4}
DISCRETE aux126 #ElementOne([2, 4], aux65)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux126, [2,2,4,4])
**VARIABLES**
DISCRETE aux127 #ElementOne([3, 2], aux71)
{2..3}
DISCRETE aux128 #ElementOne([3, 2, 4], aux63)
{2..4}
DISCRETE aux129 #ElementOne([3, 2, 4], aux74)
{2..4}
DISCRETE aux130 #ElementOne([3, 2, 4], aux97)
{2..4}
DISCRETE aux131 #ElementOne([3, 2, 4], aux70)
{2..4}
DISCRETE aux132 #ElementOne([2, 4], aux98)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux132, [2,2,4,4])
**VARIABLES**
DISCRETE aux133 #ElementOne([3, 2], aux86)
{2..3}
DISCRETE aux134 #ElementOne([3, 2, 4], aux72)
{2..4}
DISCRETE aux135 #ElementOne([2, 4], aux66)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux135, [2,2,4,4])
**VARIABLES**
DISCRETE aux136 #ElementOne([3, 2, 4], aux64)
{2..4}
DISCRETE aux137 #ElementOne([3, 2, 4], aux81)
{2..4}
DISCRETE aux138 #ElementOne([3, 2, 4], aux87)
{2..4}
DISCRETE aux139 #ElementOne([3, 2, 4], aux73)
{2..4}
DISCRETE aux140 #ElementOne([3, 2, 4], aux82)
{2..4}
DISCRETE aux141 #ElementOne([2, 3], aux65)
{2..3}
DISCRETE aux142 #ElementOne([4, 2, 3], aux63)
{2..4}
DISCRETE aux143 #ElementOne([4, 2], aux71)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux143, [2,2,4,4])
**VARIABLES**
DISCRETE aux144 #ElementOne([4, 2, 3], aux74)
{2..4}
DISCRETE aux145 #ElementOne([4, 2, 3], aux70)
{2..4}
DISCRETE aux146 #ElementOne([4, 2, 3], aux97)
{2..4}
DISCRETE aux147 #ElementOne([2, 3], aux66)
{2..3}
DISCRETE aux148 #ElementOne([4, 2, 3], aux81)
{2..4}
DISCRETE aux149 #ElementOne([4, 2, 3], aux64)
{2..4}
DISCRETE aux150 #ElementOne([2, 3], aux98)
{2..3}
DISCRETE aux151 #ElementOne([4, 2, 3], aux72)
{2..4}
DISCRETE aux152 #ElementOne([4, 2], aux86)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux152, [2,2,4,4])
**VARIABLES**
DISCRETE aux153 #ElementOne([4, 2, 3], aux87)
{2..4}
DISCRETE aux154 #ElementOne([4, 2, 3], aux82)
{2..4}
DISCRETE aux155 #ElementOne([4, 2, 3], aux73)
{2..4}
DISCRETE aux156 #ElementOne([4, 3, 2], aux63)
{2..4}
DISCRETE aux157 #ElementOne([3, 2], aux65)
{2..3}
DISCRETE aux158 #ElementOne([4, 3], aux71)
{3..4}
DISCRETE aux159 #ElementOne([4, 3, 2], aux81)
{2..4}
DISCRETE aux160 #ElementOne([3, 2], aux66)
{2..3}
DISCRETE aux161 #ElementOne([4, 3, 2], aux64)
{2..4}
DISCRETE aux162 #ElementOne([4, 3, 2], aux70)
{2..4}
DISCRETE aux163 #ElementOne([4, 3, 2], aux74)
{2..4}
DISCRETE aux164 #ElementOne([4, 3, 2], aux97)
{2..4}
DISCRETE aux165 #ElementOne([4, 3, 2], aux72)
{2..4}
DISCRETE aux166 #ElementOne([3, 2], aux98)
{2..3}
DISCRETE aux167 #ElementOne([4, 3], aux86)
{3..4}
DISCRETE aux168 #ElementOne([4, 3, 2], aux82)
{2..4}
DISCRETE aux169 #ElementOne([4, 3, 2], aux87)
{2..4}
DISCRETE aux170 #ElementOne([4, 3, 2], aux73)
{2..4}
DISCRETE aux171 #ElementOne([3, 4, 2], aux63)
{2..4}
DISCRETE aux172 #ElementOne([3, 4], aux71)
{3..4}
DISCRETE aux173 #ElementOne([4, 2], aux65)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux173, [2,2,4,4])
**VARIABLES**
DISCRETE aux174 #ElementOne([3, 4, 2], aux81)
{2..4}
DISCRETE aux175 #ElementOne([3, 4, 2], aux64)
{2..4}
DISCRETE aux176 #ElementOne([4, 2], aux66)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux176, [2,2,4,4])
**VARIABLES**
DISCRETE aux177 #ElementOne([3, 4, 2], aux72)
{2..4}
DISCRETE aux178 #ElementOne([3, 4], aux86)
{3..4}
DISCRETE aux179 #ElementOne([4, 2], aux98)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux179, [2,2,4,4])
**VARIABLES**
DISCRETE aux180 #ElementOne([3, 4, 2], aux70)
{2..4}
DISCRETE aux181 #ElementOne([3, 4, 2], aux97)
{2..4}
DISCRETE aux182 #ElementOne([3, 4, 2], aux74)
{2..4}
DISCRETE aux183 #ElementOne([3, 4, 2], aux82)
{2..4}
DISCRETE aux184 #ElementOne([3, 4, 2], aux73)
{2..4}
DISCRETE aux185 #ElementOne([3, 4, 2], aux87)
{2..4}
**TUPLELIST**
rack 5 5
1 2 3 4 5 
1 1 1 1 5 
1 1 1 1 5 
1 1 1 1 5 
1 2 3 4 5 
**VARIABLES**
ALIAS rack[5,5]=[[1, 2, 3, 4, 5], [1, 1, 1, 1, 5], [1, 1, 1, 1, 5], [1, 1, 1, 1, 5], [1, 2, 3, 4, 5]]
**TUPLELIST**
perms 6 5
1 2 3 4 5 
1 2 4 3 5 
1 3 2 4 5 
1 3 4 2 5 
1 4 3 2 5 
1 4 2 3 5 
**VARIABLES**
ALIAS perms[6,5]=[[1, 2, 3, 4, 5], [1, 2, 4, 3, 5], [1, 3, 2, 4, 5], [1, 3, 4, 2, 5], [1, 4, 3, 2, 5], [1, 4, 2, 3, 5]]
**TUPLELIST**
inverses 6 5
1 2 3 4 5 
1 2 4 3 5 
1 3 2 4 5 
1 4 2 3 5 
1 4 3 2 5 
1 3 4 2 5 
**VARIABLES**
ALIAS inverses[6,5]=[[1, 2, 3, 4, 5], [1, 2, 4, 3, 5], [1, 3, 2, 4, 5], [1, 4, 2, 3, 5], [1, 4, 3, 2, 5], [1, 3, 4, 2, 5]]
**SEARCH**
PRINT[[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00005_00002],[M_00005_00003],[M_00005_00004]]
VARORDER STATIC [M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00002, M_00005_00003, M_00005_00004]
**CONSTRAINTS**
watchelement_one([2, 4], aux71, aux111)
watchelement_one([2, 4, 3], aux63, aux112)
watchelement_one([4, 3], aux65, aux113)
watchelement_one([2, 4], aux86, aux114)
watchelement_one([2, 4, 3], aux72, aux115)
watchelement_one([4, 3], aux98, aux116)
watchelement_one([2, 4, 3], aux64, aux117)
watchelement_one([2, 4, 3], aux81, aux118)
watchelement_one([4, 3], aux66, aux119)
watchelement_one([2, 4, 3], aux97, aux120)
watchelement_one([2, 4, 3], aux70, aux121)
watchelement_one([2, 4, 3], aux74, aux122)
watchelement_one([2, 4, 3], aux73, aux123)
watchelement_one([2, 4, 3], aux82, aux124)
watchelement_one([2, 4, 3], aux87, aux125)
watchelement_one([2, 4], aux65, aux126)
watchelement_one([3, 2], aux71, aux127)
watchelement_one([3, 2, 4], aux63, aux128)
watchelement_one([3, 2, 4], aux74, aux129)
watchelement_one([3, 2, 4], aux97, aux130)
watchelement_one([3, 2, 4], aux70, aux131)
watchelement_one([2, 4], aux98, aux132)
watchelement_one([3, 2], aux86, aux133)
watchelement_one([3, 2, 4], aux72, aux134)
watchelement_one([2, 4], aux66, aux135)
watchelement_one([3, 2, 4], aux64, aux136)
watchelement_one([3, 2, 4], aux81, aux137)
watchelement_one([3, 2, 4], aux87, aux138)
watchelement_one([3, 2, 4], aux73, aux139)
watchelement_one([3, 2, 4], aux82, aux140)
watchelement_one([2, 3], aux65, aux141)
watchelement_one([4, 2, 3], aux63, aux142)
watchelement_one([4, 2], aux71, aux143)
watchelement_one([4, 2, 3], aux74, aux144)
watchelement_one([4, 2, 3], aux70, aux145)
watchelement_one([4, 2, 3], aux97, aux146)
watchelement_one([2, 3], aux66, aux147)
watchelement_one([4, 2, 3], aux81, aux148)
watchelement_one([4, 2, 3], aux64, aux149)
watchelement_one([2, 3], aux98, aux150)
watchelement_one([4, 2, 3], aux72, aux151)
watchelement_one([4, 2], aux86, aux152)
watchelement_one([4, 2, 3], aux87, aux153)
watchelement_one([4, 2, 3], aux82, aux154)
watchelement_one([4, 2, 3], aux73, aux155)
watchelement_one([4, 3, 2], aux63, aux156)
watchelement_one([3, 2], aux65, aux157)
watchelement_one([4, 3], aux71, aux158)
watchelement_one([4, 3, 2], aux81, aux159)
watchelement_one([3, 2], aux66, aux160)
watchelement_one([4, 3, 2], aux64, aux161)
watchelement_one([4, 3, 2], aux70, aux162)
watchelement_one([4, 3, 2], aux74, aux163)
watchelement_one([4, 3, 2], aux97, aux164)
watchelement_one([4, 3, 2], aux72, aux165)
watchelement_one([3, 2], aux98, aux166)
watchelement_one([4, 3], aux86, aux167)
watchelement_one([4, 3, 2], aux82, aux168)
watchelement_one([4, 3, 2], aux87, aux169)
watchelement_one([4, 3, 2], aux73, aux170)
watchelement_one([3, 4, 2], aux63, aux171)
watchelement_one([3, 4], aux71, aux172)
watchelement_one([4, 2], aux65, aux173)
watchelement_one([3, 4, 2], aux81, aux174)
watchelement_one([3, 4, 2], aux64, aux175)
watchelement_one([4, 2], aux66, aux176)
watchelement_one([3, 4, 2], aux72, aux177)
watchelement_one([3, 4], aux86, aux178)
watchelement_one([4, 2], aux98, aux179)
watchelement_one([3, 4, 2], aux70, aux180)
watchelement_one([3, 4, 2], aux97, aux181)
watchelement_one([3, 4, 2], aux74, aux182)
watchelement_one([3, 4, 2], aux82, aux183)
watchelement_one([3, 4, 2], aux73, aux184)
watchelement_one([3, 4, 2], aux87, aux185)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux64, aux0)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux81, aux1)
watchelement_one([2, 3, 4], aux97, M_00003_00002)
watchelement_one([2, 3, 4], aux70, M_00003_00004)
watchelement_one([2, 3, 4], aux74, M_00003_00003)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux70, aux5)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux74, aux6)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux97, aux7)
watchelement_one([2, 3, 4], aux73, M_00005_00002)
watchelement_one([2, 3, 4], aux82, M_00005_00004)
watchelement_one([2, 3, 4], aux87, M_00005_00003)
watchelement_one([2, 3, 4], aux81, M_00004_00004)
watchelement_one([2, 3, 4], aux64, M_00004_00002)
watchelement_one([2, 3, 4], aux72, M_00002_00004)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux72, aux14)
watchelement_one([2, 3, 4], aux63, M_00001_00004)
watchelement_one([2, 3], aux71, M_00001_00002)
watchelement_one([3, 4], aux65, M_00001_00003)
watchelement_one([2, 3], aux86, M_00002_00002)
watchelement_one([3, 4], aux98, M_00002_00003)
watchelement_one([3, 4], aux66, M_00004_00003)
watchelement_one([M_00001_00003, M_00001_00004], aux66, aux21)
watchelement_one([M_00001_00002, M_00001_00003], aux86, aux22)
watchelement_one([M_00001_00003, M_00001_00004], aux98, aux23)
gacalldiff([M_00001_00002, M_00001_00003, M_00001_00004])
gacalldiff([M_00002_00002, M_00002_00003, M_00002_00004])
gacalldiff([M_00003_00002, M_00003_00003, M_00003_00004])
gacalldiff([M_00004_00002, M_00004_00003, M_00004_00004])
gacalldiff([M_00005_00002, M_00005_00003, M_00005_00004])
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1], aux61, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003], aux69, aux22)
watchelement_one([M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004], aux52, aux23)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004], aux48, aux14)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux61, 5)
watchelement_one([1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux62, 1)
watchelement_one([M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003], aux49, aux7)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux67, aux6)
watchelement_one([M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux53, aux5)
watchelement_one([5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux62, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux60, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003], aux51, aux0)
watchelement_one([M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux50, aux21)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux68, aux1)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux60, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1], aux83, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003], aux58, aux22)
watchelement_one([M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004], aux27, aux23)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004], aux28, aux14)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux83, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux88, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux80, aux22)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux37, aux23)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux36, aux14)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux88, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux55, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux95, aux22)
watchelement_one([M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux31, aux23)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux30, aux14)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux55, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux93, 1)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux93, 5)
watchelement_one([1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux84, 1)
watchelement_one([M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003], aux24, aux7)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux59, aux6)
watchelement_one([M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux29, aux5)
watchelement_one([5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux84, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux89, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux40, aux7)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux78, aux6)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux38, aux5)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux89, 5)
watchelement_one([1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux56, 1)
watchelement_one([M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux34, aux7)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux94, aux6)
watchelement_one([M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux32, aux5)
watchelement_one([5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux56, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux91, 1)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux91, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux85, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003], aux25, aux0)
watchelement_one([M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux26, aux21)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux57, aux1)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux85, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux90, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux39, aux0)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux41, aux21)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux79, aux1)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux90, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux54, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux33, aux0)
watchelement_one([M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux35, aux21)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux96, aux1)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux54, 5)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1], aux92, 1)
watchelement_one([5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux92, 5)
watchelement_one([1, 1, 1, 1, 5, 1], aux61, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1], aux69, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1], aux52, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1], aux48, 1)
watchelement_one([5, 1, 1, 1, 1, 5], aux61, 5)
watchelement_one([1, 1, 1, 1, 5, 1], aux62, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1], aux49, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1], aux67, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1], aux53, 1)
watchelement_one([5, 1, 1, 1, 1, 5], aux62, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux60, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1], aux51, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux50, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux68, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux60, 5)
watchelement_one([1, 1, 1, 1, 5, 1], aux83, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1], aux58, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1], aux27, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1], aux28, 1)
watchelement_one([5, 1, 1, 1, 1, 5], aux83, 5)
watchelement_one([1, 1, 1, 1, 5, 1], aux84, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1], aux24, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1], aux59, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1], aux29, 1)
watchelement_one([5, 1, 1, 1, 1, 5], aux84, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux85, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1], aux25, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux26, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux57, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux85, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux88, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux80, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux37, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux36, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux88, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux89, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux40, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux78, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux38, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux89, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux90, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux39, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux41, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux79, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux90, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux55, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux95, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux31, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux30, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux55, 5)
watchelement_one([1, 1, 1, 1, 5, 1], aux56, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1], aux34, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1], aux94, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1], aux32, 1)
watchelement_one([5, 1, 1, 1, 1, 5], aux56, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux54, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux33, 1)
watchelement_one([1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux35, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux96, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux54, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux93, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux76, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux45, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux47, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux93, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux91, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux44, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux77, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux46, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux91, 5)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1], aux92, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux43, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux42, 1)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1], aux75, 1)
watchelement_one([5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5], aux92, 5)
lexleq([M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00002, M_00005_00003, M_00005_00004],[aux111, aux112, aux113, aux114, aux115, aux116, aux117, aux118, aux119, aux120, aux121, aux122, aux123, aux124, aux125])
lexleq([M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00002, M_00005_00003, M_00005_00004],[aux126, aux127, aux128, aux129, aux130, aux131, aux132, aux133, aux134, aux135, aux136, aux137, aux138, aux139, aux140])
lexleq([M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00002, M_00005_00003, M_00005_00004],[aux141, aux142, aux143, aux144, aux145, aux146, aux147, aux148, aux149, aux150, aux151, aux152, aux153, aux154, aux155])
lexleq([M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00002, M_00005_00003, M_00005_00004],[aux156, aux157, aux158, aux159, aux160, aux161, aux162, aux163, aux164, aux165, aux166, aux167, aux168, aux169, aux170])
lexleq([M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00002, M_00005_00003, M_00005_00004],[aux171, aux172, aux173, aux174, aux175, aux176, aux177, aux178, aux179, aux180, aux181, aux182, aux183, aux184, aux185])
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux73, aux99)
watchelement_one([M_00005_00002, M_00005_00003], aux71, aux99)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux87, aux100)
watchelement_one([M_00005_00003, M_00005_00004], aux65, aux100)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux63, aux101)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004], aux82, aux101)
watchelement_one([M_00005_00002, M_00005_00003], aux86, aux102)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux76, aux102)
watchelement_one([M_00005_00003, M_00005_00004], aux98, aux103)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux45, aux103)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux72, aux104)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux47, aux104)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux97, aux105)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux44, aux105)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux74, aux106)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux77, aux106)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux70, aux107)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux46, aux107)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux64, aux108)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux43, aux108)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux42, aux109)
watchelement_one([M_00005_00003, M_00005_00004], aux66, aux109)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux81, aux110)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, 1, M_00003_00002, M_00003_00003, M_00003_00004, 5, 1, M_00004_00002, M_00004_00003, M_00004_00004], aux75, aux110)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00003,-16],aux24)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00003,-16],aux24)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00004,-11],aux25)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00004,-11],aux25)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-12],aux26)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-12],aux26)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00003,-12],aux27)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00003,-12],aux27)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00004,-11],aux28)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00004,-11],aux28)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-16],aux29)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-16],aux29)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00004,-11],aux30)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00004,-11],aux30)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-12],aux31)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-12],aux31)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00004,-16],aux32)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00004,-16],aux32)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00004,-11],aux33)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00004,-11],aux33)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-16],aux34)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-16],aux34)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00004,-12],aux35)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00004,-12],aux35)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-11],aux36)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-11],aux36)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux37)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux37)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00004,-11],aux38)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00004,-11],aux38)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-11],aux39)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-11],aux39)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux40)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux40)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00004,-11],aux41)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00004,-11],aux41)
weightedsumleq([1,1,5],[-11,M_00005_00003,M_00005_00004],aux42)
weightedsumgeq([1,1,5],[-11,M_00005_00003,M_00005_00004],aux42)
weightedsumleq([1,1,5],[-11,M_00005_00002,M_00005_00004],aux43)
weightedsumgeq([1,1,5],[-11,M_00005_00002,M_00005_00004],aux43)
weightedsumleq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux44)
weightedsumgeq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux44)
weightedsumleq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux45)
weightedsumgeq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux45)
weightedsumleq([1,5,1],[-11,M_00005_00003,M_00005_00004],aux46)
weightedsumgeq([1,5,1],[-11,M_00005_00003,M_00005_00004],aux46)
weightedsumleq([1,5,1],[-11,M_00005_00002,M_00005_00004],aux47)
weightedsumgeq([1,5,1],[-11,M_00005_00002,M_00005_00004],aux47)
weightedsumleq([1,5,1],[-11,M_00001_00002,M_00001_00004],aux48)
weightedsumgeq([1,5,1],[-11,M_00001_00002,M_00001_00004],aux48)
weightedsumleq([1,1,5],[-16,M_00001_00002,M_00001_00003],aux49)
weightedsumgeq([1,1,5],[-16,M_00001_00002,M_00001_00003],aux49)
weightedsumleq([1,1,5],[-12,M_00001_00003,M_00001_00004],aux50)
weightedsumgeq([1,1,5],[-12,M_00001_00003,M_00001_00004],aux50)
weightedsumleq([1,1,5],[-11,M_00001_00002,M_00001_00004],aux51)
weightedsumgeq([1,1,5],[-11,M_00001_00002,M_00001_00004],aux51)
weightedsumleq([1,5,1],[-12,M_00001_00002,M_00001_00003],aux52)
weightedsumgeq([1,5,1],[-12,M_00001_00002,M_00001_00003],aux52)
weightedsumleq([1,5,1],[-16,M_00001_00003,M_00001_00004],aux53)
weightedsumgeq([1,5,1],[-16,M_00001_00003,M_00001_00004],aux53)
weightedsumleq([5,1],[M_00004_00004,-9],aux54)
weightedsumgeq([5,1],[M_00004_00004,-9],aux54)
weightedsumleq([5,1],[M_00004_00002,-9],aux55)
weightedsumgeq([5,1],[M_00004_00002,-9],aux55)
weightedsumleq([5,1],[M_00004_00003,-14],aux56)
weightedsumgeq([5,1],[M_00004_00003,-14],aux56)
weightedsumleq([6,1],[M_00002_00004,-11],aux57)
weightedsumgeq([6,1],[M_00002_00004,-11],aux57)
weightedsumleq([6,1],[M_00002_00002,-11],aux58)
weightedsumgeq([6,1],[M_00002_00002,-11],aux58)
weightedsumleq([6,1],[M_00002_00003,-17],aux59)
weightedsumgeq([6,1],[M_00002_00003,-17],aux59)
weightedsumleq([1,5],[-9,M_00001_00004],aux60)
weightedsumgeq([1,5],[-9,M_00001_00004],aux60)
weightedsumleq([1,5],[-9,M_00001_00002],aux61)
weightedsumgeq([1,5],[-9,M_00001_00002],aux61)
weightedsumleq([1,5],[-14,M_00001_00003],aux62)
weightedsumgeq([1,5],[-14,M_00001_00003],aux62)
sumleq([-1,M_00001_00004],aux63)
sumgeq([-1,M_00001_00004],aux63)
sumleq([M_00004_00002,-1],aux64)
sumgeq([M_00004_00002,-1],aux64)
sumleq([-2,M_00001_00003],aux65)
sumgeq([-2,M_00001_00003],aux65)
sumleq([M_00004_00003,-2],aux66)
sumgeq([M_00004_00003,-2],aux66)
weightedsumleq([1,6],[-17,M_00001_00003],aux67)
weightedsumgeq([1,6],[-17,M_00001_00003],aux67)
weightedsumleq([1,6],[-11,M_00001_00004],aux68)
weightedsumgeq([1,6],[-11,M_00001_00004],aux68)
weightedsumleq([1,6],[-11,M_00001_00002],aux69)
weightedsumgeq([1,6],[-11,M_00001_00002],aux69)
sumleq([M_00003_00004,-1],aux70)
sumgeq([M_00003_00004,-1],aux70)
sumleq([-1,M_00001_00002],aux71)
sumgeq([-1,M_00001_00002],aux71)
sumleq([M_00002_00004,-1],aux72)
sumgeq([M_00002_00004,-1],aux72)
sumleq([-1,M_00005_00002],aux73)
sumgeq([-1,M_00005_00002],aux73)
sumleq([M_00003_00003,-1],aux74)
sumgeq([M_00003_00003,-1],aux74)
weightedsumleq([1,6],[-11,M_00005_00004],aux75)
weightedsumgeq([1,6],[-11,M_00005_00004],aux75)
weightedsumleq([1,6],[-11,M_00005_00002],aux76)
weightedsumgeq([1,6],[-11,M_00005_00002],aux76)
weightedsumleq([1,6],[-11,M_00005_00003],aux77)
weightedsumgeq([1,6],[-11,M_00005_00003],aux77)
weightedsumleq([6,1],[M_00003_00003,-11],aux78)
weightedsumgeq([6,1],[M_00003_00003,-11],aux78)
weightedsumleq([6,1],[M_00003_00004,-11],aux79)
weightedsumgeq([6,1],[M_00003_00004,-11],aux79)
weightedsumleq([6,1],[M_00003_00002,-11],aux80)
weightedsumgeq([6,1],[M_00003_00002,-11],aux80)
sumleq([M_00004_00004,-1],aux81)
sumgeq([M_00004_00004,-1],aux81)
sumleq([-1,M_00005_00004],aux82)
sumgeq([-1,M_00005_00004],aux82)
weightedsumleq([5,1],[M_00002_00002,-9],aux83)
weightedsumgeq([5,1],[M_00002_00002,-9],aux83)
weightedsumleq([5,1],[M_00002_00003,-14],aux84)
weightedsumgeq([5,1],[M_00002_00003,-14],aux84)
weightedsumleq([5,1],[M_00002_00004,-9],aux85)
weightedsumgeq([5,1],[M_00002_00004,-9],aux85)
sumleq([M_00002_00002,-1],aux86)
sumgeq([M_00002_00002,-1],aux86)
sumleq([-1,M_00005_00003],aux87)
sumgeq([-1,M_00005_00003],aux87)
weightedsumleq([5,1],[M_00003_00002,-9],aux88)
weightedsumgeq([5,1],[M_00003_00002,-9],aux88)
weightedsumleq([5,1],[M_00003_00003,-9],aux89)
weightedsumgeq([5,1],[M_00003_00003,-9],aux89)
weightedsumleq([5,1],[M_00003_00004,-9],aux90)
weightedsumgeq([5,1],[M_00003_00004,-9],aux90)
weightedsumleq([1,5],[-9,M_00005_00003],aux91)
weightedsumgeq([1,5],[-9,M_00005_00003],aux91)
weightedsumleq([1,5],[-9,M_00005_00004],aux92)
weightedsumgeq([1,5],[-9,M_00005_00004],aux92)
weightedsumleq([1,5],[-9,M_00005_00002],aux93)
weightedsumgeq([1,5],[-9,M_00005_00002],aux93)
weightedsumleq([6,1],[M_00004_00003,-17],aux94)
weightedsumgeq([6,1],[M_00004_00003,-17],aux94)
weightedsumleq([6,1],[M_00004_00002,-11],aux95)
weightedsumgeq([6,1],[M_00004_00002,-11],aux95)
weightedsumleq([6,1],[M_00004_00004,-11],aux96)
weightedsumgeq([6,1],[M_00004_00004,-11],aux96)
sumleq([M_00003_00002,-1],aux97)
sumgeq([M_00003_00002,-1],aux97)
sumleq([M_00002_00003,-2],aux98)
sumgeq([M_00002_00003,-2],aux98)
**EOF**
