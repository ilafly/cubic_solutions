MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 24
# CSE_active_eliminated_expressions = 48
# CSE_active_total_size = 96
**VARIABLES**
DISCRETE M_00001_00001 #
{1..2}
DISCRETE M_00001_00002 #
{1..2}
DISCRETE M_00002_00001 #
{1..2}
DISCRETE M_00002_00002 #
{1..2}
DISCRETE M_00003_00001 #
{1..2}
DISCRETE M_00003_00002 #
{1..2}
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 3*M_00002_00002 + -3)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux6, [2,2,4,4])
**VARIABLES**
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00002_00001 + M_00002_00002 + -3)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux7, [2,2,4,4])
**VARIABLES**
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00003_00001 + M_00003_00002 + -3)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux8, [2,2,4,4])
**VARIABLES**
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 3*M_00003_00002 + -3)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux9, [2,2,4,4])
**VARIABLES**
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + M_00001_00001 + 3*M_00001_00002)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux10, [2,2,4,4])
**VARIABLES**
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + 3*M_00001_00001 + M_00001_00002)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux11, [2,2,4,4])
**VARIABLES**
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00002_00001 + -2)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux12, [1,1,4,4])
**VARIABLES**
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00002_00002 + -2)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux13, [1,1,4,4])
**VARIABLES**
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux14, [1,1,5,5])
**VARIABLES**
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00002 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux15, [1,1,5,5])
**VARIABLES**
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + 3*M_00001_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux16, [1,1,4,4])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + 3*M_00001_00002)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux17, [1,1,4,4])
**VARIABLES**
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + 4*M_00001_00002)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux18, [1,1,5,5])
**VARIABLES**
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + 4*M_00001_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux19, [1,1,5,5])
**VARIABLES**
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00003_00001 + -2)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux20, [1,1,4,4])
**VARIABLES**
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00003_00002 + -2)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux21, [1,1,4,4])
**VARIABLES**
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux22, [1,1,5,5])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00002 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux23, [1,1,5,5])
**VARIABLES**
DISCRETE aux24 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux19) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux14)
{1..3}
DISCRETE aux25 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux11) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux7)
{1..3}
DISCRETE aux26 #ElementOne([3, M_00002_00001, M_00002_00002, 3], aux16) --- ElementOne([3, M_00002_00001, M_00002_00002, 3], aux12)
{1..3}
DISCRETE aux27 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux22) --- ElementOne([M_00003_00001, M_00003_00002], M_00001_00001)
{1..2}
DISCRETE aux28 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux8) --- ElementOne([M_00003_00001, M_00003_00002], M_00001_00002)
{1..2}
DISCRETE aux29 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux10) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux6)
{1..3}
DISCRETE aux30 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux18) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux15)
{1..3}
DISCRETE aux31 #ElementOne([3, M_00002_00001, M_00002_00002, 3], aux17) --- ElementOne([3, M_00002_00001, M_00002_00002, 3], aux13)
{1..3}
DISCRETE aux32 #ElementOne([M_00003_00001, M_00003_00002], M_00002_00001) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux9)
{1..2}
DISCRETE aux33 #ElementOne([M_00003_00001, M_00003_00002], M_00002_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux23)
{1..2}
DISCRETE aux34 #ElementOne([2, 1], M_00002_00002)
{1..2}
DISCRETE aux35 #ElementOne([2, 1], M_00002_00001)
{1..2}
DISCRETE aux36 #ElementOne([2, 1], M_00001_00002)
{1..2}
DISCRETE aux37 #ElementOne([2, 1], M_00001_00001)
{1..2}
DISCRETE aux38 #ElementOne([2, 1], M_00003_00002)
{1..2}
DISCRETE aux39 #ElementOne([2, 1], M_00003_00001)
{1..2}
**TUPLELIST**
rack 3 3
1 1 3 
2 2 3 
1 2 3 
**VARIABLES**
ALIAS rack[3,3]=[[1, 1, 3], [2, 2, 3], [1, 2, 3]]
**TUPLELIST**
perms 2 3
1 2 3 
2 1 3 
**VARIABLES**
ALIAS perms[2,3]=[[1, 2, 3], [2, 1, 3]]
**TUPLELIST**
inverses 2 3
1 2 3 
2 1 3 
**VARIABLES**
ALIAS inverses[2,3]=[[1, 2, 3], [2, 1, 3]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00002_00001],[M_00002_00002],[M_00003_00001],[M_00003_00002]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00002_00001, M_00002_00002, M_00003_00001, M_00003_00002]
**CONSTRAINTS**
watchelement_one([2, 1], M_00002_00002, aux34)
watchelement_one([2, 1], M_00002_00001, aux35)
watchelement_one([2, 1], M_00001_00002, aux36)
watchelement_one([2, 1], M_00001_00001, aux37)
watchelement_one([2, 1], M_00003_00002, aux38)
watchelement_one([2, 1], M_00003_00001, aux39)
watchelement_one([1, 2], M_00001_00002, M_00001_00002)
watchelement_one([1, 2], M_00001_00001, M_00001_00001)
watchelement_one([1, 2], M_00003_00002, M_00003_00002)
watchelement_one([1, 2], M_00003_00001, M_00003_00001)
watchelement_one([1, 2], M_00002_00002, M_00002_00002)
watchelement_one([1, 2], M_00002_00001, M_00002_00001)
diseq(M_00001_00001,M_00001_00002)
diseq(M_00002_00001,M_00002_00002)
diseq(M_00003_00001,M_00003_00002)
watchelement_one([3, M_00002_00001, M_00002_00002, 3], aux20, 3)
watchelement_one([3, M_00002_00001, M_00002_00002, 3], aux21, 3)
watchelement_one([1, 1, 3, 2, 2], aux19, M_00001_00001)
watchelement_one([1, 1, 3, 2], aux11, M_00001_00001)
watchelement_one([3, 2, 2, 3], aux16, 3)
watchelement_one([1, 1, 3, 2], aux10, M_00001_00002)
watchelement_one([1, 1, 3, 2, 2], aux18, M_00001_00002)
watchelement_one([3, 2, 2, 3], aux17, 3)
watchelement_one([1, 1, 3, 2, 2], aux14, M_00002_00001)
watchelement_one([1, 1, 3, 2], aux7, M_00002_00001)
watchelement_one([3, 2, 2, 3], aux12, 3)
watchelement_one([1, 1, 3, 2], aux6, M_00002_00002)
watchelement_one([1, 1, 3, 2, 2], aux15, M_00002_00002)
watchelement_one([3, 2, 2, 3], aux13, 3)
watchelement_one([1, 1, 3, 2, 2], aux22, M_00003_00001)
watchelement_one([1, 1, 3, 2], aux8, M_00003_00001)
watchelement_one([3, 2, 2, 3], aux20, 3)
watchelement_one([1, 1, 3, 2], aux9, M_00003_00002)
watchelement_one([1, 1, 3, 2, 2], aux23, M_00003_00002)
watchelement_one([3, 2, 2, 3], aux21, 3)
lexleq([M_00001_00001, M_00001_00002, M_00002_00001, M_00002_00002, M_00003_00001, M_00003_00002],[aux34, aux35, aux36, aux37, aux38, aux39])
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux19, aux24)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux14, aux24)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux11, aux25)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux7, aux25)
watchelement_one([3, M_00002_00001, M_00002_00002, 3], aux16, aux26)
watchelement_one([3, M_00002_00001, M_00002_00002, 3], aux12, aux26)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux22, aux27)
watchelement_one([M_00003_00001, M_00003_00002], M_00001_00001, aux27)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux8, aux28)
watchelement_one([M_00003_00001, M_00003_00002], M_00001_00002, aux28)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux10, aux29)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux6, aux29)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux18, aux30)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux15, aux30)
watchelement_one([3, M_00002_00001, M_00002_00002, 3], aux17, aux31)
watchelement_one([3, M_00002_00001, M_00002_00002, 3], aux13, aux31)
watchelement_one([M_00003_00001, M_00003_00002], M_00002_00001, aux32)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001], aux9, aux32)
watchelement_one([M_00003_00001, M_00003_00002], M_00002_00002, aux33)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00002_00001, M_00002_00002], aux23, aux33)
weightedsumleq([1,3,1],[M_00002_00001,M_00002_00002,-3],aux6)
weightedsumgeq([1,3,1],[M_00002_00001,M_00002_00002,-3],aux6)
weightedsumleq([3,1,1],[M_00002_00001,M_00002_00002,-3],aux7)
weightedsumgeq([3,1,1],[M_00002_00001,M_00002_00002,-3],aux7)
weightedsumleq([3,1,1],[M_00003_00001,M_00003_00002,-3],aux8)
weightedsumgeq([3,1,1],[M_00003_00001,M_00003_00002,-3],aux8)
weightedsumleq([1,3,1],[M_00003_00001,M_00003_00002,-3],aux9)
weightedsumgeq([1,3,1],[M_00003_00001,M_00003_00002,-3],aux9)
weightedsumleq([1,1,3],[-3,M_00001_00001,M_00001_00002],aux10)
weightedsumgeq([1,1,3],[-3,M_00001_00001,M_00001_00002],aux10)
weightedsumleq([1,3,1],[-3,M_00001_00001,M_00001_00002],aux11)
weightedsumgeq([1,3,1],[-3,M_00001_00001,M_00001_00002],aux11)
weightedsumleq([3,1],[M_00002_00001,-2],aux12)
weightedsumgeq([3,1],[M_00002_00001,-2],aux12)
weightedsumleq([3,1],[M_00002_00002,-2],aux13)
weightedsumgeq([3,1],[M_00002_00002,-2],aux13)
weightedsumleq([4,1],[M_00002_00001,-3],aux14)
weightedsumgeq([4,1],[M_00002_00001,-3],aux14)
weightedsumleq([4,1],[M_00002_00002,-3],aux15)
weightedsumgeq([4,1],[M_00002_00002,-3],aux15)
weightedsumleq([1,3],[-2,M_00001_00001],aux16)
weightedsumgeq([1,3],[-2,M_00001_00001],aux16)
weightedsumleq([1,3],[-2,M_00001_00002],aux17)
weightedsumgeq([1,3],[-2,M_00001_00002],aux17)
weightedsumleq([1,4],[-3,M_00001_00002],aux18)
weightedsumgeq([1,4],[-3,M_00001_00002],aux18)
weightedsumleq([1,4],[-3,M_00001_00001],aux19)
weightedsumgeq([1,4],[-3,M_00001_00001],aux19)
weightedsumleq([3,1],[M_00003_00001,-2],aux20)
weightedsumgeq([3,1],[M_00003_00001,-2],aux20)
weightedsumleq([3,1],[M_00003_00002,-2],aux21)
weightedsumgeq([3,1],[M_00003_00002,-2],aux21)
weightedsumleq([4,1],[M_00003_00001,-3],aux22)
weightedsumgeq([4,1],[M_00003_00001,-3],aux22)
weightedsumleq([4,1],[M_00003_00002,-3],aux23)
weightedsumgeq([4,1],[M_00003_00002,-3],aux23)
**EOF**
