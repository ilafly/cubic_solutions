MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 158
# CSE_active_eliminated_expressions = 332
# CSE_active_total_size = 854
**VARIABLES**
DISCRETE M_00001_00001 #
{1..2}
DISCRETE M_00001_00002 #
{1..2}
DISCRETE M_00001_00003 #
{3..4}
DISCRETE M_00001_00004 #
{3..4}
DISCRETE M_00002_00001 #
{1..2}
DISCRETE M_00002_00002 #
{1..2}
DISCRETE M_00002_00003 #
{3..4}
DISCRETE M_00002_00004 #
{3..4}
DISCRETE M_00003_00001 #
{1..2}
DISCRETE M_00003_00002 #
{1..2}
DISCRETE M_00003_00003 #
{3..4}
DISCRETE M_00003_00004 #
{3..4}
DISCRETE M_00004_00001 #
{1..2}
DISCRETE M_00004_00002 #
{1..2}
DISCRETE M_00004_00003 #
{3..4}
DISCRETE M_00004_00004 #
{3..4}
DISCRETE M_00005_00001 #
{1..2}
DISCRETE M_00005_00002 #
{1..2}
DISCRETE M_00005_00003 #
{3..4}
DISCRETE M_00005_00004 #
{3..4}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], (-15 + M_00001_00002 + 5*M_00001_00003))
{1..5}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], (-15 + M_00001_00001 + 5*M_00001_00003))
{1..5}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], (5*M_00004_00002 + M_00004_00004 + -7))
{1..5}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], (5*M_00004_00002 + M_00004_00003 + -7))
{1..5}
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], (M_00004_00001 + 5*M_00004_00002 + -5))
{1..5}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], (5*M_00003_00001 + M_00003_00004 + -7))
{1..5}
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], (5*M_00003_00001 + M_00003_00003 + -7))
{1..5}
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], (6*M_00004_00002 + -5))
{1..5}
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], (5*M_00003_00001 + -4))
{1..5}
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], (5*M_00002_00004 + -14))
{1..5}
DISCRETE aux22 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00005_00003, M_00005_00004], (M_00003_00003 + -2))
{3..4}
DISCRETE aux23 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00005_00003, M_00005_00004], (M_00003_00004 + -2))
{3..4}
DISCRETE aux28 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00005_00003, M_00005_00004], (M_00004_00003 + -2))
{3..4}
DISCRETE aux29 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00005_00003, M_00005_00004], (M_00004_00004 + -2))
{3..4}
DISCRETE aux36 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00005_00001, M_00005_00002], M_00003_00001)
{1..2}
DISCRETE aux37 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00005_00001, M_00005_00002], M_00003_00002)
{1..2}
DISCRETE aux44 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00005_00001, M_00005_00002], M_00004_00002)
{1..2}
DISCRETE aux45 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00005_00001, M_00005_00002], M_00004_00001)
{1..2}
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00003 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux48, [1,2,6,7])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00004 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux49, [1,2,6,7])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux50, [2,2,6,6])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00003 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux51, [1,2,6,7])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux52, [2,2,6,6])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00003 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux53, [1,2,6,7])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00004 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux54, [1,2,6,7])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00003 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux55, [1,2,6,7])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux56, [2,2,6,6])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00003 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux57, [1,2,6,7])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00004 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux58, [1,2,6,7])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux59, [1,2,6,7])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00003 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux60, [1,2,6,7])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux61, [2,2,6,6])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00004 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux62, [1,2,6,7])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00003 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux63, [1,2,6,7])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux64, [2,2,6,6])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00004 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux65, [1,2,6,7])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux66, [1,2,6,7])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00004 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux67, [1,2,6,7])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00003 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux68, [1,2,6,7])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux69, [1,2,6,7])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00003 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux70, [1,2,6,7])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00004 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux71, [1,2,6,7])
**VARIABLES**
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00004 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux72, [1,2,6,7])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00003 + -7)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux73, [1,2,6,7])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux74, [1,2,6,7])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00004 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux75, [1,2,6,7])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00003 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux76, [1,2,6,7])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00003 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux77, [1,2,6,7])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux78, [2,2,6,6])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00004 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux79, [1,2,6,7])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux80, [1,2,6,7])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + M_00005_00003 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux81, [1,2,6,7])
**VARIABLES**
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 5*M_00005_00003 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux82, [1,2,6,7])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (-15 + M_00005_00002 + 5*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux83, [1,2,6,7])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (-15 + M_00005_00002 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux84, [1,2,6,7])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (-15 + M_00005_00001 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux85, [1,2,6,7])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (-15 + M_00005_00001 + 5*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux86, [1,2,6,7])
**VARIABLES**
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 5*M_00005_00002 + M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux87, [1,2,6,7])
**VARIABLES**
DISCRETE aux88 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 5*M_00005_00002 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux88, [1,2,6,7])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 5*M_00005_00001 + M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux89, [1,2,6,7])
**VARIABLES**
DISCRETE aux90 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 5*M_00005_00001 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux90, [1,2,6,7])
**VARIABLES**
DISCRETE aux91 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00005_00001 + 5*M_00005_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux91, [2,2,6,6])
**VARIABLES**
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 5*M_00005_00001 + M_00005_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux92, [2,2,6,6])
**VARIABLES**
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 5*M_00001_00001 + M_00001_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux93, [2,2,6,6])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 5*M_00001_00001 + M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux94, [1,2,6,7])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 5*M_00001_00001 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux95, [1,2,6,7])
**VARIABLES**
DISCRETE aux96 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00001_00001 + 5*M_00001_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux96, [2,2,6,6])
**VARIABLES**
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 5*M_00001_00002 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux97, [1,2,6,7])
**VARIABLES**
DISCRETE aux98 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 5*M_00001_00002 + M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux98, [1,2,6,7])
**VARIABLES**
DISCRETE aux99 #Active-CSE: 2 occurrences of this expression or equivalent: (-15 + M_00001_00002 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux99, [1,2,6,7])
**VARIABLES**
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: (-15 + M_00001_00001 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux100, [1,2,6,7])
**VARIABLES**
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + M_00001_00003 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux101, [1,2,6,7])
**VARIABLES**
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00004 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux102, [1,2,6,7])
**VARIABLES**
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux103, [1,2,6,7])
**VARIABLES**
DISCRETE aux104 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00004 + -15)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux104, [1,2,6,7])
**VARIABLES**
DISCRETE aux105 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 5*M_00001_00003 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux105, [1,2,6,7])
**VARIABLES**
DISCRETE aux106 #Active-CSE: 2 occurrences of this expression or equivalent: (-15 + M_00001_00001 + 5*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux106, [1,2,6,7])
**VARIABLES**
DISCRETE aux107 #Active-CSE: 2 occurrences of this expression or equivalent: (-15 + M_00001_00002 + 5*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux107, [1,2,6,7])
**VARIABLES**
DISCRETE aux108 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux108, [1,1,6,6])
**VARIABLES**
DISCRETE aux109 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux109, [1,1,7,7])
**VARIABLES**
DISCRETE aux110 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux110, [1,1,7,7])
**VARIABLES**
DISCRETE aux111 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux111, [1,1,7,7])
**VARIABLES**
DISCRETE aux112 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux112, [1,1,6,6])
**VARIABLES**
DISCRETE aux113 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux113, [1,1,6,6])
**VARIABLES**
DISCRETE aux114 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux114, [1,1,7,7])
**VARIABLES**
DISCRETE aux115 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux115, [1,1,6,6])
**VARIABLES**
DISCRETE aux116 #Active-CSE: 3 occurrences of this expression or equivalent: (-2 + M_00001_00003)
{1..2}
DISCRETE aux117 #Active-CSE: 3 occurrences of this expression or equivalent: (-2 + M_00001_00004)
{1..2}
DISCRETE aux118 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux118, [1,1,6,6])
**VARIABLES**
DISCRETE aux119 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux119, [1,1,6,6])
**VARIABLES**
DISCRETE aux120 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00001_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux120, [1,1,7,7])
**VARIABLES**
DISCRETE aux121 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00001_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux121, [1,1,7,7])
**VARIABLES**
DISCRETE aux122 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux122, [1,1,7,7])
**VARIABLES**
DISCRETE aux123 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux123, [1,1,6,6])
**VARIABLES**
DISCRETE aux124 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux124, [1,1,6,6])
**VARIABLES**
DISCRETE aux125 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux125, [1,1,7,7])
**VARIABLES**
DISCRETE aux126 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00003 + -2)
{1..2}
DISCRETE aux127 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004 + -2)
{1..2}
DISCRETE aux128 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004 + -2)
{1..2}
DISCRETE aux129 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux129, [1,1,7,7])
**VARIABLES**
DISCRETE aux130 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux130, [1,1,7,7])
**VARIABLES**
DISCRETE aux131 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00005_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux131, [1,1,6,6])
**VARIABLES**
DISCRETE aux132 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00005_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux132, [1,1,6,6])
**VARIABLES**
DISCRETE aux133 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00005_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux133, [1,1,6,6])
**VARIABLES**
DISCRETE aux134 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00005_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux134, [1,1,6,6])
**VARIABLES**
DISCRETE aux135 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux135, [1,1,7,7])
**VARIABLES**
DISCRETE aux136 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux136, [1,1,7,7])
**VARIABLES**
DISCRETE aux137 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00003 + -2)
{1..2}
DISCRETE aux138 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux138, [1,1,7,7])
**VARIABLES**
DISCRETE aux139 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux139, [1,1,7,7])
**VARIABLES**
DISCRETE aux140 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux140, [1,1,7,7])
**VARIABLES**
DISCRETE aux141 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux141, [1,1,6,6])
**VARIABLES**
DISCRETE aux142 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux142, [1,1,6,6])
**VARIABLES**
DISCRETE aux143 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux143, [1,1,6,6])
**VARIABLES**
DISCRETE aux144 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux144, [1,1,6,6])
**VARIABLES**
DISCRETE aux145 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux145, [1,1,7,7])
**VARIABLES**
DISCRETE aux146 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004 + -2)
{1..2}
DISCRETE aux147 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00003 + -2)
{1..2}
DISCRETE aux148 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux148, [1,1,7,7])
**VARIABLES**
DISCRETE aux149 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux149, [1,1,6,6])
**VARIABLES**
DISCRETE aux150 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux150, [1,1,7,7])
**VARIABLES**
DISCRETE aux151 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux151, [1,1,7,7])
**VARIABLES**
DISCRETE aux152 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux152, [1,1,7,7])
**VARIABLES**
DISCRETE aux153 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux153, [1,1,6,6])
**VARIABLES**
DISCRETE aux154 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux154, [1,1,6,6])
**VARIABLES**
DISCRETE aux155 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux155, [1,1,6,6])
**VARIABLES**
DISCRETE aux156 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + M_00005_00004)
{1..2}
DISCRETE aux157 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + M_00005_00003)
{1..2}
DISCRETE aux158 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux121) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux109)
{1..5}
DISCRETE aux159 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux56) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux93)
{1..5}
DISCRETE aux160 #ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux94) --- ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux55)
{1..5}
DISCRETE aux161 #ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux95) --- ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux54)
{1..5}
DISCRETE aux162 #ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux118) --- ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux108)
{1..5}
DISCRETE aux163 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux129) --- ElementOne([M_00005_00001, M_00005_00002], M_00001_00001)
{1..2}
DISCRETE aux164 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux92) --- ElementOne([M_00005_00001, M_00005_00002], M_00001_00002)
{1..2}
DISCRETE aux165 #ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux89) --- ElementOne([M_00005_00003, M_00005_00004], aux116)
{3..4}
DISCRETE aux166 #ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux90) --- ElementOne([M_00005_00003, M_00005_00004], aux117)
{3..4}
DISCRETE aux167 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux52) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux96)
{1..5}
DISCRETE aux168 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux120) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux110)
{1..5}
DISCRETE aux169 #ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux98) --- ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux57)
{1..5}
DISCRETE aux170 #ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux97) --- ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux58)
{1..5}
DISCRETE aux171 #ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux119) --- ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux112)
{1..5}
DISCRETE aux172 #ElementOne([M_00005_00001, M_00005_00002], M_00002_00001) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux91)
{1..2}
DISCRETE aux173 #ElementOne([M_00005_00001, M_00005_00002], M_00002_00002) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux130)
{1..2}
DISCRETE aux174 #ElementOne([M_00005_00003, M_00005_00004], aux147) --- ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux87)
{3..4}
DISCRETE aux175 #ElementOne([M_00005_00003, M_00005_00004], aux146) --- ElementOne([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux88)
{3..4}
DISCRETE aux176 #ElementOne([2, 1], M_00002_00002)
{1..2}
DISCRETE aux177 #ElementOne([2, 1], M_00002_00001)
{1..2}
DISCRETE aux178 #ElementOne([4, 3], aux146)
{3..4}
DISCRETE aux179 #ElementOne([4, 3], aux147)
{3..4}
DISCRETE aux180 #ElementOne([2, 1], M_00001_00002)
{1..2}
DISCRETE aux181 #ElementOne([2, 1], M_00001_00001)
{1..2}
DISCRETE aux182 #ElementOne([4, 3], aux117)
{3..4}
DISCRETE aux183 #ElementOne([4, 3], aux116)
{3..4}
DISCRETE aux184 #ElementOne([2, 1], M_00004_00002)
{1..2}
DISCRETE aux185 #ElementOne([2, 1], M_00004_00001)
{1..2}
DISCRETE aux186 #ElementOne([4, 3], aux127)
{3..4}
DISCRETE aux187 #ElementOne([4, 3], aux137)
{3..4}
DISCRETE aux188 #ElementOne([2, 1], M_00003_00002)
{1..2}
DISCRETE aux189 #ElementOne([2, 1], M_00003_00001)
{1..2}
DISCRETE aux190 #ElementOne([4, 3], aux128)
{3..4}
DISCRETE aux191 #ElementOne([4, 3], aux126)
{3..4}
DISCRETE aux192 #ElementOne([2, 1], M_00005_00002)
{1..2}
DISCRETE aux193 #ElementOne([2, 1], M_00005_00001)
{1..2}
DISCRETE aux194 #ElementOne([4, 3], aux156)
{3..4}
DISCRETE aux195 #ElementOne([4, 3], aux157)
{3..4}
**TUPLELIST**
rack 5 5
1 1 3 3 5 
2 2 4 4 5 
1 1 5 5 5 
2 2 5 5 5 
1 2 3 4 5 
**VARIABLES**
ALIAS rack[5,5]=[[1, 1, 3, 3, 5], [2, 2, 4, 4, 5], [1, 1, 5, 5, 5], [2, 2, 5, 5, 5], [1, 2, 3, 4, 5]]
**TUPLELIST**
perms 2 5
1 2 3 4 5 
2 1 4 3 5 
**VARIABLES**
ALIAS perms[2,5]=[[1, 2, 3, 4, 5], [2, 1, 4, 3, 5]]
**TUPLELIST**
inverses 2 5
1 2 3 4 5 
2 1 4 3 5 
**VARIABLES**
ALIAS inverses[2,5]=[[1, 2, 3, 4, 5], [2, 1, 4, 3, 5]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00002_00001],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00003_00001],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00005_00001],[M_00005_00002],[M_00005_00003],[M_00005_00004]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004]
**CONSTRAINTS**
watchelement_one([2, 1], M_00002_00002, aux176)
watchelement_one([2, 1], M_00002_00001, aux177)
watchelement_one([4, 3], aux146, aux178)
watchelement_one([4, 3], aux147, aux179)
watchelement_one([2, 1], M_00001_00002, aux180)
watchelement_one([2, 1], M_00001_00001, aux181)
watchelement_one([4, 3], aux117, aux182)
watchelement_one([4, 3], aux116, aux183)
watchelement_one([2, 1], M_00004_00002, aux184)
watchelement_one([2, 1], M_00004_00001, aux185)
watchelement_one([4, 3], aux127, aux186)
watchelement_one([4, 3], aux137, aux187)
watchelement_one([2, 1], M_00003_00002, aux188)
watchelement_one([2, 1], M_00003_00001, aux189)
watchelement_one([4, 3], aux128, aux190)
watchelement_one([4, 3], aux126, aux191)
watchelement_one([2, 1], M_00005_00002, aux192)
watchelement_one([2, 1], M_00005_00001, aux193)
watchelement_one([4, 3], aux156, aux194)
watchelement_one([4, 3], aux157, aux195)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux107, aux0)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux106, aux1)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux49, aux2)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux48, aux3)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux104, aux7)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux102, aux12)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux105, aux8)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux50, aux7)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux62, aux8)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux60, aux9)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux103, aux3)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux61, aux0)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux148, aux12)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux145, aux1)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux114, aux2)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux125, aux9)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux144, aux16)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux149, aux19)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux124, aux16)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux115, aux19)
watchelement_one([3, 4], aux116, M_00001_00003)
watchelement_one([3, 4], aux117, M_00001_00004)
watchelement_one([M_00005_00003, M_00005_00004], aux126, aux22)
watchelement_one([M_00005_00003, M_00005_00004], aux128, aux23)
watchelement_one([3, 4], aux126, M_00003_00003)
watchelement_one([3, 4], aux128, M_00003_00004)
watchelement_one([3, 4], aux146, M_00002_00004)
watchelement_one([3, 4], aux147, M_00002_00003)
watchelement_one([M_00005_00003, M_00005_00004], aux137, aux28)
watchelement_one([M_00005_00003, M_00005_00004], aux127, aux29)
watchelement_one([3, 4], aux156, M_00005_00004)
watchelement_one([3, 4], aux157, M_00005_00003)
watchelement_one([3, 4], aux127, M_00004_00004)
watchelement_one([3, 4], aux137, M_00004_00003)
watchelement_one([1, 2], M_00001_00002, M_00001_00002)
watchelement_one([1, 2], M_00001_00001, M_00001_00001)
watchelement_one([M_00005_00001, M_00005_00002], M_00003_00001, aux36)
watchelement_one([M_00005_00001, M_00005_00002], M_00003_00002, aux37)
watchelement_one([1, 2], M_00003_00002, M_00003_00002)
watchelement_one([1, 2], M_00003_00001, M_00003_00001)
watchelement_one([1, 2], M_00002_00002, M_00002_00002)
watchelement_one([1, 2], M_00002_00001, M_00002_00001)
watchelement_one([1, 2], M_00005_00002, M_00005_00002)
watchelement_one([1, 2], M_00005_00001, M_00005_00001)
watchelement_one([M_00005_00001, M_00005_00002], M_00004_00002, aux44)
watchelement_one([M_00005_00001, M_00005_00002], M_00004_00001, aux45)
watchelement_one([1, 2], M_00004_00001, M_00004_00001)
watchelement_one([1, 2], M_00004_00002, M_00004_00002)
gacalldiff([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004])
gacalldiff([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004])
gacalldiff([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004])
gacalldiff([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004])
gacalldiff([M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004])
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux150, aux1)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux64, aux0)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux63, aux9)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux65, aux8)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux153, aux16)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux131, 5)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux78, aux7)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux140, aux12)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux73, aux3)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux72, aux2)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux142, aux19)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux132, 5)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux51, aux1)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux53, aux0)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux111, aux9)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux59, aux8)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux113, aux16)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux77, aux36)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux76, aux37)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux138, aux22)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux74, aux23)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux141, 5)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux70, aux36)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux68, aux37)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux151, aux22)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux66, aux23)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux154, 5)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux86, aux36)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux83, aux37)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux135, aux22)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux82, aux23)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux134, 5)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux100, aux7)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux99, aux12)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux101, aux3)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux122, aux2)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux123, aux19)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux79, aux45)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux75, aux44)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux80, aux28)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux139, aux29)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux143, 5)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux71, aux45)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux67, aux44)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux69, aux28)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux152, aux29)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux155, 5)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux85, aux45)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002], aux84, aux44)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux81, aux28)
watchelement_one([M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux136, aux29)
watchelement_one([5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux133, 5)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux121, M_00001_00001)
watchelement_one([1, 1, 3, 3, 5, 2], aux93, M_00001_00001)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux94, M_00001_00003)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux95, M_00001_00003)
watchelement_one([5, 2, 2, 4, 4, 5], aux118, 5)
watchelement_one([1, 1, 3, 3, 5, 2], aux96, M_00001_00002)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux120, M_00001_00002)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux98, M_00001_00004)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux97, M_00001_00004)
watchelement_one([5, 2, 2, 4, 4, 5], aux119, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux106, M_00001_00001)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux107, M_00001_00001)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux125, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux105, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux124, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux100, M_00001_00002)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux99, M_00001_00002)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux101, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux122, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux123, 5)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux109, M_00002_00001)
watchelement_one([1, 1, 3, 3, 5, 2], aux56, M_00002_00001)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux55, M_00002_00003)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux54, M_00002_00003)
watchelement_one([5, 2, 2, 4, 4, 5], aux108, 5)
watchelement_one([1, 1, 3, 3, 5, 2], aux52, M_00002_00002)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux110, M_00002_00002)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux57, M_00002_00004)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux58, M_00002_00004)
watchelement_one([5, 2, 2, 4, 4, 5], aux112, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux51, M_00002_00001)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux53, M_00002_00001)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux111, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux59, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux113, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux104, M_00002_00002)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux102, M_00002_00002)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux103, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux114, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux115, 5)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux145, M_00003_00001)
watchelement_one([1, 1, 3, 3, 5, 2], aux61, M_00003_00001)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux60, M_00003_00003)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux62, M_00003_00003)
watchelement_one([5, 2, 2, 4, 4, 5], aux144, 5)
watchelement_one([1, 1, 3, 3, 5, 2], aux78, M_00003_00002)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux140, M_00003_00002)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux73, M_00003_00004)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux72, M_00003_00004)
watchelement_one([5, 2, 2, 4, 4, 5], aux142, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux77, M_00003_00001)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux76, M_00003_00001)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux138, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux74, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux141, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux79, M_00003_00002)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux75, M_00003_00002)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux80, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux139, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux143, 5)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux150, M_00004_00001)
watchelement_one([1, 1, 3, 3, 5, 2], aux64, M_00004_00001)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux63, M_00004_00003)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux65, M_00004_00003)
watchelement_one([5, 2, 2, 4, 4, 5], aux153, 5)
watchelement_one([1, 1, 3, 3, 5, 2], aux50, M_00004_00002)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux148, M_00004_00002)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux48, M_00004_00004)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux49, M_00004_00004)
watchelement_one([5, 2, 2, 4, 4, 5], aux149, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux70, M_00004_00001)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux68, M_00004_00001)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux151, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux66, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux154, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux71, M_00004_00002)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux67, M_00004_00002)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux69, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux152, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux155, 5)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux129, M_00005_00001)
watchelement_one([1, 1, 3, 3, 5, 2], aux92, M_00005_00001)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux89, M_00005_00003)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux90, M_00005_00003)
watchelement_one([5, 2, 2, 4, 4, 5], aux131, 5)
watchelement_one([1, 1, 3, 3, 5, 2], aux91, M_00005_00002)
watchelement_one([1, 1, 3, 3, 5, 2, 2], aux130, M_00005_00002)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux87, M_00005_00004)
watchelement_one([3, 3, 5, 2, 2, 4, 4], aux88, M_00005_00004)
watchelement_one([5, 2, 2, 4, 4, 5], aux132, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux86, M_00005_00001)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux83, M_00005_00001)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux135, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux82, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux134, 5)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux85, M_00005_00002)
watchelement_one([1, 1, 5, 5, 5, 2, 2], aux84, M_00005_00002)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux81, 5)
watchelement_one([5, 5, 5, 2, 2, 5, 5], aux136, 5)
watchelement_one([5, 2, 2, 5, 5, 5], aux133, 5)
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004],[aux176, aux177, aux178, aux179, aux180, aux181, aux182, aux183, aux184, aux185, aux186, aux187, aux188, aux189, aux190, aux191, aux192, aux193, aux194, aux195])
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux121, aux158)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux109, aux158)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux56, aux159)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux93, aux159)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux94, aux160)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux55, aux160)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux95, aux161)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux54, aux161)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux118, aux162)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux108, aux162)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux129, aux163)
watchelement_one([M_00005_00001, M_00005_00002], M_00001_00001, aux163)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux92, aux164)
watchelement_one([M_00005_00001, M_00005_00002], M_00001_00002, aux164)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux89, aux165)
watchelement_one([M_00005_00003, M_00005_00004], aux116, aux165)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux90, aux166)
watchelement_one([M_00005_00003, M_00005_00004], aux117, aux166)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux52, aux167)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux96, aux167)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux120, aux168)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux110, aux168)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux98, aux169)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux57, aux169)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux97, aux170)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux58, aux170)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux119, aux171)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5], aux112, aux171)
watchelement_one([M_00005_00001, M_00005_00002], M_00002_00001, aux172)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001], aux91, aux172)
watchelement_one([M_00005_00001, M_00005_00002], M_00002_00002, aux173)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002], aux130, aux173)
watchelement_one([M_00005_00003, M_00005_00004], aux147, aux174)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux87, aux174)
watchelement_one([M_00005_00003, M_00005_00004], aux146, aux175)
watchelement_one([M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux88, aux175)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-7],aux48)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-7],aux48)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00004,-7],aux49)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00004,-7],aux49)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00002,-5],aux50)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00002,-5],aux50)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00003,-15],aux51)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00003,-15],aux51)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00002,-5],aux52)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00002,-5],aux52)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00003,-15],aux53)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00003,-15],aux53)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00004,-7],aux54)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00004,-7],aux54)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00003,-7],aux55)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00003,-7],aux55)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00002,-5],aux56)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00002,-5],aux56)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00003,-7],aux57)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00003,-7],aux57)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00004,-7],aux58)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00004,-7],aux58)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-17],aux59)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-17],aux59)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00003,-7],aux60)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00003,-7],aux60)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00002,-5],aux61)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00002,-5],aux61)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00004,-7],aux62)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00004,-7],aux62)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00003,-7],aux63)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00003,-7],aux63)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00002,-5],aux64)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00002,-5],aux64)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00004,-7],aux65)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00004,-7],aux65)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00004,-17],aux66)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00004,-17],aux66)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00004,-15],aux67)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00004,-15],aux67)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-15],aux68)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-15],aux68)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00004,-17],aux69)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00004,-17],aux69)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00003,-15],aux70)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00003,-15],aux70)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00004,-15],aux71)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00004,-15],aux71)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-7],aux72)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-7],aux72)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00003,-7],aux73)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00003,-7],aux73)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00004,-17],aux74)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00004,-17],aux74)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-15],aux75)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-15],aux75)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00003,-15],aux76)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00003,-15],aux76)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00003,-15],aux77)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00003,-15],aux77)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00002,-5],aux78)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00002,-5],aux78)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00004,-15],aux79)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00004,-15],aux79)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00004,-17],aux80)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00004,-17],aux80)
weightedsumleq([1,1,5],[-17,M_00005_00003,M_00005_00004],aux81)
weightedsumgeq([1,1,5],[-17,M_00005_00003,M_00005_00004],aux81)
weightedsumleq([1,5,1],[-17,M_00005_00003,M_00005_00004],aux82)
weightedsumgeq([1,5,1],[-17,M_00005_00003,M_00005_00004],aux82)
weightedsumleq([1,1,5],[-15,M_00005_00002,M_00005_00003],aux83)
weightedsumgeq([1,1,5],[-15,M_00005_00002,M_00005_00003],aux83)
weightedsumleq([1,1,5],[-15,M_00005_00002,M_00005_00004],aux84)
weightedsumgeq([1,1,5],[-15,M_00005_00002,M_00005_00004],aux84)
weightedsumleq([1,1,5],[-15,M_00005_00001,M_00005_00004],aux85)
weightedsumgeq([1,1,5],[-15,M_00005_00001,M_00005_00004],aux85)
weightedsumleq([1,1,5],[-15,M_00005_00001,M_00005_00003],aux86)
weightedsumgeq([1,1,5],[-15,M_00005_00001,M_00005_00003],aux86)
weightedsumleq([1,5,1],[-7,M_00005_00002,M_00005_00003],aux87)
weightedsumgeq([1,5,1],[-7,M_00005_00002,M_00005_00003],aux87)
weightedsumleq([1,5,1],[-7,M_00005_00002,M_00005_00004],aux88)
weightedsumgeq([1,5,1],[-7,M_00005_00002,M_00005_00004],aux88)
weightedsumleq([1,5,1],[-7,M_00005_00001,M_00005_00003],aux89)
weightedsumgeq([1,5,1],[-7,M_00005_00001,M_00005_00003],aux89)
weightedsumleq([1,5,1],[-7,M_00005_00001,M_00005_00004],aux90)
weightedsumgeq([1,5,1],[-7,M_00005_00001,M_00005_00004],aux90)
weightedsumleq([1,1,5],[-5,M_00005_00001,M_00005_00002],aux91)
weightedsumgeq([1,1,5],[-5,M_00005_00001,M_00005_00002],aux91)
weightedsumleq([1,5,1],[-5,M_00005_00001,M_00005_00002],aux92)
weightedsumgeq([1,5,1],[-5,M_00005_00001,M_00005_00002],aux92)
weightedsumleq([1,5,1],[-5,M_00001_00001,M_00001_00002],aux93)
weightedsumgeq([1,5,1],[-5,M_00001_00001,M_00001_00002],aux93)
weightedsumleq([1,5,1],[-7,M_00001_00001,M_00001_00003],aux94)
weightedsumgeq([1,5,1],[-7,M_00001_00001,M_00001_00003],aux94)
weightedsumleq([1,5,1],[-7,M_00001_00001,M_00001_00004],aux95)
weightedsumgeq([1,5,1],[-7,M_00001_00001,M_00001_00004],aux95)
weightedsumleq([1,1,5],[-5,M_00001_00001,M_00001_00002],aux96)
weightedsumgeq([1,1,5],[-5,M_00001_00001,M_00001_00002],aux96)
weightedsumleq([1,5,1],[-7,M_00001_00002,M_00001_00004],aux97)
weightedsumgeq([1,5,1],[-7,M_00001_00002,M_00001_00004],aux97)
weightedsumleq([1,5,1],[-7,M_00001_00002,M_00001_00003],aux98)
weightedsumgeq([1,5,1],[-7,M_00001_00002,M_00001_00003],aux98)
weightedsumleq([1,1,5],[-15,M_00001_00002,M_00001_00004],aux99)
weightedsumgeq([1,1,5],[-15,M_00001_00002,M_00001_00004],aux99)
weightedsumleq([1,1,5],[-15,M_00001_00001,M_00001_00004],aux100)
weightedsumgeq([1,1,5],[-15,M_00001_00001,M_00001_00004],aux100)
weightedsumleq([1,1,5],[-17,M_00001_00003,M_00001_00004],aux101)
weightedsumgeq([1,1,5],[-17,M_00001_00003,M_00001_00004],aux101)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00004,-15],aux102)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00004,-15],aux102)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-17],aux103)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-17],aux103)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00004,-15],aux104)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00004,-15],aux104)
weightedsumleq([1,5,1],[-17,M_00001_00003,M_00001_00004],aux105)
weightedsumgeq([1,5,1],[-17,M_00001_00003,M_00001_00004],aux105)
weightedsumleq([1,1,5],[-15,M_00001_00001,M_00001_00003],aux106)
weightedsumgeq([1,1,5],[-15,M_00001_00001,M_00001_00003],aux106)
weightedsumleq([1,1,5],[-15,M_00001_00002,M_00001_00003],aux107)
weightedsumgeq([1,1,5],[-15,M_00001_00002,M_00001_00003],aux107)
weightedsumleq([5,1],[M_00002_00001,-4],aux108)
weightedsumgeq([5,1],[M_00002_00001,-4],aux108)
weightedsumleq([6,1],[M_00002_00001,-5],aux109)
weightedsumgeq([6,1],[M_00002_00001,-5],aux109)
weightedsumleq([6,1],[M_00002_00002,-5],aux110)
weightedsumgeq([6,1],[M_00002_00002,-5],aux110)
weightedsumleq([6,1],[M_00002_00003,-17],aux111)
weightedsumgeq([6,1],[M_00002_00003,-17],aux111)
weightedsumleq([5,1],[M_00002_00002,-4],aux112)
weightedsumgeq([5,1],[M_00002_00002,-4],aux112)
weightedsumleq([5,1],[M_00002_00003,-14],aux113)
weightedsumgeq([5,1],[M_00002_00003,-14],aux113)
weightedsumleq([6,1],[M_00002_00004,-17],aux114)
weightedsumgeq([6,1],[M_00002_00004,-17],aux114)
weightedsumleq([5,1],[M_00002_00004,-14],aux115)
weightedsumgeq([5,1],[M_00002_00004,-14],aux115)
sumleq([-2,M_00001_00003],aux116)
sumgeq([-2,M_00001_00003],aux116)
sumleq([-2,M_00001_00004],aux117)
sumgeq([-2,M_00001_00004],aux117)
weightedsumleq([1,5],[-4,M_00001_00001],aux118)
weightedsumgeq([1,5],[-4,M_00001_00001],aux118)
weightedsumleq([1,5],[-4,M_00001_00002],aux119)
weightedsumgeq([1,5],[-4,M_00001_00002],aux119)
weightedsumleq([1,6],[-5,M_00001_00002],aux120)
weightedsumgeq([1,6],[-5,M_00001_00002],aux120)
weightedsumleq([1,6],[-5,M_00001_00001],aux121)
weightedsumgeq([1,6],[-5,M_00001_00001],aux121)
weightedsumleq([1,6],[-17,M_00001_00004],aux122)
weightedsumgeq([1,6],[-17,M_00001_00004],aux122)
weightedsumleq([1,5],[-14,M_00001_00004],aux123)
weightedsumgeq([1,5],[-14,M_00001_00004],aux123)
weightedsumleq([1,5],[-14,M_00001_00003],aux124)
weightedsumgeq([1,5],[-14,M_00001_00003],aux124)
weightedsumleq([1,6],[-17,M_00001_00003],aux125)
weightedsumgeq([1,6],[-17,M_00001_00003],aux125)
sumleq([M_00003_00003,-2],aux126)
sumgeq([M_00003_00003,-2],aux126)
sumleq([M_00004_00004,-2],aux127)
sumgeq([M_00004_00004,-2],aux127)
sumleq([M_00003_00004,-2],aux128)
sumgeq([M_00003_00004,-2],aux128)
weightedsumleq([1,6],[-5,M_00005_00001],aux129)
weightedsumgeq([1,6],[-5,M_00005_00001],aux129)
weightedsumleq([1,6],[-5,M_00005_00002],aux130)
weightedsumgeq([1,6],[-5,M_00005_00002],aux130)
weightedsumleq([1,5],[-4,M_00005_00001],aux131)
weightedsumgeq([1,5],[-4,M_00005_00001],aux131)
weightedsumleq([1,5],[-4,M_00005_00002],aux132)
weightedsumgeq([1,5],[-4,M_00005_00002],aux132)
weightedsumleq([1,5],[-14,M_00005_00004],aux133)
weightedsumgeq([1,5],[-14,M_00005_00004],aux133)
weightedsumleq([1,5],[-14,M_00005_00003],aux134)
weightedsumgeq([1,5],[-14,M_00005_00003],aux134)
weightedsumleq([1,6],[-17,M_00005_00003],aux135)
weightedsumgeq([1,6],[-17,M_00005_00003],aux135)
weightedsumleq([1,6],[-17,M_00005_00004],aux136)
weightedsumgeq([1,6],[-17,M_00005_00004],aux136)
sumleq([M_00004_00003,-2],aux137)
sumgeq([M_00004_00003,-2],aux137)
weightedsumleq([6,1],[M_00003_00003,-17],aux138)
weightedsumgeq([6,1],[M_00003_00003,-17],aux138)
weightedsumleq([6,1],[M_00003_00004,-17],aux139)
weightedsumgeq([6,1],[M_00003_00004,-17],aux139)
weightedsumleq([6,1],[M_00003_00002,-5],aux140)
weightedsumgeq([6,1],[M_00003_00002,-5],aux140)
weightedsumleq([5,1],[M_00003_00003,-14],aux141)
weightedsumgeq([5,1],[M_00003_00003,-14],aux141)
weightedsumleq([5,1],[M_00003_00002,-4],aux142)
weightedsumgeq([5,1],[M_00003_00002,-4],aux142)
weightedsumleq([5,1],[M_00003_00004,-14],aux143)
weightedsumgeq([5,1],[M_00003_00004,-14],aux143)
weightedsumleq([5,1],[M_00003_00001,-4],aux144)
weightedsumgeq([5,1],[M_00003_00001,-4],aux144)
weightedsumleq([6,1],[M_00003_00001,-5],aux145)
weightedsumgeq([6,1],[M_00003_00001,-5],aux145)
sumleq([M_00002_00004,-2],aux146)
sumgeq([M_00002_00004,-2],aux146)
sumleq([M_00002_00003,-2],aux147)
sumgeq([M_00002_00003,-2],aux147)
weightedsumleq([6,1],[M_00004_00002,-5],aux148)
weightedsumgeq([6,1],[M_00004_00002,-5],aux148)
weightedsumleq([5,1],[M_00004_00002,-4],aux149)
weightedsumgeq([5,1],[M_00004_00002,-4],aux149)
weightedsumleq([6,1],[M_00004_00001,-5],aux150)
weightedsumgeq([6,1],[M_00004_00001,-5],aux150)
weightedsumleq([6,1],[M_00004_00003,-17],aux151)
weightedsumgeq([6,1],[M_00004_00003,-17],aux151)
weightedsumleq([6,1],[M_00004_00004,-17],aux152)
weightedsumgeq([6,1],[M_00004_00004,-17],aux152)
weightedsumleq([5,1],[M_00004_00001,-4],aux153)
weightedsumgeq([5,1],[M_00004_00001,-4],aux153)
weightedsumleq([5,1],[M_00004_00003,-14],aux154)
weightedsumgeq([5,1],[M_00004_00003,-14],aux154)
weightedsumleq([5,1],[M_00004_00004,-14],aux155)
weightedsumgeq([5,1],[M_00004_00004,-14],aux155)
sumleq([-2,M_00005_00004],aux156)
sumgeq([-2,M_00005_00004],aux156)
sumleq([-2,M_00005_00003],aux157)
sumgeq([-2,M_00005_00003],aux157)
**EOF**
