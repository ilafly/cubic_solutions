MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 42
# CSE_active_eliminated_expressions = 124
# CSE_active_total_size = 172
**VARIABLES**
DISCRETE M_00001_00001 #
{1..2}
DISCRETE M_00001_00002 #
{1..2}
DISCRETE M_00002_00001 #
{1..2}
DISCRETE M_00002_00002 #
{1..2}
DISCRETE M_00003_00001 #
{1..2}
DISCRETE M_00003_00002 #
{1..2}
DISCRETE M_00004_00001 #
{1..2}
DISCRETE M_00004_00002 #
{1..2}
DISCRETE M_00005_00001 #
{1..2}
DISCRETE M_00005_00002 #
{1..2}
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002], M_00004_00002)
{1..2}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002], M_00004_00001)
{1..2}
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux12, [2,2,6,6])
**VARIABLES**
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux13, [2,2,6,6])
**VARIABLES**
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux14, [2,2,6,6])
**VARIABLES**
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux15, [2,2,6,6])
**VARIABLES**
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux16, [2,2,6,6])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux17, [2,2,6,6])
**VARIABLES**
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00005_00001 + 5*M_00005_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux18, [2,2,6,6])
**VARIABLES**
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 5*M_00005_00001 + M_00005_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux19, [2,2,6,6])
**VARIABLES**
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 5*M_00001_00001 + M_00001_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux20, [2,2,6,6])
**VARIABLES**
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00001_00001 + 5*M_00001_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux21, [2,2,6,6])
**VARIABLES**
DISCRETE aux22 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00004_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux22, [1,1,6,6])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux23, [1,1,7,7])
**VARIABLES**
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux24, [1,1,7,7])
**VARIABLES**
DISCRETE aux25 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00002_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux25, [1,1,6,6])
**VARIABLES**
DISCRETE aux26 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00003_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux26, [1,1,6,6])
**VARIABLES**
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00001_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux27, [1,1,7,7])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00001_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux28, [1,1,7,7])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux29, [1,1,7,7])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux30, [1,1,7,7])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux31, [1,1,7,7])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux32, [1,1,7,7])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00004_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux33, [1,1,6,6])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00002_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux34, [1,1,6,6])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 6 occurrences of this expression or equivalent: (-4 + 5*M_00001_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux35, [1,1,6,6])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 6 occurrences of this expression or equivalent: (-4 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux36, [1,1,6,6])
**VARIABLES**
DISCRETE aux37 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00003_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux37, [1,1,6,6])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux38, [1,1,7,7])
**VARIABLES**
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux39, [1,1,7,7])
**VARIABLES**
DISCRETE aux40 #Active-CSE: 6 occurrences of this expression or equivalent: (-4 + 5*M_00005_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux40, [1,1,6,6])
**VARIABLES**
DISCRETE aux41 #Active-CSE: 6 occurrences of this expression or equivalent: (-4 + 5*M_00005_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux41, [1,1,6,6])
**VARIABLES**
DISCRETE aux42 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux28) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux23)
{1..5}
DISCRETE aux43 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux20) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux13)
{1..5}
DISCRETE aux44 #ElementOne([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux34) --- ElementOne([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux35)
{1..5}
DISCRETE aux45 #ElementOne([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux35) --- ElementOne([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux34)
{1..5}
DISCRETE aux46 #ElementOne([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux35) --- ElementOne([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux34)
{1..5}
DISCRETE aux47 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux31) --- ElementOne([M_00003_00001, M_00003_00002], M_00001_00001)
{1..2}
DISCRETE aux48 #ElementOne([M_00003_00001, M_00003_00002], M_00001_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux16)
{1..2}
DISCRETE aux49 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux38) --- ElementOne([M_00004_00001, M_00004_00002], M_00001_00001)
{1..2}
DISCRETE aux50 #ElementOne([M_00004_00001, M_00004_00002], M_00001_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux14)
{1..2}
DISCRETE aux51 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux29) --- ElementOne([M_00005_00001, M_00005_00002], M_00001_00001)
{1..2}
DISCRETE aux52 #ElementOne([M_00005_00001, M_00005_00002], M_00001_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux19)
{1..2}
DISCRETE aux53 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux21) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux12)
{1..5}
DISCRETE aux54 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux27) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux24)
{1..5}
DISCRETE aux55 #ElementOne([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux25) --- ElementOne([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux36)
{1..5}
DISCRETE aux56 #ElementOne([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux36) --- ElementOne([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux25)
{1..5}
DISCRETE aux57 #ElementOne([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux36) --- ElementOne([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux25)
{1..5}
DISCRETE aux58 #ElementOne([M_00003_00001, M_00003_00002], M_00002_00001) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux17)
{1..2}
DISCRETE aux59 #ElementOne([M_00003_00001, M_00003_00002], M_00002_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux32)
{1..2}
DISCRETE aux60 #ElementOne([M_00004_00001, M_00004_00002], M_00002_00001) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux15)
{1..2}
DISCRETE aux61 #ElementOne([M_00004_00001, M_00004_00002], M_00002_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux39)
{1..2}
DISCRETE aux62 #ElementOne([M_00005_00001, M_00005_00002], M_00002_00001) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux18)
{1..2}
DISCRETE aux63 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux30) --- ElementOne([M_00005_00001, M_00005_00002], M_00002_00002)
{1..2}
DISCRETE aux64 #ElementOne([M_00005_00001, M_00005_00002], M_00003_00001) --- ElementOne([M_00003_00001, M_00003_00002], M_00005_00001)
{1..2}
DISCRETE aux65 #ElementOne([M_00005_00001, M_00005_00002], M_00003_00002) --- ElementOne([M_00003_00001, M_00003_00002], M_00005_00002)
{1..2}
DISCRETE aux66 #ElementOne([M_00005_00001, M_00005_00002], M_00004_00001) --- ElementOne([M_00004_00001, M_00004_00002], M_00005_00001)
{1..2}
DISCRETE aux67 #ElementOne([M_00005_00001, M_00005_00002], M_00004_00002) --- ElementOne([M_00004_00001, M_00004_00002], M_00005_00002)
{1..2}
DISCRETE aux68 #ElementOne([2, 1], M_00002_00002)
{1..2}
DISCRETE aux69 #ElementOne([2, 1], M_00002_00001)
{1..2}
DISCRETE aux70 #ElementOne([2, 1], M_00001_00002)
{1..2}
DISCRETE aux71 #ElementOne([2, 1], M_00001_00001)
{1..2}
DISCRETE aux72 #ElementOne([2, 1], M_00003_00002)
{1..2}
DISCRETE aux73 #ElementOne([2, 1], M_00003_00001)
{1..2}
DISCRETE aux74 #ElementOne([2, 1], M_00004_00002)
{1..2}
DISCRETE aux75 #ElementOne([2, 1], M_00004_00001)
{1..2}
DISCRETE aux76 #ElementOne([2, 1], M_00005_00002)
{1..2}
DISCRETE aux77 #ElementOne([2, 1], M_00005_00001)
{1..2}
**TUPLELIST**
rack 5 5
1 1 3 4 5 
2 2 3 4 5 
1 2 3 4 5 
1 2 3 3 5 
1 2 3 4 5 
**VARIABLES**
ALIAS rack[5,5]=[[1, 1, 3, 4, 5], [2, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 3, 5], [1, 2, 3, 4, 5]]
**TUPLELIST**
perms 2 5
1 2 3 4 5 
2 1 3 4 5 
**VARIABLES**
ALIAS perms[2,5]=[[1, 2, 3, 4, 5], [2, 1, 3, 4, 5]]
**TUPLELIST**
inverses 2 5
1 2 3 4 5 
2 1 3 4 5 
**VARIABLES**
ALIAS inverses[2,5]=[[1, 2, 3, 4, 5], [2, 1, 3, 4, 5]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00002_00001],[M_00002_00002],[M_00003_00001],[M_00003_00002],[M_00004_00001],[M_00004_00002],[M_00005_00001],[M_00005_00002]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00002_00001, M_00002_00002, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002, M_00005_00001, M_00005_00002]
**CONSTRAINTS**
watchelement_one([2, 1], M_00002_00002, aux68)
watchelement_one([2, 1], M_00002_00001, aux69)
watchelement_one([2, 1], M_00001_00002, aux70)
watchelement_one([2, 1], M_00001_00001, aux71)
watchelement_one([2, 1], M_00003_00002, aux72)
watchelement_one([2, 1], M_00003_00001, aux73)
watchelement_one([2, 1], M_00004_00002, aux74)
watchelement_one([2, 1], M_00004_00001, aux75)
watchelement_one([2, 1], M_00005_00002, aux76)
watchelement_one([2, 1], M_00005_00001, aux77)
watchelement_one([1, 2], M_00001_00002, M_00001_00002)
watchelement_one([1, 2], M_00001_00001, M_00001_00001)
watchelement_one([1, 2], M_00003_00002, M_00003_00002)
watchelement_one([1, 2], M_00003_00001, M_00003_00001)
watchelement_one([M_00003_00001, M_00003_00002], M_00004_00002, aux4)
watchelement_one([M_00003_00001, M_00003_00002], M_00004_00001, aux5)
watchelement_one([1, 2], M_00002_00002, M_00002_00002)
watchelement_one([1, 2], M_00002_00001, M_00002_00001)
watchelement_one([1, 2], M_00005_00002, M_00005_00002)
watchelement_one([1, 2], M_00005_00001, M_00005_00001)
watchelement_one([1, 2], M_00004_00001, M_00004_00001)
watchelement_one([1, 2], M_00004_00002, M_00004_00002)
diseq(M_00001_00001,M_00001_00002)
diseq(M_00002_00001,M_00002_00002)
diseq(M_00003_00001,M_00003_00002)
diseq(M_00004_00001,M_00004_00002)
diseq(M_00005_00001,M_00005_00002)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux37, 3)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux37, 4)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux37, 5)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux22, 3)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux22, 4)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux22, 5)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux40, 3)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux40, 4)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux40, 5)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux26, 3)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux26, 4)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux26, 5)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux33, 3)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux33, 4)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux33, 5)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux41, 3)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux41, 4)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux41, 5)
watchelement_one([M_00004_00001, M_00004_00002], M_00003_00001, aux5)
watchelement_one([M_00004_00001, M_00004_00002], M_00003_00002, aux4)
watchelement_one([M_00004_00001, M_00004_00002], M_00004_00001, aux5)
watchelement_one([M_00004_00001, M_00004_00002], M_00004_00002, aux4)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux28, M_00001_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux20, M_00001_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux35, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux35, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux35, 5)
watchelement_one([1, 1, 3, 4, 5, 2], aux21, M_00001_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux27, M_00001_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux36, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux36, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux36, 5)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux23, M_00002_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux13, M_00002_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux34, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux34, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux34, 5)
watchelement_one([1, 1, 3, 4, 5, 2], aux12, M_00002_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux24, M_00002_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux25, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux25, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux25, 5)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux31, M_00003_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux16, M_00003_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux37, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux37, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux37, 5)
watchelement_one([1, 1, 3, 4, 5, 2], aux17, M_00003_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux32, M_00003_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux26, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux26, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux26, 5)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux38, M_00004_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux14, M_00004_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux22, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux22, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux22, 5)
watchelement_one([1, 1, 3, 4, 5, 2], aux15, M_00004_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux39, M_00004_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux33, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux33, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux33, 5)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux29, M_00005_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux19, M_00005_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux40, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux40, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux40, 5)
watchelement_one([1, 1, 3, 4, 5, 2], aux18, M_00005_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux30, M_00005_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux41, 3)
watchelement_one([4, 5, 2, 2, 3, 4], aux41, 4)
watchelement_one([5, 2, 2, 3, 4, 5], aux41, 5)
lexleq([M_00001_00001, M_00001_00002, M_00002_00001, M_00002_00002, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002, M_00005_00001, M_00005_00002],[aux68, aux69, aux70, aux71, aux72, aux73, aux74, aux75, aux76, aux77])
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux28, aux42)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux23, aux42)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux20, aux43)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux13, aux43)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux34, aux44)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux35, aux44)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux35, aux45)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux34, aux45)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux35, aux46)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux34, aux46)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux31, aux47)
watchelement_one([M_00003_00001, M_00003_00002], M_00001_00001, aux47)
watchelement_one([M_00003_00001, M_00003_00002], M_00001_00002, aux48)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux16, aux48)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux38, aux49)
watchelement_one([M_00004_00001, M_00004_00002], M_00001_00001, aux49)
watchelement_one([M_00004_00001, M_00004_00002], M_00001_00002, aux50)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux14, aux50)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux29, aux51)
watchelement_one([M_00005_00001, M_00005_00002], M_00001_00001, aux51)
watchelement_one([M_00005_00001, M_00005_00002], M_00001_00002, aux52)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux19, aux52)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux21, aux53)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux12, aux53)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux27, aux54)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux24, aux54)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux25, aux55)
watchelement_one([3, 4, 5, M_00002_00001, M_00002_00002, 3], aux36, aux55)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux36, aux56)
watchelement_one([4, 5, M_00002_00001, M_00002_00002, 3, 4], aux25, aux56)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux36, aux57)
watchelement_one([5, M_00002_00001, M_00002_00002, 3, 4, 5], aux25, aux57)
watchelement_one([M_00003_00001, M_00003_00002], M_00002_00001, aux58)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux17, aux58)
watchelement_one([M_00003_00001, M_00003_00002], M_00002_00002, aux59)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux32, aux59)
watchelement_one([M_00004_00001, M_00004_00002], M_00002_00001, aux60)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux15, aux60)
watchelement_one([M_00004_00001, M_00004_00002], M_00002_00002, aux61)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux39, aux61)
watchelement_one([M_00005_00001, M_00005_00002], M_00002_00001, aux62)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001], aux18, aux62)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, 5, M_00002_00001, M_00002_00002], aux30, aux63)
watchelement_one([M_00005_00001, M_00005_00002], M_00002_00002, aux63)
watchelement_one([M_00005_00001, M_00005_00002], M_00003_00001, aux64)
watchelement_one([M_00003_00001, M_00003_00002], M_00005_00001, aux64)
watchelement_one([M_00005_00001, M_00005_00002], M_00003_00002, aux65)
watchelement_one([M_00003_00001, M_00003_00002], M_00005_00002, aux65)
watchelement_one([M_00005_00001, M_00005_00002], M_00004_00001, aux66)
watchelement_one([M_00004_00001, M_00004_00002], M_00005_00001, aux66)
watchelement_one([M_00005_00001, M_00005_00002], M_00004_00002, aux67)
watchelement_one([M_00004_00001, M_00004_00002], M_00005_00002, aux67)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00002,-5],aux12)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00002,-5],aux12)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00002,-5],aux13)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00002,-5],aux13)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00002,-5],aux14)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00002,-5],aux14)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00002,-5],aux15)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00002,-5],aux15)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00002,-5],aux16)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00002,-5],aux16)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00002,-5],aux17)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00002,-5],aux17)
weightedsumleq([1,1,5],[-5,M_00005_00001,M_00005_00002],aux18)
weightedsumgeq([1,1,5],[-5,M_00005_00001,M_00005_00002],aux18)
weightedsumleq([1,5,1],[-5,M_00005_00001,M_00005_00002],aux19)
weightedsumgeq([1,5,1],[-5,M_00005_00001,M_00005_00002],aux19)
weightedsumleq([1,5,1],[-5,M_00001_00001,M_00001_00002],aux20)
weightedsumgeq([1,5,1],[-5,M_00001_00001,M_00001_00002],aux20)
weightedsumleq([1,1,5],[-5,M_00001_00001,M_00001_00002],aux21)
weightedsumgeq([1,1,5],[-5,M_00001_00001,M_00001_00002],aux21)
weightedsumleq([5,1],[M_00004_00001,-4],aux22)
weightedsumgeq([5,1],[M_00004_00001,-4],aux22)
weightedsumleq([6,1],[M_00002_00001,-5],aux23)
weightedsumgeq([6,1],[M_00002_00001,-5],aux23)
weightedsumleq([6,1],[M_00002_00002,-5],aux24)
weightedsumgeq([6,1],[M_00002_00002,-5],aux24)
weightedsumleq([5,1],[M_00002_00002,-4],aux25)
weightedsumgeq([5,1],[M_00002_00002,-4],aux25)
weightedsumleq([5,1],[M_00003_00002,-4],aux26)
weightedsumgeq([5,1],[M_00003_00002,-4],aux26)
weightedsumleq([1,6],[-5,M_00001_00002],aux27)
weightedsumgeq([1,6],[-5,M_00001_00002],aux27)
weightedsumleq([1,6],[-5,M_00001_00001],aux28)
weightedsumgeq([1,6],[-5,M_00001_00001],aux28)
weightedsumleq([1,6],[-5,M_00005_00001],aux29)
weightedsumgeq([1,6],[-5,M_00005_00001],aux29)
weightedsumleq([1,6],[-5,M_00005_00002],aux30)
weightedsumgeq([1,6],[-5,M_00005_00002],aux30)
weightedsumleq([6,1],[M_00003_00001,-5],aux31)
weightedsumgeq([6,1],[M_00003_00001,-5],aux31)
weightedsumleq([6,1],[M_00003_00002,-5],aux32)
weightedsumgeq([6,1],[M_00003_00002,-5],aux32)
weightedsumleq([5,1],[M_00004_00002,-4],aux33)
weightedsumgeq([5,1],[M_00004_00002,-4],aux33)
weightedsumleq([5,1],[M_00002_00001,-4],aux34)
weightedsumgeq([5,1],[M_00002_00001,-4],aux34)
weightedsumleq([1,5],[-4,M_00001_00001],aux35)
weightedsumgeq([1,5],[-4,M_00001_00001],aux35)
weightedsumleq([1,5],[-4,M_00001_00002],aux36)
weightedsumgeq([1,5],[-4,M_00001_00002],aux36)
weightedsumleq([5,1],[M_00003_00001,-4],aux37)
weightedsumgeq([5,1],[M_00003_00001,-4],aux37)
weightedsumleq([6,1],[M_00004_00001,-5],aux38)
weightedsumgeq([6,1],[M_00004_00001,-5],aux38)
weightedsumleq([6,1],[M_00004_00002,-5],aux39)
weightedsumgeq([6,1],[M_00004_00002,-5],aux39)
weightedsumleq([1,5],[-4,M_00005_00001],aux40)
weightedsumgeq([1,5],[-4,M_00005_00001],aux40)
weightedsumleq([1,5],[-4,M_00005_00002],aux41)
weightedsumgeq([1,5],[-4,M_00005_00002],aux41)
**EOF**
