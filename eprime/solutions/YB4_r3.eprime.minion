MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 88
# CSE_active_eliminated_expressions = 192
# CSE_active_total_size = 468
**VARIABLES**
DISCRETE M_00001_00001 #
{1..2}
DISCRETE M_00001_00002 #
{1..2}
DISCRETE M_00001_00003 #
{3..4}
DISCRETE M_00001_00004 #
{3..4}
DISCRETE M_00002_00001 #
{1..2}
DISCRETE M_00002_00002 #
{1..2}
DISCRETE M_00002_00003 #
{3..4}
DISCRETE M_00002_00004 #
{3..4}
DISCRETE M_00003_00001 #
{1..2}
DISCRETE M_00003_00002 #
{1..2}
DISCRETE M_00003_00003 #
{3..4}
DISCRETE M_00003_00004 #
{3..4}
DISCRETE M_00004_00001 #
{1..2}
DISCRETE M_00004_00002 #
{1..2}
DISCRETE M_00004_00003 #
{3..4}
DISCRETE M_00004_00004 #
{3..4}
DISCRETE aux0 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], (M_00004_00001 + 4*M_00004_00002 + -4))
{1..4}
DISCRETE aux3 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], (4*M_00004_00002 + M_00004_00003 + -6))
{1..4}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], (-14 + 4*M_00001_00003 + M_00001_00004))
{1..4}
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], (-12 + M_00001_00002 + 4*M_00001_00003))
{1..4}
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], (-12 + M_00001_00001 + 4*M_00001_00003))
{1..4}
DISCRETE aux12 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], (5*M_00004_00002 + -4))
{1..4}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], (-14 + 5*M_00001_00003))
{1..4}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], (5*M_00002_00004 + -14))
{1..4}
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 4*M_00002_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux16, [1,2,5,6])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 4*M_00002_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux17, [2,2,5,5])
**VARIABLES**
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 4*M_00002_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux18, [1,2,5,6])
**VARIABLES**
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00002 + M_00002_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux19, [1,2,5,6])
**VARIABLES**
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00002 + M_00002_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux20, [1,2,5,6])
**VARIABLES**
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + M_00002_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux21, [1,2,5,6])
**VARIABLES**
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + M_00002_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux22, [1,2,5,6])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + M_00002_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux23, [2,2,5,5])
**VARIABLES**
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00003 + M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux24, [1,2,5,6])
**VARIABLES**
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00001 + M_00004_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux25, [2,2,5,5])
**VARIABLES**
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00001 + M_00004_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux26, [1,2,5,6])
**VARIABLES**
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00001 + M_00004_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux27, [1,2,5,6])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00003 + M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux28, [1,2,5,6])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 4*M_00004_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux29, [2,2,5,5])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 4*M_00004_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux30, [1,2,5,6])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 4*M_00004_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux31, [1,2,5,6])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 4*M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux32, [1,2,5,6])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 4*M_00004_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux33, [1,2,5,6])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 4*M_00004_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux34, [1,2,5,6])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + M_00003_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux35, [2,2,5,5])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + M_00003_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux36, [1,2,5,6])
**VARIABLES**
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + M_00003_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux37, [1,2,5,6])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00002 + M_00004_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux38, [1,2,5,6])
**VARIABLES**
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00002 + M_00004_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux39, [1,2,5,6])
**VARIABLES**
DISCRETE aux40 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00002 + M_00003_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux40, [1,2,5,6])
**VARIABLES**
DISCRETE aux41 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00002 + M_00003_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux41, [1,2,5,6])
**VARIABLES**
DISCRETE aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00003 + M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux42, [1,2,5,6])
**VARIABLES**
DISCRETE aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 4*M_00003_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux43, [1,2,5,6])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 4*M_00003_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux44, [1,2,5,6])
**VARIABLES**
DISCRETE aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 4*M_00003_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux45, [1,2,5,6])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 4*M_00003_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux46, [1,2,5,6])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 4*M_00003_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux47, [2,2,5,5])
**VARIABLES**
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 4*M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux48, [1,2,5,6])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 4*M_00001_00001 + M_00001_00002)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux49, [2,2,5,5])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 4*M_00001_00001 + M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux50, [1,2,5,6])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 4*M_00001_00001 + M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux51, [1,2,5,6])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 4*M_00001_00002 + M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux52, [1,2,5,6])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 4*M_00001_00002 + M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux53, [1,2,5,6])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + M_00001_00001 + 4*M_00001_00002)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux54, [2,2,5,5])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00001 + 4*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux55, [1,2,5,6])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00002 + 4*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux56, [1,2,5,6])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + M_00001_00003 + 4*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux57, [1,2,5,6])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 4*M_00002_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux58, [1,2,5,6])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 4*M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux59, [1,2,5,6])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 4*M_00002_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux60, [1,2,5,6])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00001 + 4*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux61, [1,2,5,6])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00002 + 4*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux62, [1,2,5,6])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 4*M_00001_00003 + M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux63, [1,2,5,6])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + -2)
{1..2}
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004 + -2)
{1..2}
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux66, [1,1,6,6])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux67, [1,1,6,6])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux68, [1,1,6,6])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux69, [1,1,6,6])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + M_00001_00003)
{1..2}
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + M_00001_00004)
{1..2}
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux72, [1,1,6,6])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux73, [1,1,6,6])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux74, [1,1,6,6])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux75, [1,1,6,6])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux76, [1,1,6,6])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + -2)
{1..2}
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00004 + -2)
{1..2}
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux79, [1,1,6,6])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux80, [1,1,6,6])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux81, [1,1,6,6])
**VARIABLES**
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux82, [1,1,6,6])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux83, [1,1,6,6])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux84, [1,1,6,6])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux85, [1,1,6,6])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00004 + -2)
{1..2}
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + -2)
{1..2}
DISCRETE aux88 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux72) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux66)
{1..4}
DISCRETE aux89 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux23) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux49)
{1..4}
DISCRETE aux90 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux21) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux51)
{1..4}
DISCRETE aux91 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux22) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux50)
{1..4}
DISCRETE aux92 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux17) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux54)
{1..4}
DISCRETE aux93 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux73) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux67)
{1..4}
DISCRETE aux94 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux20) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux52)
{1..4}
DISCRETE aux95 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux19) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux53)
{1..4}
DISCRETE aux96 #ElementOne([1, 2], M_00001_00001)
{1..2}
DISCRETE aux97 #ElementOne([1, 2], M_00001_00002)
{1..2}
DISCRETE aux98 #ElementOne([3, 4], aux70)
{3..4}
DISCRETE aux99 #ElementOne([3, 4], aux71)
{3..4}
DISCRETE aux100 #ElementOne([1, 2], M_00002_00001)
{1..2}
DISCRETE aux101 #ElementOne([1, 2], M_00002_00002)
{1..2}
DISCRETE aux102 #ElementOne([3, 4], aux64)
{3..4}
DISCRETE aux103 #ElementOne([3, 4], aux65)
{3..4}
DISCRETE aux104 #ElementOne([1, 2], M_00003_00001)
{1..2}
DISCRETE aux105 #ElementOne([1, 2], M_00003_00002)
{1..2}
DISCRETE aux106 #ElementOne([3, 4], aux77)
{3..4}
DISCRETE aux107 #ElementOne([3, 4], aux78)
{3..4}
DISCRETE aux108 #ElementOne([1, 2], M_00004_00001)
{1..2}
DISCRETE aux109 #ElementOne([1, 2], M_00004_00002)
{1..2}
DISCRETE aux110 #ElementOne([3, 4], aux87)
{3..4}
DISCRETE aux111 #ElementOne([3, 4], aux86)
{3..4}
DISCRETE aux112 #ElementOne([2, 1], M_00002_00002)
{1..2}
DISCRETE aux113 #ElementOne([2, 1], M_00002_00001)
{1..2}
DISCRETE aux114 #ElementOne([4, 3], aux65)
{3..4}
DISCRETE aux115 #ElementOne([4, 3], aux64)
{3..4}
DISCRETE aux116 #ElementOne([2, 1], M_00001_00002)
{1..2}
DISCRETE aux117 #ElementOne([2, 1], M_00001_00001)
{1..2}
DISCRETE aux118 #ElementOne([4, 3], aux71)
{3..4}
DISCRETE aux119 #ElementOne([4, 3], aux70)
{3..4}
DISCRETE aux120 #ElementOne([2, 1], M_00004_00002)
{1..2}
DISCRETE aux121 #ElementOne([2, 1], M_00004_00001)
{1..2}
DISCRETE aux122 #ElementOne([4, 3], aux86)
{3..4}
DISCRETE aux123 #ElementOne([4, 3], aux87)
{3..4}
DISCRETE aux124 #ElementOne([2, 1], M_00003_00002)
{1..2}
DISCRETE aux125 #ElementOne([2, 1], M_00003_00001)
{1..2}
DISCRETE aux126 #ElementOne([4, 3], aux78)
{3..4}
DISCRETE aux127 #ElementOne([4, 3], aux77)
{3..4}
**TUPLELIST**
rack 4 4
1 1 3 3 
2 2 4 4 
1 1 1 1 
2 2 2 2 
**VARIABLES**
ALIAS rack[4,4]=[[1, 1, 3, 3], [2, 2, 4, 4], [1, 1, 1, 1], [2, 2, 2, 2]]
**TUPLELIST**
perms 2 4
1 2 3 4 
2 1 4 3 
**VARIABLES**
ALIAS perms[2,4]=[[1, 2, 3, 4], [2, 1, 4, 3]]
**TUPLELIST**
inverses 2 4
1 2 3 4 
2 1 4 3 
**VARIABLES**
ALIAS inverses[2,4]=[[1, 2, 3, 4], [2, 1, 4, 3]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00002_00001],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00003_00001],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004]
**CONSTRAINTS**
watchelement_one([1, 2], M_00001_00001, aux96)
watchelement_one([1, 2], M_00001_00002, aux97)
watchelement_one([3, 4], aux70, aux98)
watchelement_one([3, 4], aux71, aux99)
watchelement_one([1, 2], M_00002_00001, aux100)
watchelement_one([1, 2], M_00002_00002, aux101)
watchelement_one([3, 4], aux64, aux102)
watchelement_one([3, 4], aux65, aux103)
watchelement_one([1, 2], M_00003_00001, aux104)
watchelement_one([1, 2], M_00003_00002, aux105)
watchelement_one([3, 4], aux77, aux106)
watchelement_one([3, 4], aux78, aux107)
watchelement_one([1, 2], M_00004_00001, aux108)
watchelement_one([1, 2], M_00004_00002, aux109)
watchelement_one([3, 4], aux87, aux110)
watchelement_one([3, 4], aux86, aux111)
watchelement_one([2, 1], M_00002_00002, aux112)
watchelement_one([2, 1], M_00002_00001, aux113)
watchelement_one([4, 3], aux65, aux114)
watchelement_one([4, 3], aux64, aux115)
watchelement_one([2, 1], M_00001_00002, aux116)
watchelement_one([2, 1], M_00001_00001, aux117)
watchelement_one([4, 3], aux71, aux118)
watchelement_one([4, 3], aux70, aux119)
watchelement_one([2, 1], M_00004_00002, aux120)
watchelement_one([2, 1], M_00004_00001, aux121)
watchelement_one([4, 3], aux86, aux122)
watchelement_one([4, 3], aux87, aux123)
watchelement_one([2, 1], M_00003_00002, aux124)
watchelement_one([2, 1], M_00003_00001, aux125)
watchelement_one([4, 3], aux78, aux126)
watchelement_one([4, 3], aux77, aux127)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux29, aux0)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux59, aux3)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux38, aux15)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux39, aux3)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux60, aux0)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux58, aux12)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux37, aux8)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux36, aux14)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux63, aux8)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux35, aux10)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux62, aux10)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux61, aux11)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux75, aux12)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux82, aux11)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux76, aux14)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux69, aux15)
gacalldiff([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004])
gacalldiff([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004])
gacalldiff([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004])
gacalldiff([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004])
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux83, aux11)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux25, aux10)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux26, aux14)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux27, aux8)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux47, aux0)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux80, aux12)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux41, aux3)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux40, aux15)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux16, aux11)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux18, aux10)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux68, aux14)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux24, aux8)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux45, aux11)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux44, aux10)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux79, aux14)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux42, aux8)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux33, aux11)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux31, aux10)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux84, aux14)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux28, aux8)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux55, aux0)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux56, aux12)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux57, aux3)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux74, aux15)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux46, aux0)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux43, aux12)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux48, aux3)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux81, aux15)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux34, aux0)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux30, aux12)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux32, aux3)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux85, aux15)
watchelement_one([1, 1, 3, 3, 2, 2], aux72, M_00001_00001)
watchelement_one([1, 1, 3, 3, 2], aux49, M_00001_00001)
watchelement_one([3, 3, 2, 2, 4, 4], aux51, M_00001_00003)
watchelement_one([3, 3, 2, 2, 4, 4], aux50, M_00001_00003)
watchelement_one([1, 1, 3, 3, 2], aux54, M_00001_00002)
watchelement_one([1, 1, 3, 3, 2, 2], aux73, M_00001_00002)
watchelement_one([3, 3, 2, 2, 4, 4], aux52, M_00001_00004)
watchelement_one([3, 3, 2, 2, 4, 4], aux53, M_00001_00004)
watchelement_one([1, 1, 1, 1, 2, 2], aux61, M_00001_00001)
watchelement_one([1, 1, 1, 1, 2, 2], aux62, M_00001_00001)
watchelement_one([1, 1, 2, 2, 2, 2], aux76, M_00001_00001)
watchelement_one([1, 1, 2, 2, 2, 2], aux63, M_00001_00001)
watchelement_one([1, 1, 1, 1, 2, 2], aux55, M_00001_00002)
watchelement_one([1, 1, 1, 1, 2, 2], aux56, M_00001_00002)
watchelement_one([1, 1, 2, 2, 2, 2], aux57, M_00001_00002)
watchelement_one([1, 1, 2, 2, 2, 2], aux74, M_00001_00002)
watchelement_one([1, 1, 3, 3, 2, 2], aux66, M_00002_00001)
watchelement_one([1, 1, 3, 3, 2], aux23, M_00002_00001)
watchelement_one([3, 3, 2, 2, 4, 4], aux21, M_00002_00003)
watchelement_one([3, 3, 2, 2, 4, 4], aux22, M_00002_00003)
watchelement_one([1, 1, 3, 3, 2], aux17, M_00002_00002)
watchelement_one([1, 1, 3, 3, 2, 2], aux67, M_00002_00002)
watchelement_one([3, 3, 2, 2, 4, 4], aux20, M_00002_00004)
watchelement_one([3, 3, 2, 2, 4, 4], aux19, M_00002_00004)
watchelement_one([1, 1, 1, 1, 2, 2], aux16, M_00002_00001)
watchelement_one([1, 1, 1, 1, 2, 2], aux18, M_00002_00001)
watchelement_one([1, 1, 2, 2, 2, 2], aux68, M_00002_00001)
watchelement_one([1, 1, 2, 2, 2, 2], aux24, M_00002_00001)
watchelement_one([1, 1, 1, 1, 2, 2], aux60, M_00002_00002)
watchelement_one([1, 1, 1, 1, 2, 2], aux58, M_00002_00002)
watchelement_one([1, 1, 2, 2, 2, 2], aux59, M_00002_00002)
watchelement_one([1, 1, 2, 2, 2, 2], aux69, M_00002_00002)
watchelement_one([1, 1, 3, 3, 2, 2], aux82, M_00003_00001)
watchelement_one([1, 1, 3, 3, 2], aux35, M_00003_00001)
watchelement_one([3, 3, 2, 2, 4, 4], aux36, M_00003_00003)
watchelement_one([3, 3, 2, 2, 4, 4], aux37, M_00003_00003)
watchelement_one([1, 1, 3, 3, 2], aux47, M_00003_00002)
watchelement_one([1, 1, 3, 3, 2, 2], aux80, M_00003_00002)
watchelement_one([3, 3, 2, 2, 4, 4], aux41, M_00003_00004)
watchelement_one([3, 3, 2, 2, 4, 4], aux40, M_00003_00004)
watchelement_one([1, 1, 1, 1, 2, 2], aux45, M_00003_00001)
watchelement_one([1, 1, 1, 1, 2, 2], aux44, M_00003_00001)
watchelement_one([1, 1, 2, 2, 2, 2], aux79, M_00003_00001)
watchelement_one([1, 1, 2, 2, 2, 2], aux42, M_00003_00001)
watchelement_one([1, 1, 1, 1, 2, 2], aux46, M_00003_00002)
watchelement_one([1, 1, 1, 1, 2, 2], aux43, M_00003_00002)
watchelement_one([1, 1, 2, 2, 2, 2], aux48, M_00003_00002)
watchelement_one([1, 1, 2, 2, 2, 2], aux81, M_00003_00002)
watchelement_one([1, 1, 3, 3, 2, 2], aux83, M_00004_00001)
watchelement_one([1, 1, 3, 3, 2], aux25, M_00004_00001)
watchelement_one([3, 3, 2, 2, 4, 4], aux26, M_00004_00003)
watchelement_one([3, 3, 2, 2, 4, 4], aux27, M_00004_00003)
watchelement_one([1, 1, 3, 3, 2], aux29, M_00004_00002)
watchelement_one([1, 1, 3, 3, 2, 2], aux75, M_00004_00002)
watchelement_one([3, 3, 2, 2, 4, 4], aux39, M_00004_00004)
watchelement_one([3, 3, 2, 2, 4, 4], aux38, M_00004_00004)
watchelement_one([1, 1, 1, 1, 2, 2], aux33, M_00004_00001)
watchelement_one([1, 1, 1, 1, 2, 2], aux31, M_00004_00001)
watchelement_one([1, 1, 2, 2, 2, 2], aux84, M_00004_00001)
watchelement_one([1, 1, 2, 2, 2, 2], aux28, M_00004_00001)
watchelement_one([1, 1, 1, 1, 2, 2], aux34, M_00004_00002)
watchelement_one([1, 1, 1, 1, 2, 2], aux30, M_00004_00002)
watchelement_one([1, 1, 2, 2, 2, 2], aux32, M_00004_00002)
watchelement_one([1, 1, 2, 2, 2, 2], aux85, M_00004_00002)
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004],[aux96, aux97, aux98, aux99, aux100, aux101, aux102, aux103, aux104, aux105, aux106, aux107, aux108, aux109, aux110, aux111])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004],[aux112, aux113, aux114, aux115, aux116, aux117, aux118, aux119, aux120, aux121, aux122, aux123, aux124, aux125, aux126, aux127])
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux72, aux88)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux66, aux88)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux23, aux89)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux49, aux89)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux21, aux90)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux51, aux90)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux22, aux91)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux50, aux91)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux17, aux92)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux54, aux92)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux73, aux93)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux67, aux93)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux20, aux94)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux52, aux94)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux19, aux95)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux53, aux95)
weightedsumleq([1,4,1],[M_00002_00001,M_00002_00003,-12],aux16)
weightedsumgeq([1,4,1],[M_00002_00001,M_00002_00003,-12],aux16)
weightedsumleq([1,4,1],[M_00002_00001,M_00002_00002,-4],aux17)
weightedsumgeq([1,4,1],[M_00002_00001,M_00002_00002,-4],aux17)
weightedsumleq([1,4,1],[M_00002_00002,M_00002_00003,-12],aux18)
weightedsumgeq([1,4,1],[M_00002_00002,M_00002_00003,-12],aux18)
weightedsumleq([4,1,1],[M_00002_00002,M_00002_00004,-6],aux19)
weightedsumgeq([4,1,1],[M_00002_00002,M_00002_00004,-6],aux19)
weightedsumleq([4,1,1],[M_00002_00002,M_00002_00003,-6],aux20)
weightedsumgeq([4,1,1],[M_00002_00002,M_00002_00003,-6],aux20)
weightedsumleq([4,1,1],[M_00002_00001,M_00002_00003,-6],aux21)
weightedsumgeq([4,1,1],[M_00002_00001,M_00002_00003,-6],aux21)
weightedsumleq([4,1,1],[M_00002_00001,M_00002_00004,-6],aux22)
weightedsumgeq([4,1,1],[M_00002_00001,M_00002_00004,-6],aux22)
weightedsumleq([4,1,1],[M_00002_00001,M_00002_00002,-4],aux23)
weightedsumgeq([4,1,1],[M_00002_00001,M_00002_00002,-4],aux23)
weightedsumleq([4,1,1],[M_00002_00003,M_00002_00004,-14],aux24)
weightedsumgeq([4,1,1],[M_00002_00003,M_00002_00004,-14],aux24)
weightedsumleq([4,1,1],[M_00004_00001,M_00004_00002,-4],aux25)
weightedsumgeq([4,1,1],[M_00004_00001,M_00004_00002,-4],aux25)
weightedsumleq([4,1,1],[M_00004_00001,M_00004_00003,-6],aux26)
weightedsumgeq([4,1,1],[M_00004_00001,M_00004_00003,-6],aux26)
weightedsumleq([4,1,1],[M_00004_00001,M_00004_00004,-6],aux27)
weightedsumgeq([4,1,1],[M_00004_00001,M_00004_00004,-6],aux27)
weightedsumleq([4,1,1],[M_00004_00003,M_00004_00004,-14],aux28)
weightedsumgeq([4,1,1],[M_00004_00003,M_00004_00004,-14],aux28)
weightedsumleq([1,4,1],[M_00004_00001,M_00004_00002,-4],aux29)
weightedsumgeq([1,4,1],[M_00004_00001,M_00004_00002,-4],aux29)
weightedsumleq([1,4,1],[M_00004_00002,M_00004_00004,-12],aux30)
weightedsumgeq([1,4,1],[M_00004_00002,M_00004_00004,-12],aux30)
weightedsumleq([1,4,1],[M_00004_00002,M_00004_00003,-12],aux31)
weightedsumgeq([1,4,1],[M_00004_00002,M_00004_00003,-12],aux31)
weightedsumleq([1,4,1],[M_00004_00003,M_00004_00004,-14],aux32)
weightedsumgeq([1,4,1],[M_00004_00003,M_00004_00004,-14],aux32)
weightedsumleq([1,4,1],[M_00004_00001,M_00004_00003,-12],aux33)
weightedsumgeq([1,4,1],[M_00004_00001,M_00004_00003,-12],aux33)
weightedsumleq([1,4,1],[M_00004_00001,M_00004_00004,-12],aux34)
weightedsumgeq([1,4,1],[M_00004_00001,M_00004_00004,-12],aux34)
weightedsumleq([4,1,1],[M_00003_00001,M_00003_00002,-4],aux35)
weightedsumgeq([4,1,1],[M_00003_00001,M_00003_00002,-4],aux35)
weightedsumleq([4,1,1],[M_00003_00001,M_00003_00003,-6],aux36)
weightedsumgeq([4,1,1],[M_00003_00001,M_00003_00003,-6],aux36)
weightedsumleq([4,1,1],[M_00003_00001,M_00003_00004,-6],aux37)
weightedsumgeq([4,1,1],[M_00003_00001,M_00003_00004,-6],aux37)
weightedsumleq([4,1,1],[M_00004_00002,M_00004_00004,-6],aux38)
weightedsumgeq([4,1,1],[M_00004_00002,M_00004_00004,-6],aux38)
weightedsumleq([4,1,1],[M_00004_00002,M_00004_00003,-6],aux39)
weightedsumgeq([4,1,1],[M_00004_00002,M_00004_00003,-6],aux39)
weightedsumleq([4,1,1],[M_00003_00002,M_00003_00004,-6],aux40)
weightedsumgeq([4,1,1],[M_00003_00002,M_00003_00004,-6],aux40)
weightedsumleq([4,1,1],[M_00003_00002,M_00003_00003,-6],aux41)
weightedsumgeq([4,1,1],[M_00003_00002,M_00003_00003,-6],aux41)
weightedsumleq([4,1,1],[M_00003_00003,M_00003_00004,-14],aux42)
weightedsumgeq([4,1,1],[M_00003_00003,M_00003_00004,-14],aux42)
weightedsumleq([1,4,1],[M_00003_00002,M_00003_00004,-12],aux43)
weightedsumgeq([1,4,1],[M_00003_00002,M_00003_00004,-12],aux43)
weightedsumleq([1,4,1],[M_00003_00002,M_00003_00003,-12],aux44)
weightedsumgeq([1,4,1],[M_00003_00002,M_00003_00003,-12],aux44)
weightedsumleq([1,4,1],[M_00003_00001,M_00003_00003,-12],aux45)
weightedsumgeq([1,4,1],[M_00003_00001,M_00003_00003,-12],aux45)
weightedsumleq([1,4,1],[M_00003_00001,M_00003_00004,-12],aux46)
weightedsumgeq([1,4,1],[M_00003_00001,M_00003_00004,-12],aux46)
weightedsumleq([1,4,1],[M_00003_00001,M_00003_00002,-4],aux47)
weightedsumgeq([1,4,1],[M_00003_00001,M_00003_00002,-4],aux47)
weightedsumleq([1,4,1],[M_00003_00003,M_00003_00004,-14],aux48)
weightedsumgeq([1,4,1],[M_00003_00003,M_00003_00004,-14],aux48)
weightedsumleq([1,4,1],[-4,M_00001_00001,M_00001_00002],aux49)
weightedsumgeq([1,4,1],[-4,M_00001_00001,M_00001_00002],aux49)
weightedsumleq([1,4,1],[-6,M_00001_00001,M_00001_00004],aux50)
weightedsumgeq([1,4,1],[-6,M_00001_00001,M_00001_00004],aux50)
weightedsumleq([1,4,1],[-6,M_00001_00001,M_00001_00003],aux51)
weightedsumgeq([1,4,1],[-6,M_00001_00001,M_00001_00003],aux51)
weightedsumleq([1,4,1],[-6,M_00001_00002,M_00001_00003],aux52)
weightedsumgeq([1,4,1],[-6,M_00001_00002,M_00001_00003],aux52)
weightedsumleq([1,4,1],[-6,M_00001_00002,M_00001_00004],aux53)
weightedsumgeq([1,4,1],[-6,M_00001_00002,M_00001_00004],aux53)
weightedsumleq([1,1,4],[-4,M_00001_00001,M_00001_00002],aux54)
weightedsumgeq([1,1,4],[-4,M_00001_00001,M_00001_00002],aux54)
weightedsumleq([1,1,4],[-12,M_00001_00001,M_00001_00004],aux55)
weightedsumgeq([1,1,4],[-12,M_00001_00001,M_00001_00004],aux55)
weightedsumleq([1,1,4],[-12,M_00001_00002,M_00001_00004],aux56)
weightedsumgeq([1,1,4],[-12,M_00001_00002,M_00001_00004],aux56)
weightedsumleq([1,1,4],[-14,M_00001_00003,M_00001_00004],aux57)
weightedsumgeq([1,1,4],[-14,M_00001_00003,M_00001_00004],aux57)
weightedsumleq([1,4,1],[M_00002_00002,M_00002_00004,-12],aux58)
weightedsumgeq([1,4,1],[M_00002_00002,M_00002_00004,-12],aux58)
weightedsumleq([1,4,1],[M_00002_00003,M_00002_00004,-14],aux59)
weightedsumgeq([1,4,1],[M_00002_00003,M_00002_00004,-14],aux59)
weightedsumleq([1,4,1],[M_00002_00001,M_00002_00004,-12],aux60)
weightedsumgeq([1,4,1],[M_00002_00001,M_00002_00004,-12],aux60)
weightedsumleq([1,1,4],[-12,M_00001_00001,M_00001_00003],aux61)
weightedsumgeq([1,1,4],[-12,M_00001_00001,M_00001_00003],aux61)
weightedsumleq([1,1,4],[-12,M_00001_00002,M_00001_00003],aux62)
weightedsumgeq([1,1,4],[-12,M_00001_00002,M_00001_00003],aux62)
weightedsumleq([1,4,1],[-14,M_00001_00003,M_00001_00004],aux63)
weightedsumgeq([1,4,1],[-14,M_00001_00003,M_00001_00004],aux63)
sumleq([M_00002_00003,-2],aux64)
sumgeq([M_00002_00003,-2],aux64)
sumleq([M_00002_00004,-2],aux65)
sumgeq([M_00002_00004,-2],aux65)
weightedsumleq([5,1],[M_00002_00001,-4],aux66)
weightedsumgeq([5,1],[M_00002_00001,-4],aux66)
weightedsumleq([5,1],[M_00002_00002,-4],aux67)
weightedsumgeq([5,1],[M_00002_00002,-4],aux67)
weightedsumleq([5,1],[M_00002_00003,-14],aux68)
weightedsumgeq([5,1],[M_00002_00003,-14],aux68)
weightedsumleq([5,1],[M_00002_00004,-14],aux69)
weightedsumgeq([5,1],[M_00002_00004,-14],aux69)
sumleq([-2,M_00001_00003],aux70)
sumgeq([-2,M_00001_00003],aux70)
sumleq([-2,M_00001_00004],aux71)
sumgeq([-2,M_00001_00004],aux71)
weightedsumleq([1,5],[-4,M_00001_00001],aux72)
weightedsumgeq([1,5],[-4,M_00001_00001],aux72)
weightedsumleq([1,5],[-4,M_00001_00002],aux73)
weightedsumgeq([1,5],[-4,M_00001_00002],aux73)
weightedsumleq([1,5],[-14,M_00001_00004],aux74)
weightedsumgeq([1,5],[-14,M_00001_00004],aux74)
weightedsumleq([5,1],[M_00004_00002,-4],aux75)
weightedsumgeq([5,1],[M_00004_00002,-4],aux75)
weightedsumleq([1,5],[-14,M_00001_00003],aux76)
weightedsumgeq([1,5],[-14,M_00001_00003],aux76)
sumleq([M_00003_00003,-2],aux77)
sumgeq([M_00003_00003,-2],aux77)
sumleq([M_00003_00004,-2],aux78)
sumgeq([M_00003_00004,-2],aux78)
weightedsumleq([5,1],[M_00003_00003,-14],aux79)
weightedsumgeq([5,1],[M_00003_00003,-14],aux79)
weightedsumleq([5,1],[M_00003_00002,-4],aux80)
weightedsumgeq([5,1],[M_00003_00002,-4],aux80)
weightedsumleq([5,1],[M_00003_00004,-14],aux81)
weightedsumgeq([5,1],[M_00003_00004,-14],aux81)
weightedsumleq([5,1],[M_00003_00001,-4],aux82)
weightedsumgeq([5,1],[M_00003_00001,-4],aux82)
weightedsumleq([5,1],[M_00004_00001,-4],aux83)
weightedsumgeq([5,1],[M_00004_00001,-4],aux83)
weightedsumleq([5,1],[M_00004_00003,-14],aux84)
weightedsumgeq([5,1],[M_00004_00003,-14],aux84)
weightedsumleq([5,1],[M_00004_00004,-14],aux85)
weightedsumgeq([5,1],[M_00004_00004,-14],aux85)
sumleq([M_00004_00004,-2],aux86)
sumgeq([M_00004_00004,-2],aux86)
sumleq([M_00004_00003,-2],aux87)
sumgeq([M_00004_00003,-2],aux87)
**EOF**
