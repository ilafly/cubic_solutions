MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 158
# CSE_active_eliminated_expressions = 352
# CSE_active_total_size = 726
**VARIABLES**
DISCRETE M_00001_00001 #
{1..2}
DISCRETE M_00001_00002 #
{1..2}
DISCRETE M_00001_00004 #
{4..5}
DISCRETE M_00001_00005 #
{4..5}
DISCRETE M_00002_00001 #
{1..2}
DISCRETE M_00002_00002 #
{1..2}
DISCRETE M_00002_00004 #
{4..5}
DISCRETE M_00002_00005 #
{4..5}
DISCRETE M_00003_00001 #
{1..2}
DISCRETE M_00003_00002 #
{1..2}
DISCRETE M_00003_00004 #
{4..5}
DISCRETE M_00003_00005 #
{4..5}
DISCRETE M_00004_00001 #
{1..2}
DISCRETE M_00004_00002 #
{1..2}
DISCRETE M_00004_00004 #
{4..5}
DISCRETE M_00004_00005 #
{4..5}
DISCRETE M_00005_00001 #
{1..2}
DISCRETE M_00005_00002 #
{1..2}
DISCRETE M_00005_00004 #
{4..5}
DISCRETE M_00005_00005 #
{4..5}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00001_00004))
{4..5}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00001_00005))
{4..5}
DISCRETE aux6 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00003_00004, M_00003_00005], (-3 + M_00005_00005))
{4..5}
DISCRETE aux7 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00003_00004, M_00003_00005], (-3 + M_00005_00004))
{4..5}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00003_00004 + -3))
{4..5}
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00003_00005 + -3))
{4..5}
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00002_00004 + -3))
{4..5}
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00002_00005 + -3))
{4..5}
DISCRETE aux12 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00003_00004, M_00003_00005], (M_00004_00004 + -3))
{4..5}
DISCRETE aux13 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00003_00004, M_00003_00005], (M_00004_00005 + -3))
{4..5}
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00005_00004))
{4..5}
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00005_00005))
{4..5}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00004_00004 + -3))
{4..5}
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00004_00005 + -3))
{4..5}
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00001_00001)
{1..2}
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00001_00002)
{1..2}
DISCRETE aux26 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002], M_00005_00002)
{1..2}
DISCRETE aux27 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002], M_00005_00001)
{1..2}
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00003_00001)
{1..2}
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00003_00002)
{1..2}
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00002_00002)
{1..2}
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00002_00001)
{1..2}
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00005_00001)
{1..2}
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00005_00002)
{1..2}
DISCRETE aux42 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002], M_00004_00001)
{1..2}
DISCRETE aux43 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002], M_00004_00002)
{1..2}
DISCRETE aux44 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00004_00002)
{1..2}
DISCRETE aux45 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00004_00001)
{1..2}
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux48, [2,2,6,6])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00004 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux49, [1,2,6,7])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00005 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux50, [1,2,6,7])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00004 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux51, [1,2,6,7])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00005 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux52, [1,2,6,7])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004 + 5*M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux53, [1,2,6,7])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00005 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux54, [1,2,6,7])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00004 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux55, [1,2,6,7])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux56, [2,2,6,6])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux57, [1,2,6,7])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00004 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux58, [1,2,6,7])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00005 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux59, [1,2,6,7])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux60, [2,2,6,6])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00005 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux61, [1,2,6,7])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00004 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux62, [1,2,6,7])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00004 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux63, [1,2,6,7])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00005 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux64, [1,2,6,7])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux65, [1,2,6,7])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00004 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux66, [1,2,6,7])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00005 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux67, [1,2,6,7])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux68, [2,2,6,6])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00005 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux69, [1,2,6,7])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00004 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux70, [1,2,6,7])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00004 + 5*M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux71, [1,2,6,7])
**VARIABLES**
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00005 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux72, [1,2,6,7])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00004 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux73, [1,2,6,7])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00004 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux74, [1,2,6,7])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux75, [2,2,6,6])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00005 + -8)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux76, [1,2,6,7])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux77, [1,2,6,7])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00005 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux78, [1,2,6,7])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00004 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux79, [1,2,6,7])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00005 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux80, [1,2,6,7])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00002 + -5)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux81, [2,2,6,6])
**VARIABLES**
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00004 + -20)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux82, [1,2,6,7])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00004 + 5*M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux83, [1,2,6,7])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 5*M_00005_00004 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux84, [1,2,6,7])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + M_00005_00004 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux85, [1,2,6,7])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (-20 + M_00005_00002 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux86, [1,2,6,7])
**VARIABLES**
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (-20 + M_00005_00001 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux87, [1,2,6,7])
**VARIABLES**
DISCRETE aux88 #Active-CSE: 2 occurrences of this expression or equivalent: (-20 + M_00005_00001 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux88, [1,2,6,7])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 2 occurrences of this expression or equivalent: (-20 + M_00005_00002 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux89, [1,2,6,7])
**VARIABLES**
DISCRETE aux90 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00005_00001 + 5*M_00005_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux90, [2,2,6,6])
**VARIABLES**
DISCRETE aux91 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 5*M_00005_00001 + M_00005_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux91, [2,2,6,6])
**VARIABLES**
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (-8 + 5*M_00005_00002 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux92, [1,2,6,7])
**VARIABLES**
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (-8 + 5*M_00005_00002 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux93, [1,2,6,7])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (-8 + 5*M_00005_00001 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux94, [1,2,6,7])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 2 occurrences of this expression or equivalent: (-8 + 5*M_00005_00001 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux95, [1,2,6,7])
**VARIABLES**
DISCRETE aux96 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 5*M_00001_00004 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux96, [1,2,6,7])
**VARIABLES**
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + M_00001_00004 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux97, [1,2,6,7])
**VARIABLES**
DISCRETE aux98 #Active-CSE: 2 occurrences of this expression or equivalent: (-20 + M_00001_00002 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux98, [1,2,6,7])
**VARIABLES**
DISCRETE aux99 #Active-CSE: 2 occurrences of this expression or equivalent: (-20 + M_00001_00001 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux99, [1,2,6,7])
**VARIABLES**
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: (-20 + M_00001_00001 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux100, [1,2,6,7])
**VARIABLES**
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: (-20 + M_00001_00002 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux101, [1,2,6,7])
**VARIABLES**
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: (-8 + 5*M_00001_00002 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux102, [1,2,6,7])
**VARIABLES**
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: (-8 + 5*M_00001_00002 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux103, [1,2,6,7])
**VARIABLES**
DISCRETE aux104 #Active-CSE: 2 occurrences of this expression or equivalent: (-8 + 5*M_00001_00001 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux104, [1,2,6,7])
**VARIABLES**
DISCRETE aux105 #Active-CSE: 2 occurrences of this expression or equivalent: (-8 + 5*M_00001_00001 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux105, [1,2,6,7])
**VARIABLES**
DISCRETE aux106 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 5*M_00001_00001 + M_00001_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux106, [2,2,6,6])
**VARIABLES**
DISCRETE aux107 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00001_00001 + 5*M_00001_00002)
{2..6}
**CONSTRAINTS**
w-inintervalset(aux107, [2,2,6,6])
**VARIABLES**
DISCRETE aux108 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux108, [1,1,6,6])
**VARIABLES**
DISCRETE aux109 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux109, [1,1,7,7])
**VARIABLES**
DISCRETE aux110 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux110, [1,1,7,7])
**VARIABLES**
DISCRETE aux111 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux111, [1,1,7,7])
**VARIABLES**
DISCRETE aux112 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux112, [1,1,7,7])
**VARIABLES**
DISCRETE aux113 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux113, [1,1,6,6])
**VARIABLES**
DISCRETE aux114 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux114, [1,1,6,6])
**VARIABLES**
DISCRETE aux115 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux115, [1,1,6,6])
**VARIABLES**
DISCRETE aux116 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00005_00004)
{1..2}
DISCRETE aux117 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux117, [1,1,7,7])
**VARIABLES**
DISCRETE aux118 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux118, [1,1,7,7])
**VARIABLES**
DISCRETE aux119 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00005)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux119, [1,1,6,6])
**VARIABLES**
DISCRETE aux120 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux120, [1,1,6,6])
**VARIABLES**
DISCRETE aux121 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux121, [1,1,6,6])
**VARIABLES**
DISCRETE aux122 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux122, [1,1,6,6])
**VARIABLES**
DISCRETE aux123 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00001_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux123, [1,1,7,7])
**VARIABLES**
DISCRETE aux124 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00001_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux124, [1,1,7,7])
**VARIABLES**
DISCRETE aux125 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00005 + -3)
{1..2}
DISCRETE aux126 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00004 + -3)
{1..2}
DISCRETE aux127 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00005 + -3)
{1..2}
DISCRETE aux128 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004 + -3)
{1..2}
DISCRETE aux129 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00005 + -3)
{1..2}
DISCRETE aux130 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00001)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux130, [1,1,7,7])
**VARIABLES**
DISCRETE aux131 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux131, [1,1,7,7])
**VARIABLES**
DISCRETE aux132 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00005_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux132, [1,1,6,6])
**VARIABLES**
DISCRETE aux133 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00005_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux133, [1,1,6,6])
**VARIABLES**
DISCRETE aux134 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00005_00005)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux134, [1,1,6,6])
**VARIABLES**
DISCRETE aux135 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00005_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux135, [1,1,6,6])
**VARIABLES**
DISCRETE aux136 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux136, [1,1,7,7])
**VARIABLES**
DISCRETE aux137 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux137, [1,1,7,7])
**VARIABLES**
DISCRETE aux138 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004 + -3)
{1..2}
DISCRETE aux139 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux139, [1,1,7,7])
**VARIABLES**
DISCRETE aux140 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux140, [1,1,7,7])
**VARIABLES**
DISCRETE aux141 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux141, [1,1,7,7])
**VARIABLES**
DISCRETE aux142 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux142, [1,1,7,7])
**VARIABLES**
DISCRETE aux143 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux143, [1,1,6,6])
**VARIABLES**
DISCRETE aux144 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux144, [1,1,6,6])
**VARIABLES**
DISCRETE aux145 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux145, [1,1,6,6])
**VARIABLES**
DISCRETE aux146 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux146, [1,1,6,6])
**VARIABLES**
DISCRETE aux147 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00001_00004)
{1..2}
DISCRETE aux148 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00001_00005)
{1..2}
DISCRETE aux149 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux149, [1,1,6,6])
**VARIABLES**
DISCRETE aux150 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux150, [1,1,7,7])
**VARIABLES**
DISCRETE aux151 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux151, [1,1,7,7])
**VARIABLES**
DISCRETE aux152 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux152, [1,1,7,7])
**VARIABLES**
DISCRETE aux153 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux153, [1,1,7,7])
**VARIABLES**
DISCRETE aux154 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux154, [1,1,6,6])
**VARIABLES**
DISCRETE aux155 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux155, [1,1,6,6])
**VARIABLES**
DISCRETE aux156 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux156, [1,1,6,6])
**VARIABLES**
DISCRETE aux157 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00005_00005)
{1..2}
DISCRETE aux158 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux124) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux109)
{1..5}
DISCRETE aux159 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux56) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux106)
{1..5}
DISCRETE aux160 #ElementOne([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux121) --- ElementOne([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux108)
{1..5}
DISCRETE aux161 #ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux104) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux55)
{1..5}
DISCRETE aux162 #ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux105) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux54)
{1..5}
DISCRETE aux163 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux141) --- ElementOne([M_00003_00001, M_00003_00002], M_00001_00001)
{1..2}
DISCRETE aux164 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux75) --- ElementOne([M_00003_00001, M_00003_00002], M_00001_00002)
{1..2}
DISCRETE aux165 #ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux74) --- ElementOne([M_00003_00004, M_00003_00005], aux147)
{4..5}
DISCRETE aux166 #ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux76) --- ElementOne([M_00003_00004, M_00003_00005], aux148)
{4..5}
DISCRETE aux167 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux150) --- ElementOne([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux100)
{1..5}
DISCRETE aux168 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux60) --- ElementOne([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux98)
{1..5}
DISCRETE aux169 #ElementOne([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux155) --- ElementOne([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux120)
{1..5}
DISCRETE aux170 #ElementOne([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux117) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux62)
{1..5}
DISCRETE aux171 #ElementOne([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux96) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux61)
{1..5}
DISCRETE aux172 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux130) --- ElementOne([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux99)
{1..5}
DISCRETE aux173 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux91) --- ElementOne([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux101)
{1..5}
DISCRETE aux174 #ElementOne([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux132) --- ElementOne([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux119)
{1..5}
DISCRETE aux175 #ElementOne([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux97) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux94)
{1..5}
DISCRETE aux176 #ElementOne([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux118) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux95)
{1..5}
DISCRETE aux177 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux48) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux107)
{1..5}
DISCRETE aux178 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux123) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux111)
{1..5}
DISCRETE aux179 #ElementOne([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux122) --- ElementOne([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux114)
{1..5}
DISCRETE aux180 #ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux102) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux58)
{1..5}
DISCRETE aux181 #ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux103) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux59)
{1..5}
DISCRETE aux182 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux81) --- ElementOne([M_00003_00001, M_00003_00002], M_00002_00001)
{1..2}
DISCRETE aux183 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux142) --- ElementOne([M_00003_00001, M_00003_00002], M_00002_00002)
{1..2}
DISCRETE aux184 #ElementOne([M_00003_00004, M_00003_00005], aux138) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux73)
{4..5}
DISCRETE aux185 #ElementOne([M_00003_00004, M_00003_00005], aux129) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux72)
{4..5}
DISCRETE aux186 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux68) --- ElementOne([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux51)
{1..5}
DISCRETE aux187 #ElementOne([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux49) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux152)
{1..5}
DISCRETE aux188 #ElementOne([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux154) --- ElementOne([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux115)
{1..5}
DISCRETE aux189 #ElementOne([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux112) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux63)
{1..5}
DISCRETE aux190 #ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux64) --- ElementOne([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux57)
{1..5}
DISCRETE aux191 #ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux90) --- ElementOne([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux52)
{1..5}
DISCRETE aux192 #ElementOne([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux50) --- ElementOne([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux131)
{1..5}
DISCRETE aux193 #ElementOne([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux133) --- ElementOne([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux113)
{1..5}
DISCRETE aux194 #ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux93) --- ElementOne([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux53)
{1..5}
DISCRETE aux195 #ElementOne([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux110) --- ElementOne([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux92)
{1..5}
**TUPLELIST**
rack 5 5
1 1 3 4 5 
2 2 3 4 5 
1 2 3 4 5 
1 2 3 3 3 
1 2 3 3 3 
**VARIABLES**
ALIAS rack[5,5]=[[1, 1, 3, 4, 5], [2, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 3, 3], [1, 2, 3, 3, 3]]
**TUPLELIST**
perms 4 5
1 2 3 4 5 
1 2 3 5 4 
2 1 3 4 5 
2 1 3 5 4 
**VARIABLES**
ALIAS perms[4,5]=[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [2, 1, 3, 4, 5], [2, 1, 3, 5, 4]]
**TUPLELIST**
inverses 4 5
1 2 3 4 5 
1 2 3 5 4 
2 1 3 4 5 
2 1 3 5 4 
**VARIABLES**
ALIAS inverses[4,5]=[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [2, 1, 3, 4, 5], [2, 1, 3, 5, 4]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00001_00004],[M_00001_00005],[M_00002_00001],[M_00002_00002],[M_00002_00004],[M_00002_00005],[M_00003_00001],[M_00003_00002],[M_00003_00004],[M_00003_00005],[M_00004_00001],[M_00004_00002],[M_00004_00004],[M_00004_00005],[M_00005_00001],[M_00005_00002],[M_00005_00004],[M_00005_00005]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, M_00002_00004, M_00002_00005, M_00003_00001, M_00003_00002, M_00003_00004, M_00003_00005, M_00004_00001, M_00004_00002, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, M_00005_00004, M_00005_00005]
**CONSTRAINTS**
watchelement_one([5, 4], aux147, aux0)
watchelement_one([5, 4], aux148, aux1)
watchelement_one([4, 5], aux138, M_00002_00004)
watchelement_one([4, 5], aux129, M_00002_00005)
watchelement_one([4, 5], aux128, M_00004_00004)
watchelement_one([4, 5], aux127, M_00004_00005)
watchelement_one([M_00003_00004, M_00003_00005], aux157, aux6)
watchelement_one([M_00003_00004, M_00003_00005], aux116, aux7)
watchelement_one([5, 4], aux126, aux8)
watchelement_one([5, 4], aux125, aux9)
watchelement_one([5, 4], aux138, aux10)
watchelement_one([5, 4], aux129, aux11)
watchelement_one([M_00003_00004, M_00003_00005], aux128, aux12)
watchelement_one([M_00003_00004, M_00003_00005], aux127, aux13)
watchelement_one([4, 5], aux125, M_00003_00005)
watchelement_one([4, 5], aux126, M_00003_00004)
watchelement_one([5, 4], aux116, aux16)
watchelement_one([5, 4], aux157, aux17)
watchelement_one([5, 4], aux128, aux18)
watchelement_one([5, 4], aux127, aux19)
watchelement_one([4, 5], aux148, M_00001_00005)
watchelement_one([4, 5], aux147, M_00001_00004)
watchelement_one([4, 5], aux157, M_00005_00005)
watchelement_one([4, 5], aux116, M_00005_00004)
watchelement_one([2, 1], M_00001_00001, aux24)
watchelement_one([2, 1], M_00001_00002, aux25)
watchelement_one([M_00003_00001, M_00003_00002], M_00005_00002, aux26)
watchelement_one([M_00003_00001, M_00003_00002], M_00005_00001, aux27)
watchelement_one([2, 1], M_00003_00001, aux28)
watchelement_one([2, 1], M_00003_00002, aux29)
watchelement_one([1, 2], M_00002_00002, M_00002_00002)
watchelement_one([1, 2], M_00002_00001, M_00002_00001)
watchelement_one([1, 2], M_00004_00001, M_00004_00001)
watchelement_one([1, 2], M_00004_00002, M_00004_00002)
watchelement_one([2, 1], M_00002_00002, aux34)
watchelement_one([2, 1], M_00002_00001, aux35)
watchelement_one([1, 2], M_00001_00002, M_00001_00002)
watchelement_one([1, 2], M_00001_00001, M_00001_00001)
watchelement_one([2, 1], M_00005_00001, aux38)
watchelement_one([2, 1], M_00005_00002, aux39)
watchelement_one([1, 2], M_00005_00001, M_00005_00001)
watchelement_one([1, 2], M_00005_00002, M_00005_00002)
watchelement_one([M_00003_00001, M_00003_00002], M_00004_00001, aux42)
watchelement_one([M_00003_00001, M_00003_00002], M_00004_00002, aux43)
watchelement_one([2, 1], M_00004_00002, aux44)
watchelement_one([2, 1], M_00004_00001, aux45)
watchelement_one([1, 2], M_00003_00002, M_00003_00002)
watchelement_one([1, 2], M_00003_00001, M_00003_00001)
gacalldiff([M_00001_00001, M_00001_00002, M_00001_00004, M_00001_00005])
gacalldiff([M_00002_00001, M_00002_00002, M_00002_00004, M_00002_00005])
gacalldiff([M_00003_00001, M_00003_00002, M_00003_00004, M_00003_00005])
gacalldiff([M_00004_00001, M_00004_00002, M_00004_00004, M_00004_00005])
gacalldiff([M_00005_00001, M_00005_00002, M_00005_00004, M_00005_00005])
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux144, 3)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux143, 3)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux82, aux42)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux79, aux43)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux146, 3)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux139, aux12)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux77, aux13)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux80, aux27)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux78, aux26)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux145, 3)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux83, aux7)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux140, aux6)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux70, aux42)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux66, aux43)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux156, 3)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux151, aux12)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux65, aux13)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux88, aux42)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux86, aux43)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux135, 3)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux136, aux12)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux84, aux13)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux69, aux27)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux67, aux26)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux149, 3)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux71, aux7)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux153, aux6)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux87, aux27)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux89, aux26)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux134, 3)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux85, aux7)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux137, aux6)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux124, M_00001_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux106, M_00001_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux121, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux104, M_00001_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux105, M_00001_00005)
watchelement_one([1, 1, 3, 4, 5, 2], aux107, M_00001_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux123, M_00001_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux122, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux102, M_00001_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux103, M_00001_00005)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux100, M_00001_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux98, M_00001_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux120, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux117, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux96, 3)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux99, M_00001_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux101, M_00001_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux119, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux97, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux118, 3)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux109, M_00002_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux56, M_00002_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux108, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux55, M_00002_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux54, M_00002_00005)
watchelement_one([1, 1, 3, 4, 5, 2], aux48, M_00002_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux111, M_00002_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux114, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux58, M_00002_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux59, M_00002_00005)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux51, M_00002_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux49, M_00002_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux115, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux112, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux57, 3)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux52, M_00002_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux50, M_00002_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux113, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux53, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux110, 3)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux141, M_00003_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux75, M_00003_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux144, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux74, M_00003_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux76, M_00003_00005)
watchelement_one([1, 1, 3, 4, 5, 2], aux81, M_00003_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux142, M_00003_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux143, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux73, M_00003_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux72, M_00003_00005)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux82, M_00003_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux79, M_00003_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux146, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux139, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux77, 3)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux80, M_00003_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux78, M_00003_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux145, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux83, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux140, 3)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux150, M_00004_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux60, M_00004_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux155, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux62, M_00004_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux61, M_00004_00005)
watchelement_one([1, 1, 3, 4, 5, 2], aux68, M_00004_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux152, M_00004_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux154, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux63, M_00004_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux64, M_00004_00005)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux70, M_00004_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux66, M_00004_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux156, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux151, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux65, 3)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux69, M_00004_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux67, M_00004_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux149, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux71, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux153, 3)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux130, M_00005_00001)
watchelement_one([1, 1, 3, 4, 5, 2], aux91, M_00005_00001)
watchelement_one([3, 4, 5, 2, 2, 3], aux132, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux94, M_00005_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux95, M_00005_00005)
watchelement_one([1, 1, 3, 4, 5, 2], aux90, M_00005_00002)
watchelement_one([1, 1, 3, 4, 5, 2, 2], aux131, M_00005_00002)
watchelement_one([3, 4, 5, 2, 2, 3], aux133, 3)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux93, M_00005_00004)
watchelement_one([4, 5, 2, 2, 3, 4, 5], aux92, M_00005_00005)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux88, M_00005_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux86, M_00005_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux135, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux136, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux84, 3)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux87, M_00005_00001)
watchelement_one([1, 2, 3, 3, 3, 1, 2], aux89, M_00005_00002)
watchelement_one([3, 3, 3, 1, 2, 3], aux134, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux85, 3)
watchelement_one([3, 3, 1, 2, 3, 3, 3], aux137, 3)
lexleq([M_00001_00004, M_00001_00005, M_00002_00004, M_00002_00005, M_00003_00004, M_00003_00005, M_00004_00001, M_00004_00002, M_00004_00004, M_00004_00005, M_00005_00004, M_00005_00005],[aux1, aux0, aux11, aux10, aux9, aux8, M_00005_00001, M_00005_00002, aux17, aux16, aux19, aux18])
lexleq([M_00001_00001, M_00001_00002, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002, M_00005_00001, M_00005_00002],[aux34, aux35, M_00002_00004, M_00002_00005, aux25, aux24, aux29, aux28, aux44, aux45, aux39, aux38])
lexleq([M_00001_00001, M_00001_00002, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, M_00002_00004, M_00002_00005, M_00003_00001, M_00003_00002, M_00003_00004, M_00003_00005, M_00004_00001, M_00004_00002, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, M_00005_00004, M_00005_00005],[aux34, aux35, aux11, aux10, aux25, aux24, aux1, aux0, aux29, aux28, aux9, aux8, aux39, aux38, aux17, aux16, aux44, aux45, aux19, aux18])
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux124, aux158)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux109, aux158)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux56, aux159)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux106, aux159)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux121, aux160)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux108, aux160)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux104, aux161)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux55, aux161)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux105, aux162)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux54, aux162)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux141, aux163)
watchelement_one([M_00003_00001, M_00003_00002], M_00001_00001, aux163)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux75, aux164)
watchelement_one([M_00003_00001, M_00003_00002], M_00001_00002, aux164)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux74, aux165)
watchelement_one([M_00003_00004, M_00003_00005], aux147, aux165)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux76, aux166)
watchelement_one([M_00003_00004, M_00003_00005], aux148, aux166)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux150, aux167)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux100, aux167)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux60, aux168)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux98, aux168)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux155, aux169)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux120, aux169)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux117, aux170)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux62, aux170)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux96, aux171)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux61, aux171)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux130, aux172)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux99, aux172)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux91, aux173)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux101, aux173)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux132, aux174)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux119, aux174)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux97, aux175)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux94, aux175)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux118, aux176)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux95, aux176)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux48, aux177)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux107, aux177)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux123, aux178)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux111, aux178)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux122, aux179)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux114, aux179)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux102, aux180)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux58, aux180)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux103, aux181)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux59, aux181)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux81, aux182)
watchelement_one([M_00003_00001, M_00003_00002], M_00002_00001, aux182)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux142, aux183)
watchelement_one([M_00003_00001, M_00003_00002], M_00002_00002, aux183)
watchelement_one([M_00003_00004, M_00003_00005], aux138, aux184)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux73, aux184)
watchelement_one([M_00003_00004, M_00003_00005], aux129, aux185)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux72, aux185)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux68, aux186)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux51, aux186)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux49, aux187)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux152, aux187)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux154, aux188)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux115, aux188)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux112, aux189)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux63, aux189)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux64, aux190)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux57, aux190)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001], aux90, aux191)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux52, aux191)
watchelement_one([M_00004_00001, M_00004_00002, 3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002], aux50, aux192)
watchelement_one([M_00001_00001, M_00001_00002, 3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002], aux131, aux192)
watchelement_one([3, M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3], aux133, aux193)
watchelement_one([3, M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3], aux113, aux193)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux93, aux194)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux53, aux194)
watchelement_one([M_00004_00004, M_00004_00005, M_00005_00001, M_00005_00002, 3, M_00005_00004, M_00005_00005], aux110, aux195)
watchelement_one([M_00001_00004, M_00001_00005, M_00002_00001, M_00002_00002, 3, M_00002_00004, M_00002_00005], aux92, aux195)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00002,-5],aux48)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00002,-5],aux48)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00004,-20],aux49)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00004,-20],aux49)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00005,-20],aux50)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00005,-20],aux50)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00004,-20],aux51)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00004,-20],aux51)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00005,-20],aux52)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00005,-20],aux52)
weightedsumleq([1,5,1],[M_00002_00004,M_00002_00005,-23],aux53)
weightedsumgeq([1,5,1],[M_00002_00004,M_00002_00005,-23],aux53)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00005,-8],aux54)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00005,-8],aux54)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00004,-8],aux55)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00004,-8],aux55)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00002,-5],aux56)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00002,-5],aux56)
weightedsumleq([5,1,1],[M_00002_00004,M_00002_00005,-23],aux57)
weightedsumgeq([5,1,1],[M_00002_00004,M_00002_00005,-23],aux57)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00004,-8],aux58)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00004,-8],aux58)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00005,-8],aux59)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00005,-8],aux59)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00002,-5],aux60)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00002,-5],aux60)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00005,-8],aux61)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00005,-8],aux61)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00004,-8],aux62)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00004,-8],aux62)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00004,-8],aux63)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00004,-8],aux63)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00005,-8],aux64)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00005,-8],aux64)
weightedsumleq([5,1,1],[M_00004_00004,M_00004_00005,-23],aux65)
weightedsumgeq([5,1,1],[M_00004_00004,M_00004_00005,-23],aux65)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00004,-20],aux66)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00004,-20],aux66)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00005,-20],aux67)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00005,-20],aux67)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00002,-5],aux68)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00002,-5],aux68)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00005,-20],aux69)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00005,-20],aux69)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00004,-20],aux70)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00004,-20],aux70)
weightedsumleq([1,5,1],[M_00004_00004,M_00004_00005,-23],aux71)
weightedsumgeq([1,5,1],[M_00004_00004,M_00004_00005,-23],aux71)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00005,-8],aux72)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00005,-8],aux72)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-8],aux73)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-8],aux73)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00004,-8],aux74)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00004,-8],aux74)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00002,-5],aux75)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00002,-5],aux75)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00005,-8],aux76)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00005,-8],aux76)
weightedsumleq([5,1,1],[M_00003_00004,M_00003_00005,-23],aux77)
weightedsumgeq([5,1,1],[M_00003_00004,M_00003_00005,-23],aux77)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00005,-20],aux78)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00005,-20],aux78)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-20],aux79)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-20],aux79)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00005,-20],aux80)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00005,-20],aux80)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00002,-5],aux81)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00002,-5],aux81)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00004,-20],aux82)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00004,-20],aux82)
weightedsumleq([1,5,1],[M_00003_00004,M_00003_00005,-23],aux83)
weightedsumgeq([1,5,1],[M_00003_00004,M_00003_00005,-23],aux83)
weightedsumleq([1,5,1],[-23,M_00005_00004,M_00005_00005],aux84)
weightedsumgeq([1,5,1],[-23,M_00005_00004,M_00005_00005],aux84)
weightedsumleq([1,1,5],[-23,M_00005_00004,M_00005_00005],aux85)
weightedsumgeq([1,1,5],[-23,M_00005_00004,M_00005_00005],aux85)
weightedsumleq([1,1,5],[-20,M_00005_00002,M_00005_00004],aux86)
weightedsumgeq([1,1,5],[-20,M_00005_00002,M_00005_00004],aux86)
weightedsumleq([1,1,5],[-20,M_00005_00001,M_00005_00005],aux87)
weightedsumgeq([1,1,5],[-20,M_00005_00001,M_00005_00005],aux87)
weightedsumleq([1,1,5],[-20,M_00005_00001,M_00005_00004],aux88)
weightedsumgeq([1,1,5],[-20,M_00005_00001,M_00005_00004],aux88)
weightedsumleq([1,1,5],[-20,M_00005_00002,M_00005_00005],aux89)
weightedsumgeq([1,1,5],[-20,M_00005_00002,M_00005_00005],aux89)
weightedsumleq([1,1,5],[-5,M_00005_00001,M_00005_00002],aux90)
weightedsumgeq([1,1,5],[-5,M_00005_00001,M_00005_00002],aux90)
weightedsumleq([1,5,1],[-5,M_00005_00001,M_00005_00002],aux91)
weightedsumgeq([1,5,1],[-5,M_00005_00001,M_00005_00002],aux91)
weightedsumleq([1,5,1],[-8,M_00005_00002,M_00005_00005],aux92)
weightedsumgeq([1,5,1],[-8,M_00005_00002,M_00005_00005],aux92)
weightedsumleq([1,5,1],[-8,M_00005_00002,M_00005_00004],aux93)
weightedsumgeq([1,5,1],[-8,M_00005_00002,M_00005_00004],aux93)
weightedsumleq([1,5,1],[-8,M_00005_00001,M_00005_00004],aux94)
weightedsumgeq([1,5,1],[-8,M_00005_00001,M_00005_00004],aux94)
weightedsumleq([1,5,1],[-8,M_00005_00001,M_00005_00005],aux95)
weightedsumgeq([1,5,1],[-8,M_00005_00001,M_00005_00005],aux95)
weightedsumleq([1,5,1],[-23,M_00001_00004,M_00001_00005],aux96)
weightedsumgeq([1,5,1],[-23,M_00001_00004,M_00001_00005],aux96)
weightedsumleq([1,1,5],[-23,M_00001_00004,M_00001_00005],aux97)
weightedsumgeq([1,1,5],[-23,M_00001_00004,M_00001_00005],aux97)
weightedsumleq([1,1,5],[-20,M_00001_00002,M_00001_00004],aux98)
weightedsumgeq([1,1,5],[-20,M_00001_00002,M_00001_00004],aux98)
weightedsumleq([1,1,5],[-20,M_00001_00001,M_00001_00005],aux99)
weightedsumgeq([1,1,5],[-20,M_00001_00001,M_00001_00005],aux99)
weightedsumleq([1,1,5],[-20,M_00001_00001,M_00001_00004],aux100)
weightedsumgeq([1,1,5],[-20,M_00001_00001,M_00001_00004],aux100)
weightedsumleq([1,1,5],[-20,M_00001_00002,M_00001_00005],aux101)
weightedsumgeq([1,1,5],[-20,M_00001_00002,M_00001_00005],aux101)
weightedsumleq([1,5,1],[-8,M_00001_00002,M_00001_00004],aux102)
weightedsumgeq([1,5,1],[-8,M_00001_00002,M_00001_00004],aux102)
weightedsumleq([1,5,1],[-8,M_00001_00002,M_00001_00005],aux103)
weightedsumgeq([1,5,1],[-8,M_00001_00002,M_00001_00005],aux103)
weightedsumleq([1,5,1],[-8,M_00001_00001,M_00001_00004],aux104)
weightedsumgeq([1,5,1],[-8,M_00001_00001,M_00001_00004],aux104)
weightedsumleq([1,5,1],[-8,M_00001_00001,M_00001_00005],aux105)
weightedsumgeq([1,5,1],[-8,M_00001_00001,M_00001_00005],aux105)
weightedsumleq([1,5,1],[-5,M_00001_00001,M_00001_00002],aux106)
weightedsumgeq([1,5,1],[-5,M_00001_00001,M_00001_00002],aux106)
weightedsumleq([1,1,5],[-5,M_00001_00001,M_00001_00002],aux107)
weightedsumgeq([1,1,5],[-5,M_00001_00001,M_00001_00002],aux107)
weightedsumleq([5,1],[M_00002_00001,-4],aux108)
weightedsumgeq([5,1],[M_00002_00001,-4],aux108)
weightedsumleq([6,1],[M_00002_00001,-5],aux109)
weightedsumgeq([6,1],[M_00002_00001,-5],aux109)
weightedsumleq([6,1],[M_00002_00005,-23],aux110)
weightedsumgeq([6,1],[M_00002_00005,-23],aux110)
weightedsumleq([6,1],[M_00002_00002,-5],aux111)
weightedsumgeq([6,1],[M_00002_00002,-5],aux111)
weightedsumleq([6,1],[M_00002_00004,-23],aux112)
weightedsumgeq([6,1],[M_00002_00004,-23],aux112)
weightedsumleq([5,1],[M_00002_00005,-19],aux113)
weightedsumgeq([5,1],[M_00002_00005,-19],aux113)
weightedsumleq([5,1],[M_00002_00002,-4],aux114)
weightedsumgeq([5,1],[M_00002_00002,-4],aux114)
weightedsumleq([5,1],[M_00002_00004,-19],aux115)
weightedsumgeq([5,1],[M_00002_00004,-19],aux115)
sumleq([-3,M_00005_00004],aux116)
sumgeq([-3,M_00005_00004],aux116)
weightedsumleq([1,6],[-23,M_00001_00004],aux117)
weightedsumgeq([1,6],[-23,M_00001_00004],aux117)
weightedsumleq([1,6],[-23,M_00001_00005],aux118)
weightedsumgeq([1,6],[-23,M_00001_00005],aux118)
weightedsumleq([1,5],[-19,M_00001_00005],aux119)
weightedsumgeq([1,5],[-19,M_00001_00005],aux119)
weightedsumleq([1,5],[-19,M_00001_00004],aux120)
weightedsumgeq([1,5],[-19,M_00001_00004],aux120)
weightedsumleq([1,5],[-4,M_00001_00001],aux121)
weightedsumgeq([1,5],[-4,M_00001_00001],aux121)
weightedsumleq([1,5],[-4,M_00001_00002],aux122)
weightedsumgeq([1,5],[-4,M_00001_00002],aux122)
weightedsumleq([1,6],[-5,M_00001_00002],aux123)
weightedsumgeq([1,6],[-5,M_00001_00002],aux123)
weightedsumleq([1,6],[-5,M_00001_00001],aux124)
weightedsumgeq([1,6],[-5,M_00001_00001],aux124)
sumleq([M_00003_00005,-3],aux125)
sumgeq([M_00003_00005,-3],aux125)
sumleq([M_00003_00004,-3],aux126)
sumgeq([M_00003_00004,-3],aux126)
sumleq([M_00004_00005,-3],aux127)
sumgeq([M_00004_00005,-3],aux127)
sumleq([M_00004_00004,-3],aux128)
sumgeq([M_00004_00004,-3],aux128)
sumleq([M_00002_00005,-3],aux129)
sumgeq([M_00002_00005,-3],aux129)
weightedsumleq([1,6],[-5,M_00005_00001],aux130)
weightedsumgeq([1,6],[-5,M_00005_00001],aux130)
weightedsumleq([1,6],[-5,M_00005_00002],aux131)
weightedsumgeq([1,6],[-5,M_00005_00002],aux131)
weightedsumleq([1,5],[-4,M_00005_00001],aux132)
weightedsumgeq([1,5],[-4,M_00005_00001],aux132)
weightedsumleq([1,5],[-4,M_00005_00002],aux133)
weightedsumgeq([1,5],[-4,M_00005_00002],aux133)
weightedsumleq([1,5],[-19,M_00005_00005],aux134)
weightedsumgeq([1,5],[-19,M_00005_00005],aux134)
weightedsumleq([1,5],[-19,M_00005_00004],aux135)
weightedsumgeq([1,5],[-19,M_00005_00004],aux135)
weightedsumleq([1,6],[-23,M_00005_00004],aux136)
weightedsumgeq([1,6],[-23,M_00005_00004],aux136)
weightedsumleq([1,6],[-23,M_00005_00005],aux137)
weightedsumgeq([1,6],[-23,M_00005_00005],aux137)
sumleq([M_00002_00004,-3],aux138)
sumgeq([M_00002_00004,-3],aux138)
weightedsumleq([6,1],[M_00003_00004,-23],aux139)
weightedsumgeq([6,1],[M_00003_00004,-23],aux139)
weightedsumleq([6,1],[M_00003_00005,-23],aux140)
weightedsumgeq([6,1],[M_00003_00005,-23],aux140)
weightedsumleq([6,1],[M_00003_00001,-5],aux141)
weightedsumgeq([6,1],[M_00003_00001,-5],aux141)
weightedsumleq([6,1],[M_00003_00002,-5],aux142)
weightedsumgeq([6,1],[M_00003_00002,-5],aux142)
weightedsumleq([5,1],[M_00003_00002,-4],aux143)
weightedsumgeq([5,1],[M_00003_00002,-4],aux143)
weightedsumleq([5,1],[M_00003_00001,-4],aux144)
weightedsumgeq([5,1],[M_00003_00001,-4],aux144)
weightedsumleq([5,1],[M_00003_00005,-19],aux145)
weightedsumgeq([5,1],[M_00003_00005,-19],aux145)
weightedsumleq([5,1],[M_00003_00004,-19],aux146)
weightedsumgeq([5,1],[M_00003_00004,-19],aux146)
sumleq([-3,M_00001_00004],aux147)
sumgeq([-3,M_00001_00004],aux147)
sumleq([-3,M_00001_00005],aux148)
sumgeq([-3,M_00001_00005],aux148)
weightedsumleq([5,1],[M_00004_00005,-19],aux149)
weightedsumgeq([5,1],[M_00004_00005,-19],aux149)
weightedsumleq([6,1],[M_00004_00001,-5],aux150)
weightedsumgeq([6,1],[M_00004_00001,-5],aux150)
weightedsumleq([6,1],[M_00004_00004,-23],aux151)
weightedsumgeq([6,1],[M_00004_00004,-23],aux151)
weightedsumleq([6,1],[M_00004_00002,-5],aux152)
weightedsumgeq([6,1],[M_00004_00002,-5],aux152)
weightedsumleq([6,1],[M_00004_00005,-23],aux153)
weightedsumgeq([6,1],[M_00004_00005,-23],aux153)
weightedsumleq([5,1],[M_00004_00002,-4],aux154)
weightedsumgeq([5,1],[M_00004_00002,-4],aux154)
weightedsumleq([5,1],[M_00004_00001,-4],aux155)
weightedsumgeq([5,1],[M_00004_00001,-4],aux155)
weightedsumleq([5,1],[M_00004_00004,-19],aux156)
weightedsumgeq([5,1],[M_00004_00004,-19],aux156)
sumleq([-3,M_00005_00005],aux157)
sumgeq([-3,M_00005_00005],aux157)
**EOF**
