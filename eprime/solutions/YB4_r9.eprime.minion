MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 54
# CSE_active_eliminated_expressions = 150
# CSE_active_total_size = 310
**VARIABLES**
DISCRETE M_00001_00003 #
{3..4}
DISCRETE M_00001_00004 #
{3..4}
DISCRETE M_00002_00003 #
{3..4}
DISCRETE M_00002_00004 #
{3..4}
DISCRETE M_00003_00003 #
{3..4}
DISCRETE M_00003_00004 #
{3..4}
DISCRETE M_00004_00003 #
{3..4}
DISCRETE M_00004_00004 #
{3..4}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], (4*M_00004_00003 + M_00004_00004 + -14))
{1..4}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], (5*M_00004_00003 + -14))
{1..4}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, M_00003_00003, M_00003_00004, 1, 2], (4*M_00004_00003 + -11))
{1..4}
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2, M_00003_00003, M_00003_00004, 1], (4*M_00004_00003 + -11))
{1..4}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00004_00003 + -2))
{3..4}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00004_00004 + -2))
{3..4}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00003_00004 + -2))
{3..4}
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00003_00003 + -2))
{3..4}
DISCRETE aux20 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00002_00003 + -2))
{3..4}
DISCRETE aux21 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00002_00004 + -2))
{3..4}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00003 + M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux22, [1,2,5,6])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 4*M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux23, [1,2,5,6])
**VARIABLES**
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00003 + M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux24, [1,2,5,6])
**VARIABLES**
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 4*M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux25, [1,2,5,6])
**VARIABLES**
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 4*M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux26, [1,2,5,6])
**VARIABLES**
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00003 + M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux27, [1,2,5,6])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + M_00001_00003 + 4*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux28, [1,2,5,6])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 4*M_00001_00003 + M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux29, [1,2,5,6])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00004_00004 + -11)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux30, [1,1,5,5])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux31, [1,1,6,6])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux32, [1,1,6,6])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00004 + -2)
{1..2}
DISCRETE aux34 #Active-CSE: 4 occurrences of this expression or equivalent: (-11 + 4*M_00001_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux34, [1,1,5,5])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 4 occurrences of this expression or equivalent: (-11 + 4*M_00001_00004)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux35, [1,1,5,5])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00003_00004 + -2)
{1..2}
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux37, [1,1,6,6])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux38, [1,1,6,6])
**VARIABLES**
DISCRETE aux39 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00002_00003 + -2)
{1..2}
DISCRETE aux40 #Active-CSE: 4 occurrences of this expression or equivalent: (-2 + M_00001_00004)
{1..2}
DISCRETE aux41 #Active-CSE: 4 occurrences of this expression or equivalent: (-2 + M_00001_00003)
{1..2}
DISCRETE aux42 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00003_00003 + -2)
{1..2}
DISCRETE aux43 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00004_00003 + -11)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux43, [1,1,5,5])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00002_00004 + -2)
{1..2}
DISCRETE aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux45, [1,1,6,6])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00003 + -2)
{1..2}
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux47, [1,1,6,6])
**VARIABLES**
DISCRETE aux48 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00002_00003 + -11)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux48, [1,1,5,5])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00002_00004 + -11)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux49, [1,1,5,5])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00003_00004 + -11)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux50, [1,1,5,5])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00003_00003 + -11)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux51, [1,1,5,5])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux52, [1,1,6,6])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux53, [1,1,6,6])
**VARIABLES**
DISCRETE aux54 #ElementOne([4, 3], aux40)
{3..4}
DISCRETE aux55 #ElementOne([4, 3], aux41)
{3..4}
DISCRETE aux56 #ElementOne([4, 3], aux44)
{3..4}
DISCRETE aux57 #ElementOne([4, 3], aux39)
{3..4}
DISCRETE aux58 #ElementOne([4, 3], aux33)
{3..4}
DISCRETE aux59 #ElementOne([4, 3], aux46)
{3..4}
DISCRETE aux60 #ElementOne([4, 3], aux36)
{3..4}
DISCRETE aux61 #ElementOne([4, 3], aux42)
{3..4}
**TUPLELIST**
rack 4 4
1 2 3 4 
1 1 1 1 
1 4 1 4 
1 3 3 1 
**VARIABLES**
ALIAS rack[4,4]=[[1, 2, 3, 4], [1, 1, 1, 1], [1, 4, 1, 4], [1, 3, 3, 1]]
**TUPLELIST**
perms 2 4
1 2 3 4 
1 2 4 3 
**VARIABLES**
ALIAS perms[2,4]=[[1, 2, 3, 4], [1, 2, 4, 3]]
**TUPLELIST**
inverses 2 4
1 2 3 4 
1 2 4 3 
**VARIABLES**
ALIAS inverses[2,4]=[[1, 2, 3, 4], [1, 2, 4, 3]]
**SEARCH**
PRINT[[M_00001_00003],[M_00001_00004],[M_00002_00003],[M_00002_00004],[M_00003_00003],[M_00003_00004],[M_00004_00003],[M_00004_00004]]
VARORDER STATIC [M_00001_00003, M_00001_00004, M_00002_00003, M_00002_00004, M_00003_00003, M_00003_00004, M_00004_00003, M_00004_00004]
**CONSTRAINTS**
watchelement_one([4, 3], aux40, aux54)
watchelement_one([4, 3], aux41, aux55)
watchelement_one([4, 3], aux44, aux56)
watchelement_one([4, 3], aux39, aux57)
watchelement_one([4, 3], aux33, aux58)
watchelement_one([4, 3], aux46, aux59)
watchelement_one([4, 3], aux36, aux60)
watchelement_one([4, 3], aux42, aux61)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux22, aux0)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux25, aux2)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux52, aux2)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux47, aux0)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 1], aux50, aux6)
watchelement_one([2, M_00003_00003, M_00003_00004, 1, 2], aux43, aux5)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 1], aux43, aux6)
watchelement_one([2, M_00003_00003, M_00003_00004, 1, 2], aux50, aux5)
watchelement_one([3, 4], aux41, M_00001_00003)
watchelement_one([3, 4], aux40, M_00001_00004)
watchelement_one([3, 4], aux42, M_00003_00003)
watchelement_one([3, 4], aux36, M_00003_00004)
watchelement_one([3, 4], aux44, M_00002_00004)
watchelement_one([3, 4], aux39, M_00002_00003)
watchelement_one([M_00001_00003, M_00001_00004], aux46, aux14)
watchelement_one([M_00001_00003, M_00001_00004], aux33, aux15)
watchelement_one([3, 4], aux33, M_00004_00004)
watchelement_one([3, 4], aux46, M_00004_00003)
watchelement_one([M_00001_00003, M_00001_00004], aux36, aux18)
watchelement_one([M_00001_00003, M_00001_00004], aux42, aux19)
watchelement_one([M_00001_00003, M_00001_00004], aux39, aux20)
watchelement_one([M_00001_00003, M_00001_00004], aux44, aux21)
diseq(M_00001_00003,M_00001_00004)
diseq(M_00002_00003,M_00002_00004)
diseq(M_00003_00003,M_00003_00004)
diseq(M_00004_00003,M_00004_00004)
watchelement_one([M_00002_00003, M_00002_00004], aux41, aux20)
watchelement_one([M_00002_00003, M_00002_00004], aux40, aux21)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 1], aux34, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 1, 2], aux34, 2)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux38, aux19)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux29, aux18)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 1], aux35, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 1, 2], aux35, 2)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux28, aux14)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux37, aux15)
watchelement_one([M_00002_00003, M_00002_00004], aux39, aux20)
watchelement_one([M_00002_00003, M_00002_00004], aux44, aux21)
watchelement_one([M_00002_00003, M_00002_00004], aux42, aux20)
watchelement_one([M_00002_00003, M_00002_00004], aux36, aux21)
watchelement_one([M_00002_00003, M_00002_00004], aux46, aux20)
watchelement_one([M_00002_00003, M_00002_00004], aux33, aux21)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 1], aux48, aux6)
watchelement_one([2, M_00003_00003, M_00003_00004, 1, 2], aux48, aux5)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux31, aux2)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux24, aux0)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 1], aux51, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 1, 2], aux51, 2)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux45, aux19)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux27, aux18)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 1], aux49, aux6)
watchelement_one([2, M_00003_00003, M_00003_00004, 1, 2], aux49, aux5)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux23, aux2)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux32, aux0)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 1], aux30, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 1, 2], aux30, 2)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux26, aux14)
watchelement_one([M_00003_00003, M_00003_00004, 1, 2, M_00004_00003, M_00004_00004], aux53, aux15)
watchelement_one([1, 1], aux41, 1)
watchelement_one([1, 1], aux40, 1)
watchelement_one([1, 4, 1, 4, 1], aux34, 1)
watchelement_one([4, 1, 4, 1, 3], aux34, M_00001_00004)
watchelement_one([1, 4, 1, 3, 3, 1], aux38, 1)
watchelement_one([1, 4, 1, 3, 3, 1], aux29, M_00001_00004)
watchelement_one([1, 4, 1, 4, 1], aux35, 1)
watchelement_one([4, 1, 4, 1, 3], aux35, M_00001_00003)
watchelement_one([1, 4, 1, 3, 3, 1], aux28, M_00001_00003)
watchelement_one([1, 4, 1, 3, 3, 1], aux37, 1)
watchelement_one([1, 1], aux39, 1)
watchelement_one([1, 1], aux44, 1)
watchelement_one([1, 4, 1, 4, 1], aux48, 1)
watchelement_one([4, 1, 4, 1, 3], aux48, M_00002_00004)
watchelement_one([1, 4, 1, 3, 3, 1], aux31, 1)
watchelement_one([1, 4, 1, 3, 3, 1], aux24, M_00002_00004)
watchelement_one([1, 4, 1, 4, 1], aux49, 1)
watchelement_one([4, 1, 4, 1, 3], aux49, M_00002_00003)
watchelement_one([1, 4, 1, 3, 3, 1], aux23, M_00002_00003)
watchelement_one([1, 4, 1, 3, 3, 1], aux32, 1)
watchelement_one([1, 1], aux42, 1)
watchelement_one([1, 1], aux36, 1)
watchelement_one([1, 4, 1, 4, 1], aux51, 1)
watchelement_one([4, 1, 4, 1, 3], aux51, M_00003_00004)
watchelement_one([1, 4, 1, 3, 3, 1], aux45, 1)
watchelement_one([1, 4, 1, 3, 3, 1], aux27, M_00003_00004)
watchelement_one([1, 4, 1, 4, 1], aux50, 1)
watchelement_one([4, 1, 4, 1, 3], aux50, M_00003_00003)
watchelement_one([1, 4, 1, 3, 3, 1], aux25, M_00003_00003)
watchelement_one([1, 4, 1, 3, 3, 1], aux47, 1)
watchelement_one([1, 1], aux46, 1)
watchelement_one([1, 1], aux33, 1)
watchelement_one([1, 4, 1, 4, 1], aux43, 1)
watchelement_one([4, 1, 4, 1, 3], aux43, M_00004_00004)
watchelement_one([1, 4, 1, 3, 3, 1], aux52, 1)
watchelement_one([1, 4, 1, 3, 3, 1], aux22, M_00004_00004)
watchelement_one([1, 4, 1, 4, 1], aux30, 1)
watchelement_one([4, 1, 4, 1, 3], aux30, M_00004_00003)
watchelement_one([1, 4, 1, 3, 3, 1], aux26, M_00004_00003)
watchelement_one([1, 4, 1, 3, 3, 1], aux53, 1)
lexleq([M_00001_00003, M_00001_00004, M_00002_00003, M_00002_00004, M_00003_00003, M_00003_00004, M_00004_00003, M_00004_00004],[aux54, aux55, aux56, aux57, aux58, aux59, aux60, aux61])
weightedsumleq([4,1,1],[M_00004_00003,M_00004_00004,-14],aux22)
weightedsumgeq([4,1,1],[M_00004_00003,M_00004_00004,-14],aux22)
weightedsumleq([1,4,1],[M_00002_00003,M_00002_00004,-14],aux23)
weightedsumgeq([1,4,1],[M_00002_00003,M_00002_00004,-14],aux23)
weightedsumleq([4,1,1],[M_00002_00003,M_00002_00004,-14],aux24)
weightedsumgeq([4,1,1],[M_00002_00003,M_00002_00004,-14],aux24)
weightedsumleq([1,4,1],[M_00003_00003,M_00003_00004,-14],aux25)
weightedsumgeq([1,4,1],[M_00003_00003,M_00003_00004,-14],aux25)
weightedsumleq([1,4,1],[M_00004_00003,M_00004_00004,-14],aux26)
weightedsumgeq([1,4,1],[M_00004_00003,M_00004_00004,-14],aux26)
weightedsumleq([4,1,1],[M_00003_00003,M_00003_00004,-14],aux27)
weightedsumgeq([4,1,1],[M_00003_00003,M_00003_00004,-14],aux27)
weightedsumleq([1,1,4],[-14,M_00001_00003,M_00001_00004],aux28)
weightedsumgeq([1,1,4],[-14,M_00001_00003,M_00001_00004],aux28)
weightedsumleq([1,4,1],[-14,M_00001_00003,M_00001_00004],aux29)
weightedsumgeq([1,4,1],[-14,M_00001_00003,M_00001_00004],aux29)
weightedsumleq([4,1],[M_00004_00004,-11],aux30)
weightedsumgeq([4,1],[M_00004_00004,-11],aux30)
weightedsumleq([5,1],[M_00002_00003,-14],aux31)
weightedsumgeq([5,1],[M_00002_00003,-14],aux31)
weightedsumleq([5,1],[M_00002_00004,-14],aux32)
weightedsumgeq([5,1],[M_00002_00004,-14],aux32)
sumleq([M_00004_00004,-2],aux33)
sumgeq([M_00004_00004,-2],aux33)
weightedsumleq([1,4],[-11,M_00001_00003],aux34)
weightedsumgeq([1,4],[-11,M_00001_00003],aux34)
weightedsumleq([1,4],[-11,M_00001_00004],aux35)
weightedsumgeq([1,4],[-11,M_00001_00004],aux35)
sumleq([M_00003_00004,-2],aux36)
sumgeq([M_00003_00004,-2],aux36)
weightedsumleq([1,5],[-14,M_00001_00004],aux37)
weightedsumgeq([1,5],[-14,M_00001_00004],aux37)
weightedsumleq([1,5],[-14,M_00001_00003],aux38)
weightedsumgeq([1,5],[-14,M_00001_00003],aux38)
sumleq([M_00002_00003,-2],aux39)
sumgeq([M_00002_00003,-2],aux39)
sumleq([-2,M_00001_00004],aux40)
sumgeq([-2,M_00001_00004],aux40)
sumleq([-2,M_00001_00003],aux41)
sumgeq([-2,M_00001_00003],aux41)
sumleq([M_00003_00003,-2],aux42)
sumgeq([M_00003_00003,-2],aux42)
weightedsumleq([4,1],[M_00004_00003,-11],aux43)
weightedsumgeq([4,1],[M_00004_00003,-11],aux43)
sumleq([M_00002_00004,-2],aux44)
sumgeq([M_00002_00004,-2],aux44)
weightedsumleq([5,1],[M_00003_00003,-14],aux45)
weightedsumgeq([5,1],[M_00003_00003,-14],aux45)
sumleq([M_00004_00003,-2],aux46)
sumgeq([M_00004_00003,-2],aux46)
weightedsumleq([5,1],[M_00003_00004,-14],aux47)
weightedsumgeq([5,1],[M_00003_00004,-14],aux47)
weightedsumleq([4,1],[M_00002_00003,-11],aux48)
weightedsumgeq([4,1],[M_00002_00003,-11],aux48)
weightedsumleq([4,1],[M_00002_00004,-11],aux49)
weightedsumgeq([4,1],[M_00002_00004,-11],aux49)
weightedsumleq([4,1],[M_00003_00004,-11],aux50)
weightedsumgeq([4,1],[M_00003_00004,-11],aux50)
weightedsumleq([4,1],[M_00003_00003,-11],aux51)
weightedsumgeq([4,1],[M_00003_00003,-11],aux51)
weightedsumleq([5,1],[M_00004_00003,-14],aux52)
weightedsumgeq([5,1],[M_00004_00003,-14],aux52)
weightedsumleq([5,1],[M_00004_00004,-14],aux53)
weightedsumgeq([5,1],[M_00004_00004,-14],aux53)
**EOF**
