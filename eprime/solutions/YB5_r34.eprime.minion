MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 130
# CSE_active_eliminated_expressions = 268
# CSE_active_total_size = 706
**VARIABLES**
DISCRETE M_00001_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00001_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00001_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00001_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00001_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00001_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00001_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00001_00004, [2,2,4,4])
**VARIABLES**
DISCRETE M_00002_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00002_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00002_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00002_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00002_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00002_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00002_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00002_00004, [2,2,4,4])
**VARIABLES**
DISCRETE M_00003_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00003_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00003_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00003_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00003_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00003_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00003_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00003_00004, [2,2,4,4])
**VARIABLES**
DISCRETE M_00004_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00004_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00004_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00004_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00004_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00004_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00004_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00004_00004, [2,2,4,4])
**VARIABLES**
DISCRETE M_00005_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00005_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00005_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00005_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00005_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00005_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00005_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00005_00004, [2,2,4,4])
**VARIABLES**
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00004_00003 + M_00004_00004 + -6))
{1..5}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (M_00004_00002 + 5*M_00004_00003 + -6))
{1..5}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (5*M_00002_00001 + M_00002_00003 + -5))
{1..5}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00002_00001 + M_00002_00004 + -6))
{1..5}
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00002_00001 + M_00002_00002 + -6))
{1..5}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (M_00004_00001 + 5*M_00004_00003 + -5))
{1..5}
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (6*M_00002_00001 + -5))
{1..5}
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (6*M_00004_00003 + -5))
{1..5}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], (5*M_00004_00003 + -4))
{1..5}
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], (5*M_00002_00001 + -4))
{1..5}
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux30, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00003 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux31, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux32, [3,3,11,11])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00002 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux33, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux34, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00003 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux35, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux36, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux37, [3,3,11,11])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux38, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00003 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux39, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux40 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux40, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux41 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux41, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00002 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux42, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux43, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux44, [3,3,11,11])
**VARIABLES**
DISCRETE aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux45, [3,3,11,11])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00002 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux46, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux47, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux48, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00003 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux49, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux50, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux51, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00002 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux52, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux53, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux54, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00003 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux55, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux56, [3,3,11,11])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux57, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00002 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux58, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux59, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux60, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00002 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux61, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux62, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00002 + 5*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux63, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 5*M_00005_00001 + M_00005_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux64, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 5*M_00005_00001 + M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux65, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 5*M_00005_00003 + M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux66, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00005_00001 + 5*M_00005_00003)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux67, [3,3,11,11])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + M_00005_00002 + 5*M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux68, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 5*M_00005_00001 + M_00005_00003)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux69, [3,3,11,11])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + 5*M_00005_00002 + M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux70, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00002 + M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux71, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00005_00001 + 5*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux72, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00005_00001 + 5*M_00005_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux73, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00005_00003 + 5*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux74, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + M_00001_00002 + 5*M_00001_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux75, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00001_00001 + 5*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux76, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00001_00001 + 5*M_00001_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux77, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00001_00003 + 5*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux78, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00001_00002 + M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux79, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + 5*M_00001_00002 + M_00001_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux80, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00001_00001 + 5*M_00001_00003)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux81, [3,3,11,11])
**VARIABLES**
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 5*M_00001_00003 + M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux82, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00001_00002 + 5*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux83, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux84, [1,1,11,11])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux85, [1,1,13,13])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux86, [1,1,13,13])
**VARIABLES**
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux87, [1,1,13,13])
**VARIABLES**
DISCRETE aux88 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux88, [1,1,11,11])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux89, [1,1,11,11])
**VARIABLES**
DISCRETE aux90 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux90, [1,1,3,3])
**VARIABLES**
DISCRETE aux91 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux91, [1,1,3,3])
**VARIABLES**
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00001 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux92, [1,1,13,13])
**VARIABLES**
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux93, [1,1,11,11])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00001_00002)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux94, [1,1,3,3])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00001_00004)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux95, [1,1,3,3])
**VARIABLES**
DISCRETE aux96 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00004)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux96, [1,1,11,11])
**VARIABLES**
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00002)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux97, [1,1,11,11])
**VARIABLES**
DISCRETE aux98 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00003)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux98, [1,1,11,11])
**VARIABLES**
DISCRETE aux99 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00001_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux99, [1,1,13,13])
**VARIABLES**
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux100, [1,1,13,13])
**VARIABLES**
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux101, [1,1,13,13])
**VARIABLES**
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00001)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux102, [1,1,13,13])
**VARIABLES**
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux103, [1,1,13,13])
**VARIABLES**
DISCRETE aux104 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00005_00001)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux104, [1,1,11,11])
**VARIABLES**
DISCRETE aux105 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00005_00003)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux105, [1,1,11,11])
**VARIABLES**
DISCRETE aux106 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00002)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux106, [1,1,11,11])
**VARIABLES**
DISCRETE aux107 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00004)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux107, [1,1,11,11])
**VARIABLES**
DISCRETE aux108 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux108, [1,1,13,13])
**VARIABLES**
DISCRETE aux109 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux109, [1,1,13,13])
**VARIABLES**
DISCRETE aux110 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux110, [1,1,13,13])
**VARIABLES**
DISCRETE aux111 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00001 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux111, [1,1,13,13])
**VARIABLES**
DISCRETE aux112 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux112, [1,1,13,13])
**VARIABLES**
DISCRETE aux113 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux113, [1,1,11,11])
**VARIABLES**
DISCRETE aux114 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux114, [1,1,11,11])
**VARIABLES**
DISCRETE aux115 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux115, [1,1,11,11])
**VARIABLES**
DISCRETE aux116 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux116, [1,1,3,3])
**VARIABLES**
DISCRETE aux117 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00002 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux117, [1,1,3,3])
**VARIABLES**
DISCRETE aux118 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00002 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux118, [1,1,3,3])
**VARIABLES**
DISCRETE aux119 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux119, [1,1,3,3])
**VARIABLES**
DISCRETE aux120 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux120, [1,1,13,13])
**VARIABLES**
DISCRETE aux121 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux121, [1,1,11,11])
**VARIABLES**
DISCRETE aux122 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00001 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux122, [1,1,13,13])
**VARIABLES**
DISCRETE aux123 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux123, [1,1,13,13])
**VARIABLES**
DISCRETE aux124 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux124, [1,1,13,13])
**VARIABLES**
DISCRETE aux125 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux125, [1,1,11,11])
**VARIABLES**
DISCRETE aux126 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux126, [1,1,11,11])
**VARIABLES**
DISCRETE aux127 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux127, [1,1,11,11])
**VARIABLES**
DISCRETE aux128 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00005_00004)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux128, [1,1,3,3])
**VARIABLES**
DISCRETE aux129 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00005_00002)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux129, [1,1,3,3])
**VARIABLES**
DISCRETE aux130 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux81) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux111)
{1..5}
DISCRETE aux131 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux58) --- ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux75)
{1..5}
DISCRETE aux132 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux56) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux99)
{1..5}
DISCRETE aux133 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux57) --- ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux82)
{1..5}
DISCRETE aux134 #ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux114) --- ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux98)
{1..5}
DISCRETE aux135 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux122) --- ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux76)
{1..5}
DISCRETE aux136 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux46) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux83)
{1..5}
DISCRETE aux137 #ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux78) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux45)
{1..5}
DISCRETE aux138 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux47) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux100)
{1..5}
DISCRETE aux139 #ElementOne([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux96) --- ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux126)
{1..5}
DISCRETE aux140 #ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00001_00001) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux102)
{1..4}
DISCRETE aux141 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux64) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux94)
{1..4}
DISCRETE aux142 #ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00001_00003) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux69)
{1..4}
DISCRETE aux143 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux65) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux95)
{1..4}
DISCRETE aux144 #ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux61) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux37)
{1..5}
DISCRETE aux145 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux112) --- ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux35)
{1..5}
DISCRETE aux146 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux87) --- ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux55)
{1..5}
DISCRETE aux147 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux41) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux54)
{1..5}
DISCRETE aux148 #ElementOne([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux113) --- ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux89)
{1..5}
DISCRETE aux149 #ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux52) --- ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux36)
{1..5}
DISCRETE aux150 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux34) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux123)
{1..5}
DISCRETE aux151 #ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux49) --- ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux38)
{1..5}
DISCRETE aux152 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux48) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux85)
{1..5}
DISCRETE aux153 #ElementOne([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux125) --- ElementOne([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux88)
{1..5}
DISCRETE aux154 #ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux73) --- ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00002_00001)
{1..4}
DISCRETE aux155 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux109) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux117)
{1..4}
DISCRETE aux156 #ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux70) --- ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00002_00003)
{1..4}
DISCRETE aux157 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux71) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux116)
{1..4}
DISCRETE aux158 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux67) --- ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00003_00001)
{1..4}
DISCRETE aux159 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux68) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux118)
{1..4}
DISCRETE aux160 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux103) --- ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00003_00003)
{1..4}
DISCRETE aux161 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux66) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux119)
{1..4}
DISCRETE aux162 #ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00004_00001) --- ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux72)
{1..4}
DISCRETE aux163 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux63) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux90)
{1..4}
DISCRETE aux164 #ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00004_00003) --- ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux74)
{1..4}
DISCRETE aux165 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux108) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux91)
{1..4}
DISCRETE aux166 #(-5 + 6*M_00001_00001)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux166, [1,1,13,13])
**VARIABLES**
DISCRETE aux167 #(-6 + 5*M_00001_00001 + M_00001_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux167, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux168 #(-5 + 5*M_00001_00001 + M_00001_00003)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux168, [3,3,11,11])
**VARIABLES**
DISCRETE aux169 #(-6 + 5*M_00001_00001 + M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux169, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux170 #(-4 + 5*M_00001_00001)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux170, [1,1,11,11])
**VARIABLES**
DISCRETE aux171 #(M_00003_00001 + 5*M_00003_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux171, [3,3,11,11])
**VARIABLES**
DISCRETE aux172 #(M_00003_00002 + 5*M_00003_00003 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux172, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux173 #(6*M_00003_00003 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux173, [1,1,13,13])
**VARIABLES**
DISCRETE aux174 #(5*M_00003_00003 + M_00003_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux174, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux175 #(5*M_00003_00003 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux175, [1,1,11,11])
**VARIABLES**
DISCRETE aux176 #ElementOne([3, 4, 1], M_00003_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux176, [1,1,3,4])
**VARIABLES**
DISCRETE aux177 #ElementOne([4, 1, 2], aux119)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux177, [1,2,4,4])
**VARIABLES**
DISCRETE aux178 #ElementOne([3, 4, 1], M_00003_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux178, [1,1,3,4])
**VARIABLES**
DISCRETE aux179 #ElementOne([4, 1, 2], aux118)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux179, [1,2,4,4])
**VARIABLES**
DISCRETE aux180 #ElementOne([3, 4, 1], M_00004_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux180, [1,1,3,4])
**VARIABLES**
DISCRETE aux181 #ElementOne([4, 1, 2], aux91)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux181, [1,2,4,4])
**VARIABLES**
DISCRETE aux182 #ElementOne([3, 4, 1], M_00004_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux182, [1,1,3,4])
**VARIABLES**
DISCRETE aux183 #ElementOne([4, 1, 2], aux90)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux183, [1,2,4,4])
**VARIABLES**
DISCRETE aux184 #ElementOne([3, 4, 1], M_00001_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux184, [1,1,3,4])
**VARIABLES**
DISCRETE aux185 #ElementOne([4, 1, 2], aux95)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux185, [1,2,4,4])
**VARIABLES**
DISCRETE aux186 #ElementOne([3, 4, 1], M_00001_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux186, [1,1,3,4])
**VARIABLES**
DISCRETE aux187 #ElementOne([4, 1, 2], aux94)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux187, [1,2,4,4])
**VARIABLES**
DISCRETE aux188 #ElementOne([3, 4, 1], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux188, [1,1,3,4])
**VARIABLES**
DISCRETE aux189 #ElementOne([4, 1, 2], aux116)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux189, [1,2,4,4])
**VARIABLES**
DISCRETE aux190 #ElementOne([3, 4, 1], M_00002_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux190, [1,1,3,4])
**VARIABLES**
DISCRETE aux191 #ElementOne([4, 1, 2], aux117)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux191, [1,2,4,4])
**VARIABLES**
DISCRETE aux192 #ElementOne([3, 4, 1], M_00005_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux192, [1,1,3,4])
**VARIABLES**
DISCRETE aux193 #ElementOne([4, 1, 2], aux128)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux193, [1,2,4,4])
**VARIABLES**
DISCRETE aux194 #ElementOne([3, 4, 1], M_00005_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux194, [1,1,3,4])
**VARIABLES**
DISCRETE aux195 #ElementOne([4, 1, 2], aux129)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux195, [1,2,4,4])
**VARIABLES**
**TUPLELIST**
rack 5 5
1 2 3 4 5 
1 1 3 4 5 
1 2 3 4 5 
1 2 3 3 5 
1 2 3 4 5 
**VARIABLES**
ALIAS rack[5,5]=[[1, 2, 3, 4, 5], [1, 1, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 3, 5], [1, 2, 3, 4, 5]]
**TUPLELIST**
perms 2 5
1 2 3 4 5 
3 4 1 2 5 
**VARIABLES**
ALIAS perms[2,5]=[[1, 2, 3, 4, 5], [3, 4, 1, 2, 5]]
**TUPLELIST**
inverses 2 5
1 2 3 4 5 
3 4 1 2 5 
**VARIABLES**
ALIAS inverses[2,5]=[[1, 2, 3, 4, 5], [3, 4, 1, 2, 5]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00002_00001],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00003_00001],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00005_00001],[M_00005_00002],[M_00005_00003],[M_00005_00004]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004]
**CONSTRAINTS**
watchelement_one([3, 4, 1], M_00003_00003, aux176)
watchelement_one([4, 1, 2], aux119, aux177)
watchelement_one([3, 4, 1], M_00003_00001, aux178)
watchelement_one([4, 1, 2], aux118, aux179)
watchelement_one([3, 4, 1], M_00004_00003, aux180)
watchelement_one([4, 1, 2], aux91, aux181)
watchelement_one([3, 4, 1], M_00004_00001, aux182)
watchelement_one([4, 1, 2], aux90, aux183)
watchelement_one([3, 4, 1], M_00001_00003, aux184)
watchelement_one([4, 1, 2], aux95, aux185)
watchelement_one([3, 4, 1], M_00001_00001, aux186)
watchelement_one([4, 1, 2], aux94, aux187)
watchelement_one([3, 4, 1], M_00002_00003, aux188)
watchelement_one([4, 1, 2], aux116, aux189)
watchelement_one([3, 4, 1], M_00002_00001, aux190)
watchelement_one([4, 1, 2], aux117, aux191)
watchelement_one([3, 4, 1], M_00005_00003, aux192)
watchelement_one([4, 1, 2], aux128, aux193)
watchelement_one([3, 4, 1], M_00005_00001, aux194)
watchelement_one([4, 1, 2], aux129, aux195)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux30, aux0)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux31, aux1)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux44, aux2)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux43, aux3)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux42, aux4)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux32, aux5)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux92, aux6)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux120, aux7)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux121, aux8)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux93, aux9)
watchelement_one([2, 3, 4], aux118, M_00003_00002)
watchelement_one([2, 3, 4], aux119, M_00003_00004)
watchelement_one([2, 3, 4], aux129, M_00005_00002)
watchelement_one([2, 3, 4], aux128, M_00005_00004)
watchelement_one([2, 3, 4], aux91, M_00004_00004)
watchelement_one([2, 3, 4], aux90, M_00004_00002)
watchelement_one([2, 3, 4], aux116, M_00002_00004)
watchelement_one([2, 3, 4], aux117, M_00002_00002)
watchelement_one([2, 3, 4], aux94, M_00001_00002)
watchelement_one([2, 3, 4], aux95, M_00001_00004)
watchelement_one([1, 2, 3], M_00003_00003, M_00003_00003)
watchelement_one([1, 2, 3], M_00003_00001, M_00003_00001)
watchelement_one([1, 2, 3], M_00005_00003, M_00005_00003)
watchelement_one([1, 2, 3], M_00005_00001, M_00005_00001)
watchelement_one([1, 2, 3], M_00004_00001, M_00004_00001)
watchelement_one([1, 2, 3], M_00004_00003, M_00004_00003)
watchelement_one([1, 2, 3], M_00002_00001, M_00002_00001)
watchelement_one([1, 2, 3], M_00002_00003, M_00002_00003)
watchelement_one([1, 2, 3], M_00001_00003, M_00001_00003)
watchelement_one([1, 2, 3], M_00001_00001, M_00001_00001)
gacalldiff([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004])
gacalldiff([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004])
gacalldiff([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004])
gacalldiff([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004])
gacalldiff([M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004])
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux77, aux6)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux101, aux4)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux80, aux2)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux79, aux3)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux97, aux9)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux104, 5)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux33, aux6)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux86, aux4)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux39, aux2)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux40, aux3)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux84, aux9)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux106, 5)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux60, aux5)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux59, aux1)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux62, aux7)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux110, aux0)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux115, aux8)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux105, 5)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux53, aux5)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux50, aux1)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux51, aux7)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux124, aux0)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux127, aux8)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux107, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux166, M_00001_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux167, M_00001_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux168, M_00001_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux169, M_00001_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux170, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux77, M_00001_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux101, M_00001_00001)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux80, M_00001_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux79, M_00001_00004)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux97, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux81, M_00001_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux75, M_00001_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux99, M_00001_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux82, M_00001_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux98, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux76, M_00001_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux83, M_00001_00002)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux78, M_00001_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux100, M_00001_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux96, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux92, M_00002_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux42, M_00002_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux44, M_00002_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux43, M_00002_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux93, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux33, M_00002_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux86, M_00002_00001)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux39, M_00002_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux40, M_00002_00004)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux84, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux37, M_00002_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux35, M_00002_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux87, M_00002_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux41, M_00002_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux89, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux36, M_00002_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux34, M_00002_00002)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux38, M_00002_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux85, M_00002_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux88, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux111, M_00003_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux58, M_00003_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux56, M_00003_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux57, M_00003_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux114, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux61, M_00003_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux112, M_00003_00001)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux55, M_00003_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux54, M_00003_00004)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux113, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux171, M_00003_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux172, M_00003_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux173, M_00003_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux174, M_00003_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux175, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux60, M_00003_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux59, M_00003_00002)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux62, M_00003_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux110, M_00003_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux115, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux122, M_00004_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux46, M_00004_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux45, M_00004_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux47, M_00004_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux126, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux52, M_00004_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux123, M_00004_00001)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux49, M_00004_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux48, M_00004_00004)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux125, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux32, M_00004_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux31, M_00004_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux120, M_00004_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux30, M_00004_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux121, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux53, M_00004_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux50, M_00004_00002)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux51, M_00004_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux124, M_00004_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux127, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux102, M_00005_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux64, M_00005_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux69, M_00005_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux65, M_00005_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux104, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux73, M_00005_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux109, M_00005_00001)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux70, M_00005_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux71, M_00005_00004)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux106, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1], aux67, M_00005_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux68, M_00005_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3], aux103, M_00005_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4], aux66, M_00005_00004)
watchelement_one([5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5], aux105, 5)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux72, M_00005_00001)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux63, M_00005_00002)
watchelement_one([1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3], aux74, M_00005_00003)
watchelement_one([1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 3], aux108, M_00005_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 2, 3, 3, 5], aux107, 5)
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004],[aux176, aux177, aux178, aux179, aux180, aux181, aux182, aux183, aux184, aux185, aux186, aux187, aux188, aux189, aux190, aux191, aux192, aux193, aux194, aux195])
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux81, aux130)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux111, aux130)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux58, aux131)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux75, aux131)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux56, aux132)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux99, aux132)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux57, aux133)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux82, aux133)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux114, aux134)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux98, aux134)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux122, aux135)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux76, aux135)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux46, aux136)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux83, aux136)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux78, aux137)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux45, aux137)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux47, aux138)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux100, aux138)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux96, aux139)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux126, aux139)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00001_00001, aux140)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux102, aux140)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux64, aux141)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux94, aux141)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00001_00003, aux142)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux69, aux142)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux65, aux143)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux95, aux143)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux61, aux144)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux37, aux144)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux112, aux145)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux35, aux145)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux87, aux146)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux55, aux146)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux41, aux147)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux54, aux147)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux113, aux148)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux89, aux148)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux52, aux149)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux36, aux149)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux34, aux150)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux123, aux150)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux49, aux151)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux38, aux151)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux48, aux152)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux85, aux152)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux125, aux153)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux88, aux153)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux73, aux154)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00002_00001, aux154)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux109, aux155)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux117, aux155)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux70, aux156)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00002_00003, aux156)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux71, aux157)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux116, aux157)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux67, aux158)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00003_00001, aux158)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux68, aux159)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux118, aux159)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux103, aux160)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00003_00003, aux160)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux66, aux161)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux119, aux161)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00004_00001, aux162)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux72, aux162)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux63, aux163)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux90, aux163)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00004_00003, aux164)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux74, aux164)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux108, aux165)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux91, aux165)
weightedsumleq([1,6],[-5,M_00001_00001],aux166)
weightedsumgeq([1,6],[-5,M_00001_00001],aux166)
weightedsumleq([1,5,1],[-6,M_00001_00001,M_00001_00002],aux167)
weightedsumgeq([1,5,1],[-6,M_00001_00001,M_00001_00002],aux167)
weightedsumleq([1,5,1],[-5,M_00001_00001,M_00001_00003],aux168)
weightedsumgeq([1,5,1],[-5,M_00001_00001,M_00001_00003],aux168)
weightedsumleq([1,5,1],[-6,M_00001_00001,M_00001_00004],aux169)
weightedsumgeq([1,5,1],[-6,M_00001_00001,M_00001_00004],aux169)
weightedsumleq([1,5],[-4,M_00001_00001],aux170)
weightedsumgeq([1,5],[-4,M_00001_00001],aux170)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00003,-5],aux171)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00003,-5],aux171)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00003,-6],aux172)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00003,-6],aux172)
weightedsumleq([6,1],[M_00003_00003,-5],aux173)
weightedsumgeq([6,1],[M_00003_00003,-5],aux173)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00004,-6],aux174)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00004,-6],aux174)
weightedsumleq([5,1],[M_00003_00003,-4],aux175)
weightedsumgeq([5,1],[M_00003_00003,-4],aux175)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00004,-6],aux30)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00004,-6],aux30)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-6],aux31)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-6],aux31)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00003,-5],aux32)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00003,-5],aux32)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00002,-10],aux33)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00002,-10],aux33)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00004,-11],aux34)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00004,-11],aux34)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00003,-6],aux35)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00003,-6],aux35)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00004,-10],aux36)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00004,-10],aux36)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00003,-5],aux37)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00003,-5],aux37)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-10],aux38)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-10],aux38)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00003,-10],aux39)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00003,-10],aux39)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00004,-11],aux40)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00004,-11],aux40)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-6],aux41)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-6],aux41)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00002,-6],aux42)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00002,-6],aux42)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00004,-6],aux43)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00004,-6],aux43)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00003,-5],aux44)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00003,-5],aux44)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00003,-5],aux45)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00003,-5],aux45)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00002,-6],aux46)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00002,-6],aux46)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00004,-6],aux47)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00004,-6],aux47)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00004,-11],aux48)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00004,-11],aux48)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-10],aux49)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-10],aux49)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00004,-11],aux50)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00004,-11],aux50)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00004,-10],aux51)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00004,-10],aux51)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00002,-10],aux52)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00002,-10],aux52)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00004,-10],aux53)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00004,-10],aux53)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-11],aux54)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-11],aux54)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00003,-10],aux55)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00003,-10],aux55)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00003,-5],aux56)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00003,-5],aux56)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00004,-6],aux57)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00004,-6],aux57)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00002,-6],aux58)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00002,-6],aux58)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-11],aux59)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-11],aux59)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00004,-10],aux60)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00004,-10],aux60)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00002,-10],aux61)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00002,-10],aux61)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00004,-10],aux62)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00004,-10],aux62)
weightedsumleq([1,1,5],[-11,M_00005_00002,M_00005_00004],aux63)
weightedsumgeq([1,1,5],[-11,M_00005_00002,M_00005_00004],aux63)
weightedsumleq([1,5,1],[-6,M_00005_00001,M_00005_00002],aux64)
weightedsumgeq([1,5,1],[-6,M_00005_00001,M_00005_00002],aux64)
weightedsumleq([1,5,1],[-6,M_00005_00001,M_00005_00004],aux65)
weightedsumgeq([1,5,1],[-6,M_00005_00001,M_00005_00004],aux65)
weightedsumleq([1,5,1],[-6,M_00005_00003,M_00005_00004],aux66)
weightedsumgeq([1,5,1],[-6,M_00005_00003,M_00005_00004],aux66)
weightedsumleq([1,1,5],[-5,M_00005_00001,M_00005_00003],aux67)
weightedsumgeq([1,1,5],[-5,M_00005_00001,M_00005_00003],aux67)
weightedsumleq([1,1,5],[-6,M_00005_00002,M_00005_00003],aux68)
weightedsumgeq([1,1,5],[-6,M_00005_00002,M_00005_00003],aux68)
weightedsumleq([1,5,1],[-5,M_00005_00001,M_00005_00003],aux69)
weightedsumgeq([1,5,1],[-5,M_00005_00001,M_00005_00003],aux69)
weightedsumleq([1,5,1],[-10,M_00005_00002,M_00005_00003],aux70)
weightedsumgeq([1,5,1],[-10,M_00005_00002,M_00005_00003],aux70)
weightedsumleq([1,5,1],[-11,M_00005_00002,M_00005_00004],aux71)
weightedsumgeq([1,5,1],[-11,M_00005_00002,M_00005_00004],aux71)
weightedsumleq([1,1,5],[-10,M_00005_00001,M_00005_00004],aux72)
weightedsumgeq([1,1,5],[-10,M_00005_00001,M_00005_00004],aux72)
weightedsumleq([1,1,5],[-10,M_00005_00001,M_00005_00002],aux73)
weightedsumgeq([1,1,5],[-10,M_00005_00001,M_00005_00002],aux73)
weightedsumleq([1,1,5],[-10,M_00005_00003,M_00005_00004],aux74)
weightedsumgeq([1,1,5],[-10,M_00005_00003,M_00005_00004],aux74)
weightedsumleq([1,1,5],[-6,M_00001_00002,M_00001_00003],aux75)
weightedsumgeq([1,1,5],[-6,M_00001_00002,M_00001_00003],aux75)
weightedsumleq([1,1,5],[-10,M_00001_00001,M_00001_00004],aux76)
weightedsumgeq([1,1,5],[-10,M_00001_00001,M_00001_00004],aux76)
weightedsumleq([1,1,5],[-10,M_00001_00001,M_00001_00002],aux77)
weightedsumgeq([1,1,5],[-10,M_00001_00001,M_00001_00002],aux77)
weightedsumleq([1,1,5],[-10,M_00001_00003,M_00001_00004],aux78)
weightedsumgeq([1,1,5],[-10,M_00001_00003,M_00001_00004],aux78)
weightedsumleq([1,5,1],[-11,M_00001_00002,M_00001_00004],aux79)
weightedsumgeq([1,5,1],[-11,M_00001_00002,M_00001_00004],aux79)
weightedsumleq([1,5,1],[-10,M_00001_00002,M_00001_00003],aux80)
weightedsumgeq([1,5,1],[-10,M_00001_00002,M_00001_00003],aux80)
weightedsumleq([1,1,5],[-5,M_00001_00001,M_00001_00003],aux81)
weightedsumgeq([1,1,5],[-5,M_00001_00001,M_00001_00003],aux81)
weightedsumleq([1,5,1],[-6,M_00001_00003,M_00001_00004],aux82)
weightedsumgeq([1,5,1],[-6,M_00001_00003,M_00001_00004],aux82)
weightedsumleq([1,1,5],[-11,M_00001_00002,M_00001_00004],aux83)
weightedsumgeq([1,1,5],[-11,M_00001_00002,M_00001_00004],aux83)
weightedsumleq([5,1],[M_00002_00002,-9],aux84)
weightedsumgeq([5,1],[M_00002_00002,-9],aux84)
weightedsumleq([6,1],[M_00002_00004,-11],aux85)
weightedsumgeq([6,1],[M_00002_00004,-11],aux85)
weightedsumleq([6,1],[M_00002_00002,-11],aux86)
weightedsumgeq([6,1],[M_00002_00002,-11],aux86)
weightedsumleq([6,1],[M_00002_00003,-5],aux87)
weightedsumgeq([6,1],[M_00002_00003,-5],aux87)
weightedsumleq([5,1],[M_00002_00004,-9],aux88)
weightedsumgeq([5,1],[M_00002_00004,-9],aux88)
weightedsumleq([5,1],[M_00002_00003,-4],aux89)
weightedsumgeq([5,1],[M_00002_00003,-4],aux89)
sumleq([M_00004_00002,-1],aux90)
sumgeq([M_00004_00002,-1],aux90)
sumleq([M_00004_00004,-1],aux91)
sumgeq([M_00004_00004,-1],aux91)
weightedsumleq([6,1],[M_00002_00001,-5],aux92)
weightedsumgeq([6,1],[M_00002_00001,-5],aux92)
weightedsumleq([5,1],[M_00002_00001,-4],aux93)
weightedsumgeq([5,1],[M_00002_00001,-4],aux93)
sumleq([-1,M_00001_00002],aux94)
sumgeq([-1,M_00001_00002],aux94)
sumleq([-1,M_00001_00004],aux95)
sumgeq([-1,M_00001_00004],aux95)
weightedsumleq([1,5],[-9,M_00001_00004],aux96)
weightedsumgeq([1,5],[-9,M_00001_00004],aux96)
weightedsumleq([1,5],[-9,M_00001_00002],aux97)
weightedsumgeq([1,5],[-9,M_00001_00002],aux97)
weightedsumleq([1,5],[-4,M_00001_00003],aux98)
weightedsumgeq([1,5],[-4,M_00001_00003],aux98)
weightedsumleq([1,6],[-5,M_00001_00003],aux99)
weightedsumgeq([1,6],[-5,M_00001_00003],aux99)
weightedsumleq([1,6],[-11,M_00001_00004],aux100)
weightedsumgeq([1,6],[-11,M_00001_00004],aux100)
weightedsumleq([1,6],[-11,M_00001_00002],aux101)
weightedsumgeq([1,6],[-11,M_00001_00002],aux101)
weightedsumleq([1,6],[-5,M_00005_00001],aux102)
weightedsumgeq([1,6],[-5,M_00005_00001],aux102)
weightedsumleq([1,6],[-5,M_00005_00003],aux103)
weightedsumgeq([1,6],[-5,M_00005_00003],aux103)
weightedsumleq([1,5],[-4,M_00005_00001],aux104)
weightedsumgeq([1,5],[-4,M_00005_00001],aux104)
weightedsumleq([1,5],[-4,M_00005_00003],aux105)
weightedsumgeq([1,5],[-4,M_00005_00003],aux105)
weightedsumleq([1,5],[-9,M_00005_00002],aux106)
weightedsumgeq([1,5],[-9,M_00005_00002],aux106)
weightedsumleq([1,5],[-9,M_00005_00004],aux107)
weightedsumgeq([1,5],[-9,M_00005_00004],aux107)
weightedsumleq([1,6],[-11,M_00005_00004],aux108)
weightedsumgeq([1,6],[-11,M_00005_00004],aux108)
weightedsumleq([1,6],[-11,M_00005_00002],aux109)
weightedsumgeq([1,6],[-11,M_00005_00002],aux109)
weightedsumleq([6,1],[M_00003_00004,-11],aux110)
weightedsumgeq([6,1],[M_00003_00004,-11],aux110)
weightedsumleq([6,1],[M_00003_00001,-5],aux111)
weightedsumgeq([6,1],[M_00003_00001,-5],aux111)
weightedsumleq([6,1],[M_00003_00002,-11],aux112)
weightedsumgeq([6,1],[M_00003_00002,-11],aux112)
weightedsumleq([5,1],[M_00003_00002,-9],aux113)
weightedsumgeq([5,1],[M_00003_00002,-9],aux113)
weightedsumleq([5,1],[M_00003_00001,-4],aux114)
weightedsumgeq([5,1],[M_00003_00001,-4],aux114)
weightedsumleq([5,1],[M_00003_00004,-9],aux115)
weightedsumgeq([5,1],[M_00003_00004,-9],aux115)
sumleq([M_00002_00004,-1],aux116)
sumgeq([M_00002_00004,-1],aux116)
sumleq([M_00002_00002,-1],aux117)
sumgeq([M_00002_00002,-1],aux117)
sumleq([M_00003_00002,-1],aux118)
sumgeq([M_00003_00002,-1],aux118)
sumleq([M_00003_00004,-1],aux119)
sumgeq([M_00003_00004,-1],aux119)
weightedsumleq([6,1],[M_00004_00003,-5],aux120)
weightedsumgeq([6,1],[M_00004_00003,-5],aux120)
weightedsumleq([5,1],[M_00004_00003,-4],aux121)
weightedsumgeq([5,1],[M_00004_00003,-4],aux121)
weightedsumleq([6,1],[M_00004_00001,-5],aux122)
weightedsumgeq([6,1],[M_00004_00001,-5],aux122)
weightedsumleq([6,1],[M_00004_00002,-11],aux123)
weightedsumgeq([6,1],[M_00004_00002,-11],aux123)
weightedsumleq([6,1],[M_00004_00004,-11],aux124)
weightedsumgeq([6,1],[M_00004_00004,-11],aux124)
weightedsumleq([5,1],[M_00004_00002,-9],aux125)
weightedsumgeq([5,1],[M_00004_00002,-9],aux125)
weightedsumleq([5,1],[M_00004_00001,-4],aux126)
weightedsumgeq([5,1],[M_00004_00001,-4],aux126)
weightedsumleq([5,1],[M_00004_00004,-9],aux127)
weightedsumgeq([5,1],[M_00004_00004,-9],aux127)
sumleq([-1,M_00005_00004],aux128)
sumgeq([-1,M_00005_00004],aux128)
sumleq([-1,M_00005_00002],aux129)
sumgeq([-1,M_00005_00002],aux129)
**EOF**
