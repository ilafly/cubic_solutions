MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 186
# CSE_active_eliminated_expressions = 442
# CSE_active_total_size = 1002
**VARIABLES**
DISCRETE M_00001_00002 #
{2..3}
DISCRETE M_00001_00003 #
{2..3}
DISCRETE M_00001_00004 #
{4..5}
DISCRETE M_00001_00005 #
{4..5}
DISCRETE M_00002_00002 #
{2..3}
DISCRETE M_00002_00003 #
{2..3}
DISCRETE M_00002_00004 #
{4..5}
DISCRETE M_00002_00005 #
{4..5}
DISCRETE M_00003_00002 #
{2..3}
DISCRETE M_00003_00003 #
{2..3}
DISCRETE M_00003_00004 #
{4..5}
DISCRETE M_00003_00005 #
{4..5}
DISCRETE M_00004_00002 #
{2..3}
DISCRETE M_00004_00003 #
{2..3}
DISCRETE M_00004_00004 #
{4..5}
DISCRETE M_00004_00005 #
{4..5}
DISCRETE M_00005_00002 #
{2..3}
DISCRETE M_00005_00003 #
{2..3}
DISCRETE M_00005_00004 #
{4..5}
DISCRETE M_00005_00005 #
{4..5}
DISCRETE aux2 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], (M_00004_00002 + 5*M_00004_00005 + -21))
{1..5}
DISCRETE aux3 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], (M_00004_00003 + 5*M_00004_00005 + -21))
{1..5}
DISCRETE aux6 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], (6*M_00004_00005 + -23))
{1..5}
DISCRETE aux7 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], (-23 + 6*M_00005_00004))
{1..5}
DISCRETE aux8 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], (5*M_00004_00005 + -19))
{1..5}
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00001_00004))
{4..5}
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00001_00005))
{4..5}
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00001_00003))
{2..3}
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00001_00002))
{2..3}
DISCRETE aux14 #Active-CSE: 5 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00003_00005 + -3))
{4..5}
DISCRETE aux15 #Active-CSE: 5 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00003_00004 + -3))
{4..5}
DISCRETE aux24 #Active-CSE: 5 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00002_00004 + -3))
{4..5}
DISCRETE aux25 #Active-CSE: 5 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00002_00005 + -3))
{4..5}
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00003_00004 + -3))
{4..5}
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00003_00005 + -3))
{4..5}
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00003_00002 + -1))
{2..3}
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00003_00003 + -1))
{2..3}
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00002_00002 + -1))
{2..3}
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00002_00003 + -1))
{2..3}
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00002_00004 + -3))
{4..5}
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00002_00005 + -3))
{4..5}
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00004_00002 + -1))
{2..3}
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00004_00003 + -1))
{2..3}
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00004_00005 + -3))
{4..5}
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00004_00004 + -3))
{4..5}
DISCRETE aux42 #Active-CSE: 5 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00003_00003 + -1))
{2..3}
DISCRETE aux43 #Active-CSE: 5 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00003_00002 + -1))
{2..3}
DISCRETE aux44 #Active-CSE: 5 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00002 + -1))
{2..3}
DISCRETE aux45 #Active-CSE: 5 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00003 + -1))
{2..3}
DISCRETE aux46 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00005_00002))
{2..3}
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00005_00003))
{2..3}
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00005_00004))
{4..5}
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00005_00005))
{4..5}
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00004_00004 + -3))
{4..5}
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00004_00005 + -3))
{4..5}
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00004_00003 + -1))
{2..3}
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00004_00002 + -1))
{2..3}
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (-1 + M_00005_00003))
{2..3}
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (-1 + M_00005_00002))
{2..3}
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (-3 + M_00005_00005))
{4..5}
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (-3 + M_00005_00004))
{4..5}
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux66, [1,2,6,7])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux67, [1,2,6,7])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux68, [1,2,6,7])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux69, [1,2,6,7])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux70, [1,2,6,7])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004 + 5*M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux71, [1,2,6,7])
**VARIABLES**
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux72, [1,2,6,7])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux73, [1,2,6,7])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux74, [1,2,6,7])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux75, [1,2,6,7])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux76, [1,2,6,7])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux77, [1,2,6,7])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 5*M_00005_00004 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux78, [1,2,6,7])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00003 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux79, [1,2,6,7])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00002 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux80, [1,2,6,7])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00004 + 5*M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux81, [1,2,6,7])
**VARIABLES**
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux82, [1,2,6,7])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux83, [1,2,6,7])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux84, [1,2,6,7])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux85, [1,2,6,7])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux86, [1,2,6,7])
**VARIABLES**
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux87, [1,2,6,7])
**VARIABLES**
DISCRETE aux88 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux88, [1,2,6,7])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux89, [1,2,6,7])
**VARIABLES**
DISCRETE aux90 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux90, [1,2,6,7])
**VARIABLES**
DISCRETE aux91 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux91, [1,2,6,7])
**VARIABLES**
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux92, [1,2,6,7])
**VARIABLES**
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux93, [1,2,6,7])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux94, [1,2,6,7])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux95, [1,2,6,7])
**VARIABLES**
DISCRETE aux96 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux96, [1,2,6,7])
**VARIABLES**
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux97, [1,2,6,7])
**VARIABLES**
DISCRETE aux98 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux98, [1,2,6,7])
**VARIABLES**
DISCRETE aux99 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux99, [1,2,6,7])
**VARIABLES**
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux100, [1,2,6,7])
**VARIABLES**
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux101, [1,2,6,7])
**VARIABLES**
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00004 + 5*M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux102, [1,2,6,7])
**VARIABLES**
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux103, [1,2,6,7])
**VARIABLES**
DISCRETE aux104 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux104, [1,2,6,7])
**VARIABLES**
DISCRETE aux105 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00003 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux105, [1,2,6,7])
**VARIABLES**
DISCRETE aux106 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00002 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux106, [1,2,6,7])
**VARIABLES**
DISCRETE aux107 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + M_00005_00004 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux107, [1,2,6,7])
**VARIABLES**
DISCRETE aux108 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00002 + 5*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux108, [1,2,6,7])
**VARIABLES**
DISCRETE aux109 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00003 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux109, [1,2,6,7])
**VARIABLES**
DISCRETE aux110 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00003 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux110, [1,2,6,7])
**VARIABLES**
DISCRETE aux111 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00002 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux111, [1,2,6,7])
**VARIABLES**
DISCRETE aux112 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00002 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux112, [1,2,6,7])
**VARIABLES**
DISCRETE aux113 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00002 + M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux113, [1,2,6,7])
**VARIABLES**
DISCRETE aux114 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00003 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux114, [1,2,6,7])
**VARIABLES**
DISCRETE aux115 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00003 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux115, [1,2,6,7])
**VARIABLES**
DISCRETE aux116 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00002 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux116, [1,2,6,7])
**VARIABLES**
DISCRETE aux117 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00002 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux117, [1,2,6,7])
**VARIABLES**
DISCRETE aux118 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 5*M_00001_00004 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux118, [1,2,6,7])
**VARIABLES**
DISCRETE aux119 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + M_00001_00004 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux119, [1,2,6,7])
**VARIABLES**
DISCRETE aux120 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00001_00002 + M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux120, [1,2,6,7])
**VARIABLES**
DISCRETE aux121 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00003 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux121, [1,2,6,7])
**VARIABLES**
DISCRETE aux122 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00003 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux122, [1,2,6,7])
**VARIABLES**
DISCRETE aux123 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00002 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux123, [1,2,6,7])
**VARIABLES**
DISCRETE aux124 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00002 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux124, [1,2,6,7])
**VARIABLES**
DISCRETE aux125 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00001_00002 + 5*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux125, [1,2,6,7])
**VARIABLES**
DISCRETE aux126 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux126, [1,1,7,7])
**VARIABLES**
DISCRETE aux127 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux127, [1,1,6,6])
**VARIABLES**
DISCRETE aux128 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux128, [1,1,6,6])
**VARIABLES**
DISCRETE aux129 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux129, [1,1,7,7])
**VARIABLES**
DISCRETE aux130 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux130, [1,1,7,7])
**VARIABLES**
DISCRETE aux131 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux131, [1,1,7,7])
**VARIABLES**
DISCRETE aux132 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux132, [1,1,7,7])
**VARIABLES**
DISCRETE aux133 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux133, [1,1,6,6])
**VARIABLES**
DISCRETE aux134 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux134, [1,1,6,6])
**VARIABLES**
DISCRETE aux135 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux135, [1,1,6,6])
**VARIABLES**
DISCRETE aux136 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002 + -1)
{1..2}
DISCRETE aux137 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00005_00004)
{1..2}
DISCRETE aux138 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004 + -3)
{1..2}
DISCRETE aux139 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00005_00003)
{1..2}
DISCRETE aux140 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00005 + -3)
{1..2}
DISCRETE aux141 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux141, [1,1,7,7])
**VARIABLES**
DISCRETE aux142 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux142, [1,1,7,7])
**VARIABLES**
DISCRETE aux143 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00005)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux143, [1,1,6,6])
**VARIABLES**
DISCRETE aux144 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux144, [1,1,6,6])
**VARIABLES**
DISCRETE aux145 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux145, [1,1,6,6])
**VARIABLES**
DISCRETE aux146 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux146, [1,1,6,6])
**VARIABLES**
DISCRETE aux147 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux147, [1,1,7,7])
**VARIABLES**
DISCRETE aux148 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux148, [1,1,7,7])
**VARIABLES**
DISCRETE aux149 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004 + -3)
{1..2}
DISCRETE aux150 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00002 + -1)
{1..2}
DISCRETE aux151 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00001_00003)
{1..2}
DISCRETE aux152 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00001_00002)
{1..2}
DISCRETE aux153 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + M_00001_00005)
{1..2}
DISCRETE aux154 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + M_00001_00004)
{1..2}
DISCRETE aux155 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004 + -3)
{1..2}
DISCRETE aux156 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00003 + -1)
{1..2}
DISCRETE aux157 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00005_00005)
{1..2}
DISCRETE aux158 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00005 + -3)
{1..2}
DISCRETE aux159 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux159, [1,1,6,6])
**VARIABLES**
DISCRETE aux160 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux160, [1,1,6,6])
**VARIABLES**
DISCRETE aux161 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00005_00005)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux161, [1,1,6,6])
**VARIABLES**
DISCRETE aux162 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux162, [1,1,7,7])
**VARIABLES**
DISCRETE aux163 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux163, [1,1,7,7])
**VARIABLES**
DISCRETE aux164 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux164, [1,1,7,7])
**VARIABLES**
DISCRETE aux165 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00005 + -3)
{1..2}
DISCRETE aux166 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux166, [1,1,7,7])
**VARIABLES**
DISCRETE aux167 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux167, [1,1,7,7])
**VARIABLES**
DISCRETE aux168 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux168, [1,1,7,7])
**VARIABLES**
DISCRETE aux169 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux169, [1,1,7,7])
**VARIABLES**
DISCRETE aux170 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux170, [1,1,6,6])
**VARIABLES**
DISCRETE aux171 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux171, [1,1,6,6])
**VARIABLES**
DISCRETE aux172 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux172, [1,1,6,6])
**VARIABLES**
DISCRETE aux173 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux173, [1,1,6,6])
**VARIABLES**
DISCRETE aux174 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00003 + -1)
{1..2}
DISCRETE aux175 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00005_00002)
{1..2}
DISCRETE aux176 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00005_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux176, [1,1,6,6])
**VARIABLES**
DISCRETE aux177 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux177, [1,1,7,7])
**VARIABLES**
DISCRETE aux178 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux178, [1,1,7,7])
**VARIABLES**
DISCRETE aux179 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux179, [1,1,7,7])
**VARIABLES**
DISCRETE aux180 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux180, [1,1,7,7])
**VARIABLES**
DISCRETE aux181 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux181, [1,1,6,6])
**VARIABLES**
DISCRETE aux182 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux182, [1,1,6,6])
**VARIABLES**
DISCRETE aux183 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux183, [1,1,6,6])
**VARIABLES**
DISCRETE aux184 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00003 + -1)
{1..2}
DISCRETE aux185 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00002 + -1)
{1..2}
**TUPLELIST**
rack 5 5
1 2 3 4 5 
1 1 1 1 1 
1 1 1 1 1 
1 5 5 1 5 
1 4 4 4 1 
**VARIABLES**
ALIAS rack[5,5]=[[1, 2, 3, 4, 5], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 5, 5, 1, 5], [1, 4, 4, 4, 1]]
**TUPLELIST**
perms 4 5
1 2 3 4 5 
1 2 3 5 4 
1 3 2 4 5 
1 3 2 5 4 
**VARIABLES**
ALIAS perms[4,5]=[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4]]
**TUPLELIST**
inverses 4 5
1 2 3 4 5 
1 2 3 5 4 
1 3 2 4 5 
1 3 2 5 4 
**VARIABLES**
ALIAS inverses[4,5]=[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4]]
**SEARCH**
PRINT[[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00001_00005],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00002_00005],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00003_00005],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00004_00005],[M_00005_00002],[M_00005_00003],[M_00005_00004],[M_00005_00005]]
VARORDER STATIC [M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005]
**CONSTRAINTS**
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux80, aux2)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux79, aux3)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux83, aux2)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux82, aux3)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux81, aux7)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux78, aux6)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux126, aux6)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux177, aux7)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux127, aux8)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux176, aux8)
watchelement_one([5, 4], aux154, aux10)
watchelement_one([5, 4], aux153, aux11)
watchelement_one([3, 2], aux151, aux12)
watchelement_one([3, 2], aux152, aux13)
watchelement_one([M_00001_00004, M_00001_00005], aux140, aux14)
watchelement_one([M_00001_00004, M_00001_00005], aux155, aux15)
watchelement_one([4, 5], aux138, M_00002_00004)
watchelement_one([4, 5], aux158, M_00002_00005)
watchelement_one([2, 3], aux174, M_00002_00003)
watchelement_one([2, 3], aux185, M_00002_00002)
watchelement_one([4, 5], aux149, M_00004_00004)
watchelement_one([4, 5], aux165, M_00004_00005)
watchelement_one([2, 3], aux136, M_00004_00002)
watchelement_one([2, 3], aux156, M_00004_00003)
watchelement_one([M_00001_00004, M_00001_00005], aux138, aux24)
watchelement_one([M_00001_00004, M_00001_00005], aux158, aux25)
watchelement_one([5, 4], aux155, aux26)
watchelement_one([5, 4], aux140, aux27)
watchelement_one([3, 2], aux150, aux28)
watchelement_one([3, 2], aux184, aux29)
watchelement_one([3, 2], aux185, aux30)
watchelement_one([3, 2], aux174, aux31)
watchelement_one([5, 4], aux138, aux32)
watchelement_one([5, 4], aux158, aux33)
watchelement_one([M_00001_00002, M_00001_00003], aux136, aux34)
watchelement_one([M_00001_00002, M_00001_00003], aux156, aux35)
watchelement_one([M_00001_00004, M_00001_00005], aux165, aux36)
watchelement_one([M_00001_00004, M_00001_00005], aux149, aux37)
watchelement_one([2, 3], aux184, M_00003_00003)
watchelement_one([2, 3], aux150, M_00003_00002)
watchelement_one([4, 5], aux140, M_00003_00005)
watchelement_one([4, 5], aux155, M_00003_00004)
watchelement_one([M_00001_00002, M_00001_00003], aux184, aux42)
watchelement_one([M_00001_00002, M_00001_00003], aux150, aux43)
watchelement_one([M_00001_00002, M_00001_00003], aux185, aux44)
watchelement_one([M_00001_00002, M_00001_00003], aux174, aux45)
watchelement_one([3, 2], aux175, aux46)
watchelement_one([3, 2], aux139, aux47)
watchelement_one([5, 4], aux137, aux48)
watchelement_one([5, 4], aux157, aux49)
watchelement_one([5, 4], aux149, aux50)
watchelement_one([5, 4], aux165, aux51)
watchelement_one([3, 2], aux156, aux52)
watchelement_one([3, 2], aux136, aux53)
watchelement_one([M_00001_00002, M_00001_00003], aux139, aux54)
watchelement_one([M_00001_00002, M_00001_00003], aux175, aux55)
watchelement_one([M_00001_00004, M_00001_00005], aux157, aux56)
watchelement_one([M_00001_00004, M_00001_00005], aux137, aux57)
watchelement_one([4, 5], aux153, M_00001_00005)
watchelement_one([4, 5], aux154, M_00001_00004)
watchelement_one([2, 3], aux152, M_00001_00002)
watchelement_one([2, 3], aux151, M_00001_00003)
watchelement_one([4, 5], aux157, M_00005_00005)
watchelement_one([4, 5], aux137, M_00005_00004)
watchelement_one([2, 3], aux175, M_00005_00002)
watchelement_one([2, 3], aux139, M_00005_00003)
gacalldiff([M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005])
gacalldiff([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005])
gacalldiff([M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005])
gacalldiff([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005])
gacalldiff([M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005])
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux146, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux147, aux44)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux120, aux45)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux124, aux24)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux123, aux25)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux145, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux125, aux43)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux148, aux42)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux122, aux15)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux121, aux14)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux144, 1)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux116, aux34)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux115, aux35)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux141, aux37)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux118, aux36)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux143, 1)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux117, aux55)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux114, aux54)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux119, aux57)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux142, aux56)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux128, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux130, aux44)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux73, aux45)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux74, aux24)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux75, aux25)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux171, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux169, aux44)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux95, aux45)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux94, aux24)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux93, aux25)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux181, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux180, aux44)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux86, aux45)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux84, aux24)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux85, aux25)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux159, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux163, aux44)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux113, aux45)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux112, aux24)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux111, aux25)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux134, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux66, aux43)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux132, aux42)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux77, aux15)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux76, aux14)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux170, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux101, aux43)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux166, aux42)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux97, aux15)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux98, aux14)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux182, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux91, aux43)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux178, aux42)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux88, aux15)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux87, aux14)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux160, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux108, aux43)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux164, aux42)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux109, aux15)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux110, aux14)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux135, aux8)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux67, aux2)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux70, aux3)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux131, aux7)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux72, aux6)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux173, aux8)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux100, aux2)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux103, aux3)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux167, aux7)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux96, aux6)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux183, 1)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux90, aux34)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux92, aux35)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux179, aux37)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux89, aux36)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux133, aux8)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux68, aux2)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux69, aux3)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux71, aux7)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux129, aux6)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux172, aux8)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux99, aux2)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux104, aux3)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux102, aux7)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux168, aux6)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux161, 1)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux106, aux55)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux105, aux54)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux107, aux57)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux162, aux56)
watchelement_one([1, 1, 1, 1, 1, 1], aux146, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux147, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux120, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux124, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux123, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux145, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux125, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux148, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux122, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux121, 1)
watchelement_one([1, 5, 5, 1, 5, 1], aux144, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux116, M_00001_00005)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux115, M_00001_00005)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux141, 1)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux118, M_00001_00005)
watchelement_one([1, 5, 5, 1, 5, 1], aux143, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux117, M_00001_00004)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux114, M_00001_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux119, M_00001_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux142, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux128, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux130, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux73, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux74, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux75, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux134, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux66, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux132, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux77, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux76, 1)
watchelement_one([1, 5, 5, 1, 5, 1], aux135, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux67, M_00002_00005)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux70, M_00002_00005)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux131, 1)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux72, M_00002_00005)
watchelement_one([1, 5, 5, 1, 5, 1], aux133, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux68, M_00002_00004)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux69, M_00002_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux71, M_00002_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux129, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux171, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux169, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux95, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux94, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux93, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux170, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux101, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux166, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux97, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux98, 1)
watchelement_one([1, 5, 5, 1, 5, 1], aux173, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux100, M_00003_00005)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux103, M_00003_00005)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux167, 1)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux96, M_00003_00005)
watchelement_one([1, 5, 5, 1, 5, 1], aux172, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux99, M_00003_00004)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux104, M_00003_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux102, M_00003_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux168, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux181, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux180, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux86, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux84, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux85, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux182, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux91, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux178, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux88, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux87, 1)
watchelement_one([1, 5, 5, 1, 5, 1], aux183, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux90, M_00004_00005)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux92, M_00004_00005)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux179, 1)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux89, M_00004_00005)
watchelement_one([1, 5, 5, 1, 5, 1], aux127, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux83, M_00004_00004)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux82, M_00004_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux81, M_00004_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux126, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux159, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux163, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux113, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux112, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux111, 1)
watchelement_one([1, 1, 1, 1, 1, 1], aux160, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux108, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux164, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux109, 1)
watchelement_one([1, 1, 1, 1, 1, 1, 1], aux110, 1)
watchelement_one([1, 5, 5, 1, 5, 1], aux176, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux80, M_00005_00005)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux79, M_00005_00005)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux177, 1)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux78, M_00005_00005)
watchelement_one([1, 5, 5, 1, 5, 1], aux161, 1)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux106, M_00005_00004)
watchelement_one([5, 5, 1, 5, 1, 4, 4], aux105, M_00005_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux107, M_00005_00004)
watchelement_one([1, 5, 1, 4, 4, 4, 1], aux162, 1)
lexleq([M_00001_00004, M_00001_00005, M_00002_00004, M_00002_00005, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00004, M_00005_00005],[aux11, aux10, aux33, aux32, aux27, aux26, M_00005_00002, M_00005_00003, aux49, aux48, aux51, aux50])
lexleq([M_00001_00002, M_00001_00003, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00004_00002, M_00004_00003, M_00005_00002, M_00005_00003],[aux12, aux13, aux29, aux28, M_00003_00004, M_00003_00005, aux31, aux30, aux52, aux53, aux47, aux46])
lexleq([M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005],[aux12, aux13, aux11, aux10, aux29, aux28, aux27, aux26, aux31, aux30, aux33, aux32, aux47, aux46, aux49, aux48, aux52, aux53, aux51, aux50])
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00003,-11],aux66)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00003,-11],aux66)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00004,-21],aux67)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00004,-21],aux67)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00005,-21],aux68)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00005,-21],aux68)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00005,-21],aux69)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00005,-21],aux69)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-21],aux70)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-21],aux70)
weightedsumleq([1,5,1],[M_00002_00004,M_00002_00005,-23],aux71)
weightedsumgeq([1,5,1],[M_00002_00004,M_00002_00005,-23],aux71)
weightedsumleq([5,1,1],[M_00002_00004,M_00002_00005,-23],aux72)
weightedsumgeq([5,1,1],[M_00002_00004,M_00002_00005,-23],aux72)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00003,-11],aux73)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00003,-11],aux73)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00004,-13],aux74)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00004,-13],aux74)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00005,-13],aux75)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00005,-13],aux75)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00005,-13],aux76)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00005,-13],aux76)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-13],aux77)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-13],aux77)
weightedsumleq([1,5,1],[-23,M_00005_00004,M_00005_00005],aux78)
weightedsumgeq([1,5,1],[-23,M_00005_00004,M_00005_00005],aux78)
weightedsumleq([1,1,5],[-21,M_00005_00003,M_00005_00004],aux79)
weightedsumgeq([1,1,5],[-21,M_00005_00003,M_00005_00004],aux79)
weightedsumleq([1,1,5],[-21,M_00005_00002,M_00005_00004],aux80)
weightedsumgeq([1,1,5],[-21,M_00005_00002,M_00005_00004],aux80)
weightedsumleq([1,5,1],[M_00004_00004,M_00004_00005,-23],aux81)
weightedsumgeq([1,5,1],[M_00004_00004,M_00004_00005,-23],aux81)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00005,-21],aux82)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00005,-21],aux82)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00005,-21],aux83)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00005,-21],aux83)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00004,-13],aux84)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00004,-13],aux84)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00005,-13],aux85)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00005,-13],aux85)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-11],aux86)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-11],aux86)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00005,-13],aux87)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00005,-13],aux87)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00004,-13],aux88)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00004,-13],aux88)
weightedsumleq([5,1,1],[M_00004_00004,M_00004_00005,-23],aux89)
weightedsumgeq([5,1,1],[M_00004_00004,M_00004_00005,-23],aux89)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00004,-21],aux90)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00004,-21],aux90)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-11],aux91)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-11],aux91)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00004,-21],aux92)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00004,-21],aux92)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00005,-13],aux93)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00005,-13],aux93)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-13],aux94)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-13],aux94)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux95)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux95)
weightedsumleq([5,1,1],[M_00003_00004,M_00003_00005,-23],aux96)
weightedsumgeq([5,1,1],[M_00003_00004,M_00003_00005,-23],aux96)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00004,-13],aux97)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00004,-13],aux97)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00005,-13],aux98)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00005,-13],aux98)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00005,-21],aux99)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00005,-21],aux99)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-21],aux100)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-21],aux100)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux101)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux101)
weightedsumleq([1,5,1],[M_00003_00004,M_00003_00005,-23],aux102)
weightedsumgeq([1,5,1],[M_00003_00004,M_00003_00005,-23],aux102)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00004,-21],aux103)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00004,-21],aux103)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00005,-21],aux104)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00005,-21],aux104)
weightedsumleq([1,1,5],[-21,M_00005_00003,M_00005_00005],aux105)
weightedsumgeq([1,1,5],[-21,M_00005_00003,M_00005_00005],aux105)
weightedsumleq([1,1,5],[-21,M_00005_00002,M_00005_00005],aux106)
weightedsumgeq([1,1,5],[-21,M_00005_00002,M_00005_00005],aux106)
weightedsumleq([1,1,5],[-23,M_00005_00004,M_00005_00005],aux107)
weightedsumgeq([1,1,5],[-23,M_00005_00004,M_00005_00005],aux107)
weightedsumleq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux108)
weightedsumgeq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux108)
weightedsumleq([1,5,1],[-13,M_00005_00003,M_00005_00004],aux109)
weightedsumgeq([1,5,1],[-13,M_00005_00003,M_00005_00004],aux109)
weightedsumleq([1,5,1],[-13,M_00005_00003,M_00005_00005],aux110)
weightedsumgeq([1,5,1],[-13,M_00005_00003,M_00005_00005],aux110)
weightedsumleq([1,5,1],[-13,M_00005_00002,M_00005_00005],aux111)
weightedsumgeq([1,5,1],[-13,M_00005_00002,M_00005_00005],aux111)
weightedsumleq([1,5,1],[-13,M_00005_00002,M_00005_00004],aux112)
weightedsumgeq([1,5,1],[-13,M_00005_00002,M_00005_00004],aux112)
weightedsumleq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux113)
weightedsumgeq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux113)
weightedsumleq([1,1,5],[-21,M_00001_00003,M_00001_00005],aux114)
weightedsumgeq([1,1,5],[-21,M_00001_00003,M_00001_00005],aux114)
weightedsumleq([1,1,5],[-21,M_00001_00003,M_00001_00004],aux115)
weightedsumgeq([1,1,5],[-21,M_00001_00003,M_00001_00004],aux115)
weightedsumleq([1,1,5],[-21,M_00001_00002,M_00001_00004],aux116)
weightedsumgeq([1,1,5],[-21,M_00001_00002,M_00001_00004],aux116)
weightedsumleq([1,1,5],[-21,M_00001_00002,M_00001_00005],aux117)
weightedsumgeq([1,1,5],[-21,M_00001_00002,M_00001_00005],aux117)
weightedsumleq([1,5,1],[-23,M_00001_00004,M_00001_00005],aux118)
weightedsumgeq([1,5,1],[-23,M_00001_00004,M_00001_00005],aux118)
weightedsumleq([1,1,5],[-23,M_00001_00004,M_00001_00005],aux119)
weightedsumgeq([1,1,5],[-23,M_00001_00004,M_00001_00005],aux119)
weightedsumleq([1,5,1],[-11,M_00001_00002,M_00001_00003],aux120)
weightedsumgeq([1,5,1],[-11,M_00001_00002,M_00001_00003],aux120)
weightedsumleq([1,5,1],[-13,M_00001_00003,M_00001_00005],aux121)
weightedsumgeq([1,5,1],[-13,M_00001_00003,M_00001_00005],aux121)
weightedsumleq([1,5,1],[-13,M_00001_00003,M_00001_00004],aux122)
weightedsumgeq([1,5,1],[-13,M_00001_00003,M_00001_00004],aux122)
weightedsumleq([1,5,1],[-13,M_00001_00002,M_00001_00005],aux123)
weightedsumgeq([1,5,1],[-13,M_00001_00002,M_00001_00005],aux123)
weightedsumleq([1,5,1],[-13,M_00001_00002,M_00001_00004],aux124)
weightedsumgeq([1,5,1],[-13,M_00001_00002,M_00001_00004],aux124)
weightedsumleq([1,1,5],[-11,M_00001_00002,M_00001_00003],aux125)
weightedsumgeq([1,1,5],[-11,M_00001_00002,M_00001_00003],aux125)
weightedsumleq([6,1],[M_00004_00005,-23],aux126)
weightedsumgeq([6,1],[M_00004_00005,-23],aux126)
weightedsumleq([5,1],[M_00004_00005,-19],aux127)
weightedsumgeq([5,1],[M_00004_00005,-19],aux127)
weightedsumleq([5,1],[M_00002_00002,-9],aux128)
weightedsumgeq([5,1],[M_00002_00002,-9],aux128)
weightedsumleq([6,1],[M_00002_00005,-23],aux129)
weightedsumgeq([6,1],[M_00002_00005,-23],aux129)
weightedsumleq([6,1],[M_00002_00002,-11],aux130)
weightedsumgeq([6,1],[M_00002_00002,-11],aux130)
weightedsumleq([6,1],[M_00002_00004,-23],aux131)
weightedsumgeq([6,1],[M_00002_00004,-23],aux131)
weightedsumleq([6,1],[M_00002_00003,-11],aux132)
weightedsumgeq([6,1],[M_00002_00003,-11],aux132)
weightedsumleq([5,1],[M_00002_00005,-19],aux133)
weightedsumgeq([5,1],[M_00002_00005,-19],aux133)
weightedsumleq([5,1],[M_00002_00003,-9],aux134)
weightedsumgeq([5,1],[M_00002_00003,-9],aux134)
weightedsumleq([5,1],[M_00002_00004,-19],aux135)
weightedsumgeq([5,1],[M_00002_00004,-19],aux135)
sumleq([M_00004_00002,-1],aux136)
sumgeq([M_00004_00002,-1],aux136)
sumleq([-3,M_00005_00004],aux137)
sumgeq([-3,M_00005_00004],aux137)
sumleq([M_00002_00004,-3],aux138)
sumgeq([M_00002_00004,-3],aux138)
sumleq([-1,M_00005_00003],aux139)
sumgeq([-1,M_00005_00003],aux139)
sumleq([M_00003_00005,-3],aux140)
sumgeq([M_00003_00005,-3],aux140)
weightedsumleq([1,6],[-23,M_00001_00004],aux141)
weightedsumgeq([1,6],[-23,M_00001_00004],aux141)
weightedsumleq([1,6],[-23,M_00001_00005],aux142)
weightedsumgeq([1,6],[-23,M_00001_00005],aux142)
weightedsumleq([1,5],[-19,M_00001_00005],aux143)
weightedsumgeq([1,5],[-19,M_00001_00005],aux143)
weightedsumleq([1,5],[-19,M_00001_00004],aux144)
weightedsumgeq([1,5],[-19,M_00001_00004],aux144)
weightedsumleq([1,5],[-9,M_00001_00003],aux145)
weightedsumgeq([1,5],[-9,M_00001_00003],aux145)
weightedsumleq([1,5],[-9,M_00001_00002],aux146)
weightedsumgeq([1,5],[-9,M_00001_00002],aux146)
weightedsumleq([1,6],[-11,M_00001_00002],aux147)
weightedsumgeq([1,6],[-11,M_00001_00002],aux147)
weightedsumleq([1,6],[-11,M_00001_00003],aux148)
weightedsumgeq([1,6],[-11,M_00001_00003],aux148)
sumleq([M_00004_00004,-3],aux149)
sumgeq([M_00004_00004,-3],aux149)
sumleq([M_00003_00002,-1],aux150)
sumgeq([M_00003_00002,-1],aux150)
sumleq([-1,M_00001_00003],aux151)
sumgeq([-1,M_00001_00003],aux151)
sumleq([-1,M_00001_00002],aux152)
sumgeq([-1,M_00001_00002],aux152)
sumleq([-3,M_00001_00005],aux153)
sumgeq([-3,M_00001_00005],aux153)
sumleq([-3,M_00001_00004],aux154)
sumgeq([-3,M_00001_00004],aux154)
sumleq([M_00003_00004,-3],aux155)
sumgeq([M_00003_00004,-3],aux155)
sumleq([M_00004_00003,-1],aux156)
sumgeq([M_00004_00003,-1],aux156)
sumleq([-3,M_00005_00005],aux157)
sumgeq([-3,M_00005_00005],aux157)
sumleq([M_00002_00005,-3],aux158)
sumgeq([M_00002_00005,-3],aux158)
weightedsumleq([1,5],[-9,M_00005_00002],aux159)
weightedsumgeq([1,5],[-9,M_00005_00002],aux159)
weightedsumleq([1,5],[-9,M_00005_00003],aux160)
weightedsumgeq([1,5],[-9,M_00005_00003],aux160)
weightedsumleq([1,5],[-19,M_00005_00005],aux161)
weightedsumgeq([1,5],[-19,M_00005_00005],aux161)
weightedsumleq([1,6],[-23,M_00005_00005],aux162)
weightedsumgeq([1,6],[-23,M_00005_00005],aux162)
weightedsumleq([1,6],[-11,M_00005_00002],aux163)
weightedsumgeq([1,6],[-11,M_00005_00002],aux163)
weightedsumleq([1,6],[-11,M_00005_00003],aux164)
weightedsumgeq([1,6],[-11,M_00005_00003],aux164)
sumleq([M_00004_00005,-3],aux165)
sumgeq([M_00004_00005,-3],aux165)
weightedsumleq([6,1],[M_00003_00003,-11],aux166)
weightedsumgeq([6,1],[M_00003_00003,-11],aux166)
weightedsumleq([6,1],[M_00003_00004,-23],aux167)
weightedsumgeq([6,1],[M_00003_00004,-23],aux167)
weightedsumleq([6,1],[M_00003_00005,-23],aux168)
weightedsumgeq([6,1],[M_00003_00005,-23],aux168)
weightedsumleq([6,1],[M_00003_00002,-11],aux169)
weightedsumgeq([6,1],[M_00003_00002,-11],aux169)
weightedsumleq([5,1],[M_00003_00003,-9],aux170)
weightedsumgeq([5,1],[M_00003_00003,-9],aux170)
weightedsumleq([5,1],[M_00003_00002,-9],aux171)
weightedsumgeq([5,1],[M_00003_00002,-9],aux171)
weightedsumleq([5,1],[M_00003_00005,-19],aux172)
weightedsumgeq([5,1],[M_00003_00005,-19],aux172)
weightedsumleq([5,1],[M_00003_00004,-19],aux173)
weightedsumgeq([5,1],[M_00003_00004,-19],aux173)
sumleq([M_00002_00003,-1],aux174)
sumgeq([M_00002_00003,-1],aux174)
sumleq([-1,M_00005_00002],aux175)
sumgeq([-1,M_00005_00002],aux175)
weightedsumleq([1,5],[-19,M_00005_00004],aux176)
weightedsumgeq([1,5],[-19,M_00005_00004],aux176)
weightedsumleq([1,6],[-23,M_00005_00004],aux177)
weightedsumgeq([1,6],[-23,M_00005_00004],aux177)
weightedsumleq([6,1],[M_00004_00003,-11],aux178)
weightedsumgeq([6,1],[M_00004_00003,-11],aux178)
weightedsumleq([6,1],[M_00004_00004,-23],aux179)
weightedsumgeq([6,1],[M_00004_00004,-23],aux179)
weightedsumleq([6,1],[M_00004_00002,-11],aux180)
weightedsumgeq([6,1],[M_00004_00002,-11],aux180)
weightedsumleq([5,1],[M_00004_00002,-9],aux181)
weightedsumgeq([5,1],[M_00004_00002,-9],aux181)
weightedsumleq([5,1],[M_00004_00003,-9],aux182)
weightedsumgeq([5,1],[M_00004_00003,-9],aux182)
weightedsumleq([5,1],[M_00004_00004,-19],aux183)
weightedsumgeq([5,1],[M_00004_00004,-19],aux183)
sumleq([M_00003_00003,-1],aux184)
sumgeq([M_00003_00003,-1],aux184)
sumleq([M_00002_00002,-1],aux185)
sumgeq([M_00002_00002,-1],aux185)
**EOF**
