MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 140
# CSE_active_eliminated_expressions = 288
# CSE_active_total_size = 898
**VARIABLES**
DISCRETE M_00001_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00001_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00001_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00001_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00001_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00001_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00001_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00001_00004, [2,2,4,4])
**VARIABLES**
DISCRETE M_00002_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00002_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00002_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00002_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00002_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00002_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00002_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00002_00004, [2,2,4,4])
**VARIABLES**
DISCRETE M_00003_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00003_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00003_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00003_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00003_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00003_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00003_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00003_00004, [2,2,4,4])
**VARIABLES**
DISCRETE M_00004_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00004_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00004_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00004_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00004_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00004_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00004_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00004_00004, [2,2,4,4])
**VARIABLES**
DISCRETE M_00005_00001 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00005_00001, [1,1,3,3])
**VARIABLES**
DISCRETE M_00005_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00005_00002, [2,2,4,4])
**VARIABLES**
DISCRETE M_00005_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00005_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00005_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(M_00005_00004, [2,2,4,4])
**VARIABLES**
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00004_00003 + M_00004_00004 + -6))
{1..5}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00004_00001 + M_00004_00004 + -6))
{1..5}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00004_00001 + M_00004_00002 + -6))
{1..5}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (M_00004_00002 + 5*M_00004_00003 + -6))
{1..5}
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (5*M_00002_00001 + M_00002_00003 + -5))
{1..5}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (M_00002_00001 + 5*M_00002_00003 + -5))
{1..5}
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00002_00003 + M_00002_00004 + -6))
{1..5}
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00002_00001 + M_00002_00004 + -6))
{1..5}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (5*M_00002_00001 + M_00002_00002 + -6))
{1..5}
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], (M_00002_00002 + 5*M_00002_00003 + -6))
{1..5}
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (5*M_00004_00001 + M_00004_00003 + -5))
{1..5}
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (M_00004_00001 + 5*M_00004_00003 + -5))
{1..5}
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (6*M_00002_00003 + -5))
{1..5}
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (6*M_00002_00001 + -5))
{1..5}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (6*M_00004_00001 + -5))
{1..5}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], (6*M_00004_00003 + -5))
{1..5}
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], (5*M_00004_00001 + -4))
{1..5}
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], (5*M_00004_00003 + -4))
{1..5}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], (5*M_00002_00001 + -4))
{1..5}
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], (5*M_00002_00003 + -4))
{1..5}
DISCRETE aux40 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00002 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux40, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux41 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux41, [3,3,11,11])
**VARIABLES**
DISCRETE aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + M_00004_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux42, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux43, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00003 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux44, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux45, [3,3,11,11])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00002 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux46, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux47, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux48, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux49, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00003 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux50, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux51, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00002 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux52, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux53, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + M_00002_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux54, [3,3,11,11])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux55, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux56, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00003 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux57, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux58, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux59, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00002 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux60, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 5*M_00004_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux61, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux62, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00003 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux63, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux64, [3,3,11,11])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux65, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + M_00003_00002 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux66, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux67, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux68, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 5*M_00003_00002 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux69, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00004 + -10)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux70, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00002 + 5*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux71, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 5*M_00005_00001 + M_00005_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux72, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 5*M_00005_00001 + M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux73, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 5*M_00005_00003 + M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux74, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00005_00001 + 5*M_00005_00003)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux75, [3,3,11,11])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + M_00005_00002 + 5*M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux76, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 5*M_00005_00001 + M_00005_00003)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux77, [3,3,11,11])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + 5*M_00005_00002 + M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux78, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00002 + M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux79, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00005_00001 + 5*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux80, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00005_00001 + 5*M_00005_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux81, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00005_00003 + 5*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux82, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + M_00001_00002 + 5*M_00001_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux83, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00001_00001 + 5*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux84, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00001_00001 + 5*M_00001_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux85, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + M_00001_00003 + 5*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux86, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00001_00002 + M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux87, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux88 #Active-CSE: 2 occurrences of this expression or equivalent: (-10 + 5*M_00001_00002 + M_00001_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux88, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + M_00001_00001 + 5*M_00001_00003)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux89, [3,3,11,11])
**VARIABLES**
DISCRETE aux90 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 5*M_00001_00003 + M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux90, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux91 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00001_00002 + 5*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux91, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00003 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux92, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 5*M_00002_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux93, [3,3,11,11])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux94, [1,1,11,11])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux95, [1,1,13,13])
**VARIABLES**
DISCRETE aux96 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux96, [1,1,13,13])
**VARIABLES**
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux97, [1,1,11,11])
**VARIABLES**
DISCRETE aux98 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux98, [1,1,3,3])
**VARIABLES**
DISCRETE aux99 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux99, [1,1,3,3])
**VARIABLES**
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00001 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux100, [1,1,13,13])
**VARIABLES**
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux101, [1,1,13,13])
**VARIABLES**
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux102, [1,1,11,11])
**VARIABLES**
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux103, [1,1,11,11])
**VARIABLES**
DISCRETE aux104 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00001_00002)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux104, [1,1,3,3])
**VARIABLES**
DISCRETE aux105 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00001_00004)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux105, [1,1,3,3])
**VARIABLES**
DISCRETE aux106 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00004)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux106, [1,1,11,11])
**VARIABLES**
DISCRETE aux107 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00002)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux107, [1,1,11,11])
**VARIABLES**
DISCRETE aux108 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00003)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux108, [1,1,11,11])
**VARIABLES**
DISCRETE aux109 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00001_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux109, [1,1,13,13])
**VARIABLES**
DISCRETE aux110 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux110, [1,1,13,13])
**VARIABLES**
DISCRETE aux111 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux111, [1,1,13,13])
**VARIABLES**
DISCRETE aux112 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00001)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux112, [1,1,13,13])
**VARIABLES**
DISCRETE aux113 #Active-CSE: 2 occurrences of this expression or equivalent: (-5 + 6*M_00005_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux113, [1,1,13,13])
**VARIABLES**
DISCRETE aux114 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00005_00001)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux114, [1,1,11,11])
**VARIABLES**
DISCRETE aux115 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00005_00003)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux115, [1,1,11,11])
**VARIABLES**
DISCRETE aux116 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00002)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux116, [1,1,11,11])
**VARIABLES**
DISCRETE aux117 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00004)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux117, [1,1,11,11])
**VARIABLES**
DISCRETE aux118 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux118, [1,1,13,13])
**VARIABLES**
DISCRETE aux119 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux119, [1,1,13,13])
**VARIABLES**
DISCRETE aux120 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux120, [1,1,13,13])
**VARIABLES**
DISCRETE aux121 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00001 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux121, [1,1,13,13])
**VARIABLES**
DISCRETE aux122 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux122, [1,1,13,13])
**VARIABLES**
DISCRETE aux123 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux123, [1,1,11,11])
**VARIABLES**
DISCRETE aux124 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux124, [1,1,11,11])
**VARIABLES**
DISCRETE aux125 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux125, [1,1,11,11])
**VARIABLES**
DISCRETE aux126 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux126, [1,1,3,3])
**VARIABLES**
DISCRETE aux127 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00002 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux127, [1,1,3,3])
**VARIABLES**
DISCRETE aux128 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00002 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux128, [1,1,3,3])
**VARIABLES**
DISCRETE aux129 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux129, [1,1,3,3])
**VARIABLES**
DISCRETE aux130 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00001 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux130, [1,1,13,13])
**VARIABLES**
DISCRETE aux131 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux131, [1,1,13,13])
**VARIABLES**
DISCRETE aux132 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux132, [1,1,11,11])
**VARIABLES**
DISCRETE aux133 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux133, [1,1,11,11])
**VARIABLES**
DISCRETE aux134 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux134, [1,1,13,13])
**VARIABLES**
DISCRETE aux135 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux135, [1,1,13,13])
**VARIABLES**
DISCRETE aux136 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux136, [1,1,11,11])
**VARIABLES**
DISCRETE aux137 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux137, [1,1,11,11])
**VARIABLES**
DISCRETE aux138 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00005_00004)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux138, [1,1,3,3])
**VARIABLES**
DISCRETE aux139 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00005_00002)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux139, [1,1,3,3])
**VARIABLES**
DISCRETE aux140 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux89) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux121)
{1..5}
DISCRETE aux141 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux66) --- ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux83)
{1..5}
DISCRETE aux142 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux64) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux109)
{1..5}
DISCRETE aux143 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux65) --- ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux90)
{1..5}
DISCRETE aux144 #ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux124) --- ElementOne([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux108)
{1..5}
DISCRETE aux145 #ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00001_00001) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux112)
{1..4}
DISCRETE aux146 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux72) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux104)
{1..4}
DISCRETE aux147 #ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00001_00003) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux77)
{1..4}
DISCRETE aux148 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux73) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux105)
{1..4}
DISCRETE aux149 #ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux81) --- ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00002_00001)
{1..4}
DISCRETE aux150 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux119) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux127)
{1..4}
DISCRETE aux151 #ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux78) --- ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00002_00003)
{1..4}
DISCRETE aux152 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux79) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux126)
{1..4}
DISCRETE aux153 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux75) --- ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00003_00001)
{1..4}
DISCRETE aux154 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux76) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux128)
{1..4}
DISCRETE aux155 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux113) --- ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00003_00003)
{1..4}
DISCRETE aux156 #ElementOne([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux74) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux129)
{1..4}
DISCRETE aux157 #ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00004_00001) --- ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux80)
{1..4}
DISCRETE aux158 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux71) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux98)
{1..4}
DISCRETE aux159 #ElementOne([M_00005_00001, M_00005_00002, M_00005_00003], M_00004_00003) --- ElementOne([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux82)
{1..4}
DISCRETE aux160 #ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux118) --- ElementOne([M_00005_00002, M_00005_00003, M_00005_00004], aux99)
{1..4}
DISCRETE aux161 #(-5 + 6*M_00001_00001)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux161, [1,1,13,13])
**VARIABLES**
DISCRETE aux162 #(-6 + 5*M_00001_00001 + M_00001_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux162, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux163 #(-5 + 5*M_00001_00001 + M_00001_00003)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux163, [3,3,11,11])
**VARIABLES**
DISCRETE aux164 #(-6 + 5*M_00001_00001 + M_00001_00004)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux164, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux165 #(-4 + 5*M_00001_00001)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux165, [1,1,11,11])
**VARIABLES**
DISCRETE aux166 #(M_00003_00001 + 5*M_00003_00003 + -5)
{3..11}
**CONSTRAINTS**
w-inintervalset(aux166, [3,3,11,11])
**VARIABLES**
DISCRETE aux167 #(M_00003_00002 + 5*M_00003_00003 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux167, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux168 #(6*M_00003_00003 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux168, [1,1,13,13])
**VARIABLES**
DISCRETE aux169 #(5*M_00003_00003 + M_00003_00004 + -6)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux169, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux170 #(5*M_00003_00003 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux170, [1,1,11,11])
**VARIABLES**
DISCRETE aux171 #ElementOne([3, 4, 1], M_00003_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux171, [1,1,3,4])
**VARIABLES**
DISCRETE aux172 #ElementOne([4, 1, 2], aux129)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux172, [1,2,4,4])
**VARIABLES**
DISCRETE aux173 #ElementOne([3, 4, 1], M_00003_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux173, [1,1,3,4])
**VARIABLES**
DISCRETE aux174 #ElementOne([4, 1, 2], aux128)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux174, [1,2,4,4])
**VARIABLES**
DISCRETE aux175 #ElementOne([3, 4, 1], M_00004_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux175, [1,1,3,4])
**VARIABLES**
DISCRETE aux176 #ElementOne([4, 1, 2], aux99)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux176, [1,2,4,4])
**VARIABLES**
DISCRETE aux177 #ElementOne([3, 4, 1], M_00004_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux177, [1,1,3,4])
**VARIABLES**
DISCRETE aux178 #ElementOne([4, 1, 2], aux98)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux178, [1,2,4,4])
**VARIABLES**
DISCRETE aux179 #ElementOne([3, 4, 1], M_00001_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux179, [1,1,3,4])
**VARIABLES**
DISCRETE aux180 #ElementOne([4, 1, 2], aux105)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux180, [1,2,4,4])
**VARIABLES**
DISCRETE aux181 #ElementOne([3, 4, 1], M_00001_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux181, [1,1,3,4])
**VARIABLES**
DISCRETE aux182 #ElementOne([4, 1, 2], aux104)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux182, [1,2,4,4])
**VARIABLES**
DISCRETE aux183 #ElementOne([3, 4, 1], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux183, [1,1,3,4])
**VARIABLES**
DISCRETE aux184 #ElementOne([4, 1, 2], aux126)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux184, [1,2,4,4])
**VARIABLES**
DISCRETE aux185 #ElementOne([3, 4, 1], M_00002_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux185, [1,1,3,4])
**VARIABLES**
DISCRETE aux186 #ElementOne([4, 1, 2], aux127)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux186, [1,2,4,4])
**VARIABLES**
DISCRETE aux187 #ElementOne([3, 4, 1], M_00005_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux187, [1,1,3,4])
**VARIABLES**
DISCRETE aux188 #ElementOne([4, 1, 2], aux138)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux188, [1,2,4,4])
**VARIABLES**
DISCRETE aux189 #ElementOne([3, 4, 1], M_00005_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux189, [1,1,3,4])
**VARIABLES**
DISCRETE aux190 #ElementOne([4, 1, 2], aux139)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux190, [1,2,4,4])
**VARIABLES**
**TUPLELIST**
rack 5 5
1 2 3 4 5 
1 1 3 3 5 
1 2 3 4 5 
1 1 3 3 5 
1 2 3 4 5 
**VARIABLES**
ALIAS rack[5,5]=[[1, 2, 3, 4, 5], [1, 1, 3, 3, 5], [1, 2, 3, 4, 5], [1, 1, 3, 3, 5], [1, 2, 3, 4, 5]]
**TUPLELIST**
perms 2 5
1 2 3 4 5 
3 4 1 2 5 
**VARIABLES**
ALIAS perms[2,5]=[[1, 2, 3, 4, 5], [3, 4, 1, 2, 5]]
**TUPLELIST**
inverses 2 5
1 2 3 4 5 
3 4 1 2 5 
**VARIABLES**
ALIAS inverses[2,5]=[[1, 2, 3, 4, 5], [3, 4, 1, 2, 5]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00002_00001],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00003_00001],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00005_00001],[M_00005_00002],[M_00005_00003],[M_00005_00004]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004]
**CONSTRAINTS**
watchelement_one([3, 4, 1], M_00003_00003, aux171)
watchelement_one([4, 1, 2], aux129, aux172)
watchelement_one([3, 4, 1], M_00003_00001, aux173)
watchelement_one([4, 1, 2], aux128, aux174)
watchelement_one([3, 4, 1], M_00004_00003, aux175)
watchelement_one([4, 1, 2], aux99, aux176)
watchelement_one([3, 4, 1], M_00004_00001, aux177)
watchelement_one([4, 1, 2], aux98, aux178)
watchelement_one([3, 4, 1], M_00001_00003, aux179)
watchelement_one([4, 1, 2], aux105, aux180)
watchelement_one([3, 4, 1], M_00001_00001, aux181)
watchelement_one([4, 1, 2], aux104, aux182)
watchelement_one([3, 4, 1], M_00002_00003, aux183)
watchelement_one([4, 1, 2], aux126, aux184)
watchelement_one([3, 4, 1], M_00002_00001, aux185)
watchelement_one([4, 1, 2], aux127, aux186)
watchelement_one([3, 4, 1], M_00005_00003, aux187)
watchelement_one([4, 1, 2], aux138, aux188)
watchelement_one([3, 4, 1], M_00005_00001, aux189)
watchelement_one([4, 1, 2], aux139, aux190)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux43, aux0)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux42, aux1)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux40, aux2)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux44, aux3)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux54, aux4)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux93, aux5)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux55, aux6)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux53, aux7)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux52, aux8)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux92, aux9)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux41, aux10)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux45, aux11)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux101, aux12)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux100, aux13)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux130, aux14)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux131, aux15)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux132, aux16)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux133, aux17)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux102, aux18)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux103, aux19)
watchelement_one([2, 3, 4], aux128, M_00003_00002)
watchelement_one([2, 3, 4], aux129, M_00003_00004)
watchelement_one([2, 3, 4], aux139, M_00005_00002)
watchelement_one([2, 3, 4], aux138, M_00005_00004)
watchelement_one([2, 3, 4], aux99, M_00004_00004)
watchelement_one([2, 3, 4], aux98, M_00004_00002)
watchelement_one([2, 3, 4], aux126, M_00002_00004)
watchelement_one([2, 3, 4], aux127, M_00002_00002)
watchelement_one([2, 3, 4], aux104, M_00001_00002)
watchelement_one([2, 3, 4], aux105, M_00001_00004)
watchelement_one([1, 2, 3], M_00003_00003, M_00003_00003)
watchelement_one([1, 2, 3], M_00003_00001, M_00003_00001)
watchelement_one([1, 2, 3], M_00005_00003, M_00005_00003)
watchelement_one([1, 2, 3], M_00005_00001, M_00005_00001)
watchelement_one([1, 2, 3], M_00004_00001, M_00004_00001)
watchelement_one([1, 2, 3], M_00004_00003, M_00004_00003)
watchelement_one([1, 2, 3], M_00002_00001, M_00002_00001)
watchelement_one([1, 2, 3], M_00002_00003, M_00002_00003)
watchelement_one([1, 2, 3], M_00001_00003, M_00001_00003)
watchelement_one([1, 2, 3], M_00001_00001, M_00001_00001)
gacalldiff([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004])
gacalldiff([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004])
gacalldiff([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004])
gacalldiff([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004])
gacalldiff([M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004])
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux85, aux13)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux111, aux8)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux88, aux4)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux87, aux7)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux107, aux18)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux84, aux14)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux91, aux2)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux86, aux10)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux110, aux1)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux106, aux16)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux114, 5)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux46, aux13)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux96, aux8)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux50, aux4)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux51, aux7)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux94, aux18)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux69, aux5)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux122, aux9)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux63, aux12)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux62, aux6)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux123, aux19)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux60, aux5)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux134, aux9)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux57, aux12)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux56, aux6)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux136, aux19)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux116, 5)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux68, aux11)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux67, aux3)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux70, aux15)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux120, aux0)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux125, aux17)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux115, 5)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux48, aux14)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux47, aux2)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux49, aux10)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux95, aux1)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux97, aux16)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux61, aux11)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux58, aux3)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux59, aux15)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux135, aux0)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux137, aux17)
watchelement_one([5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, 5], aux117, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux161, M_00001_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux162, M_00001_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux163, M_00001_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux164, M_00001_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux165, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux85, M_00001_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux111, M_00001_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux88, M_00001_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux87, M_00001_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux107, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux89, M_00001_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux83, M_00001_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux109, M_00001_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux90, M_00001_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux108, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux84, M_00001_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux91, M_00001_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux86, M_00001_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux110, M_00001_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux106, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux100, M_00002_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux52, M_00002_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux54, M_00002_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux53, M_00002_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux102, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux46, M_00002_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux96, M_00002_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux50, M_00002_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux51, M_00002_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux94, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux93, M_00002_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux92, M_00002_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux101, M_00002_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux55, M_00002_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux103, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux48, M_00002_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux47, M_00002_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux49, M_00002_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux95, M_00002_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux97, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux121, M_00003_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux66, M_00003_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux64, M_00003_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux65, M_00003_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux124, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux69, M_00003_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux122, M_00003_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux63, M_00003_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux62, M_00003_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux123, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux166, M_00003_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux167, M_00003_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux168, M_00003_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux169, M_00003_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux170, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux68, M_00003_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux67, M_00003_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux70, M_00003_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux120, M_00003_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux125, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux130, M_00004_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux40, M_00004_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux41, M_00004_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux42, M_00004_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux132, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux60, M_00004_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux134, M_00004_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux57, M_00004_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux56, M_00004_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux136, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux45, M_00004_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux44, M_00004_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux131, M_00004_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux43, M_00004_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux133, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux61, M_00004_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux58, M_00004_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux59, M_00004_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux135, M_00004_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux137, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux112, M_00005_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux72, M_00005_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux77, M_00005_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux73, M_00005_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux114, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux81, M_00005_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux119, M_00005_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux78, M_00005_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux79, M_00005_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux116, 5)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1], aux75, M_00005_00001)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux76, M_00005_00002)
watchelement_one([1, 2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3], aux113, M_00005_00003)
watchelement_one([2, 3, 4, 5, 1, 1, 3, 3, 5, 1, 2, 3, 4], aux74, M_00005_00004)
watchelement_one([5, 1, 1, 3, 3, 5, 1, 2, 3, 4, 5], aux115, 5)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux80, M_00005_00001)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux71, M_00005_00001)
watchelement_one([1, 1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3], aux82, M_00005_00003)
watchelement_one([1, 3, 3, 5, 1, 2, 3, 4, 5, 1, 1, 3, 3], aux118, M_00005_00003)
watchelement_one([5, 1, 2, 3, 4, 5, 1, 1, 3, 3, 5], aux117, 5)
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004],[aux171, aux172, aux173, aux174, aux175, aux176, aux177, aux178, aux179, aux180, aux181, aux182, aux183, aux184, aux185, aux186, aux187, aux188, aux189, aux190])
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux89, aux140)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux121, aux140)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux66, aux141)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux83, aux141)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux64, aux142)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux109, aux142)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux65, aux143)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux90, aux143)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux124, aux144)
watchelement_one([5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5], aux108, aux144)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00001_00001, aux145)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux112, aux145)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux72, aux146)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux104, aux146)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00001_00003, aux147)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux77, aux147)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux73, aux148)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux105, aux148)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux81, aux149)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00002_00001, aux149)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux119, aux150)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux127, aux150)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux78, aux151)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00002_00003, aux151)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux79, aux152)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux126, aux152)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001], aux75, aux153)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00003_00001, aux153)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux76, aux154)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux128, aux154)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003], aux113, aux155)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00003_00003, aux155)
watchelement_one([M_00001_00002, M_00001_00003, M_00001_00004, 5, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004], aux74, aux156)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux129, aux156)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00004_00001, aux157)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux80, aux157)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux71, aux158)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux98, aux158)
watchelement_one([M_00005_00001, M_00005_00002, M_00005_00003], M_00004_00003, aux159)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003], aux82, aux159)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux118, aux160)
watchelement_one([M_00005_00002, M_00005_00003, M_00005_00004], aux99, aux160)
weightedsumleq([1,6],[-5,M_00001_00001],aux161)
weightedsumgeq([1,6],[-5,M_00001_00001],aux161)
weightedsumleq([1,5,1],[-6,M_00001_00001,M_00001_00002],aux162)
weightedsumgeq([1,5,1],[-6,M_00001_00001,M_00001_00002],aux162)
weightedsumleq([1,5,1],[-5,M_00001_00001,M_00001_00003],aux163)
weightedsumgeq([1,5,1],[-5,M_00001_00001,M_00001_00003],aux163)
weightedsumleq([1,5,1],[-6,M_00001_00001,M_00001_00004],aux164)
weightedsumgeq([1,5,1],[-6,M_00001_00001,M_00001_00004],aux164)
weightedsumleq([1,5],[-4,M_00001_00001],aux165)
weightedsumgeq([1,5],[-4,M_00001_00001],aux165)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00003,-5],aux166)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00003,-5],aux166)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00003,-6],aux167)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00003,-6],aux167)
weightedsumleq([6,1],[M_00003_00003,-5],aux168)
weightedsumgeq([6,1],[M_00003_00003,-5],aux168)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00004,-6],aux169)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00004,-6],aux169)
weightedsumleq([5,1],[M_00003_00003,-4],aux170)
weightedsumgeq([5,1],[M_00003_00003,-4],aux170)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00002,-6],aux40)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00002,-6],aux40)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00003,-5],aux41)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00003,-5],aux41)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00004,-6],aux42)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00004,-6],aux42)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00004,-6],aux43)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00004,-6],aux43)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-6],aux44)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-6],aux44)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00003,-5],aux45)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00003,-5],aux45)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00002,-10],aux46)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00002,-10],aux46)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00004,-11],aux47)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00004,-11],aux47)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00004,-10],aux48)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00004,-10],aux48)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-10],aux49)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-10],aux49)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00003,-10],aux50)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00003,-10],aux50)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00004,-11],aux51)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00004,-11],aux51)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00002,-6],aux52)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00002,-6],aux52)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00004,-6],aux53)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00004,-6],aux53)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00003,-5],aux54)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00003,-5],aux54)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-6],aux55)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-6],aux55)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00004,-11],aux56)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00004,-11],aux56)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-10],aux57)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-10],aux57)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00004,-11],aux58)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00004,-11],aux58)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00004,-10],aux59)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00004,-10],aux59)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00002,-10],aux60)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00002,-10],aux60)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00004,-10],aux61)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00004,-10],aux61)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-11],aux62)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-11],aux62)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00003,-10],aux63)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00003,-10],aux63)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00003,-5],aux64)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00003,-5],aux64)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00004,-6],aux65)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00004,-6],aux65)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00002,-6],aux66)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00002,-6],aux66)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-11],aux67)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-11],aux67)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00004,-10],aux68)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00004,-10],aux68)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00002,-10],aux69)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00002,-10],aux69)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00004,-10],aux70)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00004,-10],aux70)
weightedsumleq([1,1,5],[-11,M_00005_00002,M_00005_00004],aux71)
weightedsumgeq([1,1,5],[-11,M_00005_00002,M_00005_00004],aux71)
weightedsumleq([1,5,1],[-6,M_00005_00001,M_00005_00002],aux72)
weightedsumgeq([1,5,1],[-6,M_00005_00001,M_00005_00002],aux72)
weightedsumleq([1,5,1],[-6,M_00005_00001,M_00005_00004],aux73)
weightedsumgeq([1,5,1],[-6,M_00005_00001,M_00005_00004],aux73)
weightedsumleq([1,5,1],[-6,M_00005_00003,M_00005_00004],aux74)
weightedsumgeq([1,5,1],[-6,M_00005_00003,M_00005_00004],aux74)
weightedsumleq([1,1,5],[-5,M_00005_00001,M_00005_00003],aux75)
weightedsumgeq([1,1,5],[-5,M_00005_00001,M_00005_00003],aux75)
weightedsumleq([1,1,5],[-6,M_00005_00002,M_00005_00003],aux76)
weightedsumgeq([1,1,5],[-6,M_00005_00002,M_00005_00003],aux76)
weightedsumleq([1,5,1],[-5,M_00005_00001,M_00005_00003],aux77)
weightedsumgeq([1,5,1],[-5,M_00005_00001,M_00005_00003],aux77)
weightedsumleq([1,5,1],[-10,M_00005_00002,M_00005_00003],aux78)
weightedsumgeq([1,5,1],[-10,M_00005_00002,M_00005_00003],aux78)
weightedsumleq([1,5,1],[-11,M_00005_00002,M_00005_00004],aux79)
weightedsumgeq([1,5,1],[-11,M_00005_00002,M_00005_00004],aux79)
weightedsumleq([1,1,5],[-10,M_00005_00001,M_00005_00004],aux80)
weightedsumgeq([1,1,5],[-10,M_00005_00001,M_00005_00004],aux80)
weightedsumleq([1,1,5],[-10,M_00005_00001,M_00005_00002],aux81)
weightedsumgeq([1,1,5],[-10,M_00005_00001,M_00005_00002],aux81)
weightedsumleq([1,1,5],[-10,M_00005_00003,M_00005_00004],aux82)
weightedsumgeq([1,1,5],[-10,M_00005_00003,M_00005_00004],aux82)
weightedsumleq([1,1,5],[-6,M_00001_00002,M_00001_00003],aux83)
weightedsumgeq([1,1,5],[-6,M_00001_00002,M_00001_00003],aux83)
weightedsumleq([1,1,5],[-10,M_00001_00001,M_00001_00004],aux84)
weightedsumgeq([1,1,5],[-10,M_00001_00001,M_00001_00004],aux84)
weightedsumleq([1,1,5],[-10,M_00001_00001,M_00001_00002],aux85)
weightedsumgeq([1,1,5],[-10,M_00001_00001,M_00001_00002],aux85)
weightedsumleq([1,1,5],[-10,M_00001_00003,M_00001_00004],aux86)
weightedsumgeq([1,1,5],[-10,M_00001_00003,M_00001_00004],aux86)
weightedsumleq([1,5,1],[-11,M_00001_00002,M_00001_00004],aux87)
weightedsumgeq([1,5,1],[-11,M_00001_00002,M_00001_00004],aux87)
weightedsumleq([1,5,1],[-10,M_00001_00002,M_00001_00003],aux88)
weightedsumgeq([1,5,1],[-10,M_00001_00002,M_00001_00003],aux88)
weightedsumleq([1,1,5],[-5,M_00001_00001,M_00001_00003],aux89)
weightedsumgeq([1,1,5],[-5,M_00001_00001,M_00001_00003],aux89)
weightedsumleq([1,5,1],[-6,M_00001_00003,M_00001_00004],aux90)
weightedsumgeq([1,5,1],[-6,M_00001_00003,M_00001_00004],aux90)
weightedsumleq([1,1,5],[-11,M_00001_00002,M_00001_00004],aux91)
weightedsumgeq([1,1,5],[-11,M_00001_00002,M_00001_00004],aux91)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00003,-6],aux92)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00003,-6],aux92)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00003,-5],aux93)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00003,-5],aux93)
weightedsumleq([5,1],[M_00002_00002,-9],aux94)
weightedsumgeq([5,1],[M_00002_00002,-9],aux94)
weightedsumleq([6,1],[M_00002_00004,-11],aux95)
weightedsumgeq([6,1],[M_00002_00004,-11],aux95)
weightedsumleq([6,1],[M_00002_00002,-11],aux96)
weightedsumgeq([6,1],[M_00002_00002,-11],aux96)
weightedsumleq([5,1],[M_00002_00004,-9],aux97)
weightedsumgeq([5,1],[M_00002_00004,-9],aux97)
sumleq([M_00004_00002,-1],aux98)
sumgeq([M_00004_00002,-1],aux98)
sumleq([M_00004_00004,-1],aux99)
sumgeq([M_00004_00004,-1],aux99)
weightedsumleq([6,1],[M_00002_00001,-5],aux100)
weightedsumgeq([6,1],[M_00002_00001,-5],aux100)
weightedsumleq([6,1],[M_00002_00003,-5],aux101)
weightedsumgeq([6,1],[M_00002_00003,-5],aux101)
weightedsumleq([5,1],[M_00002_00001,-4],aux102)
weightedsumgeq([5,1],[M_00002_00001,-4],aux102)
weightedsumleq([5,1],[M_00002_00003,-4],aux103)
weightedsumgeq([5,1],[M_00002_00003,-4],aux103)
sumleq([-1,M_00001_00002],aux104)
sumgeq([-1,M_00001_00002],aux104)
sumleq([-1,M_00001_00004],aux105)
sumgeq([-1,M_00001_00004],aux105)
weightedsumleq([1,5],[-9,M_00001_00004],aux106)
weightedsumgeq([1,5],[-9,M_00001_00004],aux106)
weightedsumleq([1,5],[-9,M_00001_00002],aux107)
weightedsumgeq([1,5],[-9,M_00001_00002],aux107)
weightedsumleq([1,5],[-4,M_00001_00003],aux108)
weightedsumgeq([1,5],[-4,M_00001_00003],aux108)
weightedsumleq([1,6],[-5,M_00001_00003],aux109)
weightedsumgeq([1,6],[-5,M_00001_00003],aux109)
weightedsumleq([1,6],[-11,M_00001_00004],aux110)
weightedsumgeq([1,6],[-11,M_00001_00004],aux110)
weightedsumleq([1,6],[-11,M_00001_00002],aux111)
weightedsumgeq([1,6],[-11,M_00001_00002],aux111)
weightedsumleq([1,6],[-5,M_00005_00001],aux112)
weightedsumgeq([1,6],[-5,M_00005_00001],aux112)
weightedsumleq([1,6],[-5,M_00005_00003],aux113)
weightedsumgeq([1,6],[-5,M_00005_00003],aux113)
weightedsumleq([1,5],[-4,M_00005_00001],aux114)
weightedsumgeq([1,5],[-4,M_00005_00001],aux114)
weightedsumleq([1,5],[-4,M_00005_00003],aux115)
weightedsumgeq([1,5],[-4,M_00005_00003],aux115)
weightedsumleq([1,5],[-9,M_00005_00002],aux116)
weightedsumgeq([1,5],[-9,M_00005_00002],aux116)
weightedsumleq([1,5],[-9,M_00005_00004],aux117)
weightedsumgeq([1,5],[-9,M_00005_00004],aux117)
weightedsumleq([1,6],[-11,M_00005_00004],aux118)
weightedsumgeq([1,6],[-11,M_00005_00004],aux118)
weightedsumleq([1,6],[-11,M_00005_00002],aux119)
weightedsumgeq([1,6],[-11,M_00005_00002],aux119)
weightedsumleq([6,1],[M_00003_00004,-11],aux120)
weightedsumgeq([6,1],[M_00003_00004,-11],aux120)
weightedsumleq([6,1],[M_00003_00001,-5],aux121)
weightedsumgeq([6,1],[M_00003_00001,-5],aux121)
weightedsumleq([6,1],[M_00003_00002,-11],aux122)
weightedsumgeq([6,1],[M_00003_00002,-11],aux122)
weightedsumleq([5,1],[M_00003_00002,-9],aux123)
weightedsumgeq([5,1],[M_00003_00002,-9],aux123)
weightedsumleq([5,1],[M_00003_00001,-4],aux124)
weightedsumgeq([5,1],[M_00003_00001,-4],aux124)
weightedsumleq([5,1],[M_00003_00004,-9],aux125)
weightedsumgeq([5,1],[M_00003_00004,-9],aux125)
sumleq([M_00002_00004,-1],aux126)
sumgeq([M_00002_00004,-1],aux126)
sumleq([M_00002_00002,-1],aux127)
sumgeq([M_00002_00002,-1],aux127)
sumleq([M_00003_00002,-1],aux128)
sumgeq([M_00003_00002,-1],aux128)
sumleq([M_00003_00004,-1],aux129)
sumgeq([M_00003_00004,-1],aux129)
weightedsumleq([6,1],[M_00004_00001,-5],aux130)
weightedsumgeq([6,1],[M_00004_00001,-5],aux130)
weightedsumleq([6,1],[M_00004_00003,-5],aux131)
weightedsumgeq([6,1],[M_00004_00003,-5],aux131)
weightedsumleq([5,1],[M_00004_00001,-4],aux132)
weightedsumgeq([5,1],[M_00004_00001,-4],aux132)
weightedsumleq([5,1],[M_00004_00003,-4],aux133)
weightedsumgeq([5,1],[M_00004_00003,-4],aux133)
weightedsumleq([6,1],[M_00004_00002,-11],aux134)
weightedsumgeq([6,1],[M_00004_00002,-11],aux134)
weightedsumleq([6,1],[M_00004_00004,-11],aux135)
weightedsumgeq([6,1],[M_00004_00004,-11],aux135)
weightedsumleq([5,1],[M_00004_00002,-9],aux136)
weightedsumgeq([5,1],[M_00004_00002,-9],aux136)
weightedsumleq([5,1],[M_00004_00004,-9],aux137)
weightedsumgeq([5,1],[M_00004_00004,-9],aux137)
sumleq([-1,M_00005_00004],aux138)
sumgeq([-1,M_00005_00004],aux138)
sumleq([-1,M_00005_00002],aux139)
sumgeq([-1,M_00005_00002],aux139)
**EOF**
