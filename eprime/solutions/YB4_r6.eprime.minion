MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 34
# CSE_active_eliminated_expressions = 84
# CSE_active_total_size = 140
**VARIABLES**
DISCRETE M_00001_00001 #
{1..2}
DISCRETE M_00001_00002 #
{1..2}
DISCRETE M_00002_00001 #
{1..2}
DISCRETE M_00002_00002 #
{1..2}
DISCRETE M_00003_00001 #
{1..2}
DISCRETE M_00003_00002 #
{1..2}
DISCRETE M_00004_00001 #
{1..2}
DISCRETE M_00004_00002 #
{1..2}
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002], M_00004_00002)
{1..2}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00001, M_00003_00002], M_00004_00001)
{1..2}
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 4*M_00002_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux10, [2,2,5,5])
**VARIABLES**
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + M_00002_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux11, [2,2,5,5])
**VARIABLES**
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00001 + M_00004_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux12, [2,2,5,5])
**VARIABLES**
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 4*M_00004_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux13, [2,2,5,5])
**VARIABLES**
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + M_00003_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux14, [2,2,5,5])
**VARIABLES**
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 4*M_00003_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux15, [2,2,5,5])
**VARIABLES**
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 4*M_00001_00001 + M_00001_00002)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux16, [2,2,5,5])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + M_00001_00001 + 4*M_00001_00002)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux17, [2,2,5,5])
**VARIABLES**
DISCRETE aux18 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00004_00002 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux18, [1,1,5,5])
**VARIABLES**
DISCRETE aux19 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00004_00001 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux19, [1,1,5,5])
**VARIABLES**
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux20, [1,1,6,6])
**VARIABLES**
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux21, [1,1,6,6])
**VARIABLES**
DISCRETE aux22 #Active-CSE: 4 occurrences of this expression or equivalent: (-3 + 4*M_00001_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux22, [1,1,5,5])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 4 occurrences of this expression or equivalent: (-3 + 4*M_00001_00002)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux23, [1,1,5,5])
**VARIABLES**
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux24, [1,1,6,6])
**VARIABLES**
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux25, [1,1,6,6])
**VARIABLES**
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux26, [1,1,6,6])
**VARIABLES**
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux27, [1,1,6,6])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00002_00001 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux28, [1,1,5,5])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00002_00002 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux29, [1,1,5,5])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00003_00001 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux30, [1,1,5,5])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 4 occurrences of this expression or equivalent: (4*M_00003_00002 + -3)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux31, [1,1,5,5])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux32, [1,1,6,6])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux33, [1,1,6,6])
**VARIABLES**
DISCRETE aux34 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux24) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux20)
{1..4}
DISCRETE aux35 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux16) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux11)
{1..4}
DISCRETE aux36 #ElementOne([3, 4, M_00002_00001, M_00002_00002, 3], aux22) --- ElementOne([3, 4, M_00002_00001, M_00002_00002, 3], aux28)
{1..4}
DISCRETE aux37 #ElementOne([4, M_00002_00001, M_00002_00002, 3, 4], aux22) --- ElementOne([4, M_00002_00001, M_00002_00002, 3, 4], aux28)
{1..4}
DISCRETE aux38 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux27) --- ElementOne([M_00003_00001, M_00003_00002], M_00001_00001)
{1..2}
DISCRETE aux39 #ElementOne([M_00003_00001, M_00003_00002], M_00001_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux14)
{1..2}
DISCRETE aux40 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux33) --- ElementOne([M_00004_00001, M_00004_00002], M_00001_00001)
{1..2}
DISCRETE aux41 #ElementOne([M_00004_00001, M_00004_00002], M_00001_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux12)
{1..2}
DISCRETE aux42 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux17) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux10)
{1..4}
DISCRETE aux43 #ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux25) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux21)
{1..4}
DISCRETE aux44 #ElementOne([3, 4, M_00002_00001, M_00002_00002, 3], aux23) --- ElementOne([3, 4, M_00002_00001, M_00002_00002, 3], aux29)
{1..4}
DISCRETE aux45 #ElementOne([4, M_00002_00001, M_00002_00002, 3, 4], aux23) --- ElementOne([4, M_00002_00001, M_00002_00002, 3, 4], aux29)
{1..4}
DISCRETE aux46 #ElementOne([M_00003_00001, M_00003_00002], M_00002_00001) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux15)
{1..2}
DISCRETE aux47 #ElementOne([M_00003_00001, M_00003_00002], M_00002_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux26)
{1..2}
DISCRETE aux48 #ElementOne([M_00004_00001, M_00004_00002], M_00002_00001) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux13)
{1..2}
DISCRETE aux49 #ElementOne([M_00004_00001, M_00004_00002], M_00002_00002) --- ElementOne([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux32)
{1..2}
DISCRETE aux50 #ElementOne([2, 1], M_00002_00002)
{1..2}
DISCRETE aux51 #ElementOne([2, 1], M_00002_00001)
{1..2}
DISCRETE aux52 #ElementOne([2, 1], M_00001_00002)
{1..2}
DISCRETE aux53 #ElementOne([2, 1], M_00001_00001)
{1..2}
DISCRETE aux54 #ElementOne([2, 1], M_00003_00002)
{1..2}
DISCRETE aux55 #ElementOne([2, 1], M_00003_00001)
{1..2}
DISCRETE aux56 #ElementOne([2, 1], M_00004_00002)
{1..2}
DISCRETE aux57 #ElementOne([2, 1], M_00004_00001)
{1..2}
**TUPLELIST**
rack 4 4
1 1 3 4 
2 2 3 4 
1 2 3 4 
1 2 3 3 
**VARIABLES**
ALIAS rack[4,4]=[[1, 1, 3, 4], [2, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 3]]
**TUPLELIST**
perms 2 4
1 2 3 4 
2 1 3 4 
**VARIABLES**
ALIAS perms[2,4]=[[1, 2, 3, 4], [2, 1, 3, 4]]
**TUPLELIST**
inverses 2 4
1 2 3 4 
2 1 3 4 
**VARIABLES**
ALIAS inverses[2,4]=[[1, 2, 3, 4], [2, 1, 3, 4]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00002_00001],[M_00002_00002],[M_00003_00001],[M_00003_00002],[M_00004_00001],[M_00004_00002]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00002_00001, M_00002_00002, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002]
**CONSTRAINTS**
watchelement_one([2, 1], M_00002_00002, aux50)
watchelement_one([2, 1], M_00002_00001, aux51)
watchelement_one([2, 1], M_00001_00002, aux52)
watchelement_one([2, 1], M_00001_00001, aux53)
watchelement_one([2, 1], M_00003_00002, aux54)
watchelement_one([2, 1], M_00003_00001, aux55)
watchelement_one([2, 1], M_00004_00002, aux56)
watchelement_one([2, 1], M_00004_00001, aux57)
watchelement_one([1, 2], M_00001_00002, M_00001_00002)
watchelement_one([1, 2], M_00001_00001, M_00001_00001)
watchelement_one([1, 2], M_00003_00002, M_00003_00002)
watchelement_one([1, 2], M_00003_00001, M_00003_00001)
watchelement_one([M_00003_00001, M_00003_00002], M_00004_00002, aux4)
watchelement_one([M_00003_00001, M_00003_00002], M_00004_00001, aux5)
watchelement_one([1, 2], M_00002_00002, M_00002_00002)
watchelement_one([1, 2], M_00002_00001, M_00002_00001)
watchelement_one([1, 2], M_00004_00001, M_00004_00001)
watchelement_one([1, 2], M_00004_00002, M_00004_00002)
diseq(M_00001_00001,M_00001_00002)
diseq(M_00002_00001,M_00002_00002)
diseq(M_00003_00001,M_00003_00002)
diseq(M_00004_00001,M_00004_00002)
watchelement_one([3, 4, M_00002_00001, M_00002_00002, 3], aux30, 3)
watchelement_one([4, M_00002_00001, M_00002_00002, 3, 4], aux30, 4)
watchelement_one([3, 4, M_00002_00001, M_00002_00002, 3], aux19, 3)
watchelement_one([4, M_00002_00001, M_00002_00002, 3, 4], aux19, 4)
watchelement_one([3, 4, M_00002_00001, M_00002_00002, 3], aux31, 3)
watchelement_one([4, M_00002_00001, M_00002_00002, 3, 4], aux31, 4)
watchelement_one([3, 4, M_00002_00001, M_00002_00002, 3], aux18, 3)
watchelement_one([4, M_00002_00001, M_00002_00002, 3, 4], aux18, 4)
watchelement_one([M_00004_00001, M_00004_00002], M_00003_00001, aux5)
watchelement_one([M_00004_00001, M_00004_00002], M_00003_00002, aux4)
watchelement_one([M_00004_00001, M_00004_00002], M_00004_00001, aux5)
watchelement_one([M_00004_00001, M_00004_00002], M_00004_00002, aux4)
watchelement_one([1, 1, 3, 4, 2, 2], aux24, M_00001_00001)
watchelement_one([1, 1, 3, 4, 2], aux16, M_00001_00001)
watchelement_one([3, 4, 2, 2, 3], aux22, 3)
watchelement_one([4, 2, 2, 3, 4], aux22, 4)
watchelement_one([1, 1, 3, 4, 2], aux17, M_00001_00002)
watchelement_one([1, 1, 3, 4, 2, 2], aux25, M_00001_00002)
watchelement_one([3, 4, 2, 2, 3], aux23, 3)
watchelement_one([4, 2, 2, 3, 4], aux23, 4)
watchelement_one([1, 1, 3, 4, 2, 2], aux20, M_00002_00001)
watchelement_one([1, 1, 3, 4, 2], aux11, M_00002_00001)
watchelement_one([3, 4, 2, 2, 3], aux28, 3)
watchelement_one([4, 2, 2, 3, 4], aux28, 4)
watchelement_one([1, 1, 3, 4, 2], aux10, M_00002_00002)
watchelement_one([1, 1, 3, 4, 2, 2], aux21, M_00002_00002)
watchelement_one([3, 4, 2, 2, 3], aux29, 3)
watchelement_one([4, 2, 2, 3, 4], aux29, 4)
watchelement_one([1, 1, 3, 4, 2, 2], aux27, M_00003_00001)
watchelement_one([1, 1, 3, 4, 2], aux14, M_00003_00001)
watchelement_one([3, 4, 2, 2, 3], aux30, 3)
watchelement_one([4, 2, 2, 3, 4], aux30, 4)
watchelement_one([1, 1, 3, 4, 2], aux15, M_00003_00002)
watchelement_one([1, 1, 3, 4, 2, 2], aux26, M_00003_00002)
watchelement_one([3, 4, 2, 2, 3], aux31, 3)
watchelement_one([4, 2, 2, 3, 4], aux31, 4)
watchelement_one([1, 1, 3, 4, 2, 2], aux33, M_00004_00001)
watchelement_one([1, 1, 3, 4, 2], aux12, M_00004_00001)
watchelement_one([3, 4, 2, 2, 3], aux19, 3)
watchelement_one([4, 2, 2, 3, 4], aux19, 4)
watchelement_one([1, 1, 3, 4, 2], aux13, M_00004_00002)
watchelement_one([1, 1, 3, 4, 2, 2], aux32, M_00004_00002)
watchelement_one([3, 4, 2, 2, 3], aux18, 3)
watchelement_one([4, 2, 2, 3, 4], aux18, 4)
lexleq([M_00001_00001, M_00001_00002, M_00002_00001, M_00002_00002, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002],[aux50, aux51, aux52, aux53, aux54, aux55, aux56, aux57])
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux24, aux34)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux20, aux34)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux16, aux35)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux11, aux35)
watchelement_one([3, 4, M_00002_00001, M_00002_00002, 3], aux22, aux36)
watchelement_one([3, 4, M_00002_00001, M_00002_00002, 3], aux28, aux36)
watchelement_one([4, M_00002_00001, M_00002_00002, 3, 4], aux22, aux37)
watchelement_one([4, M_00002_00001, M_00002_00002, 3, 4], aux28, aux37)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux27, aux38)
watchelement_one([M_00003_00001, M_00003_00002], M_00001_00001, aux38)
watchelement_one([M_00003_00001, M_00003_00002], M_00001_00002, aux39)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux14, aux39)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux33, aux40)
watchelement_one([M_00004_00001, M_00004_00002], M_00001_00001, aux40)
watchelement_one([M_00004_00001, M_00004_00002], M_00001_00002, aux41)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux12, aux41)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux17, aux42)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux10, aux42)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux25, aux43)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux21, aux43)
watchelement_one([3, 4, M_00002_00001, M_00002_00002, 3], aux23, aux44)
watchelement_one([3, 4, M_00002_00001, M_00002_00002, 3], aux29, aux44)
watchelement_one([4, M_00002_00001, M_00002_00002, 3, 4], aux23, aux45)
watchelement_one([4, M_00002_00001, M_00002_00002, 3, 4], aux29, aux45)
watchelement_one([M_00003_00001, M_00003_00002], M_00002_00001, aux46)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux15, aux46)
watchelement_one([M_00003_00001, M_00003_00002], M_00002_00002, aux47)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux26, aux47)
watchelement_one([M_00004_00001, M_00004_00002], M_00002_00001, aux48)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001], aux13, aux48)
watchelement_one([M_00004_00001, M_00004_00002], M_00002_00002, aux49)
watchelement_one([M_00001_00001, M_00001_00002, 3, 4, M_00002_00001, M_00002_00002], aux32, aux49)
weightedsumleq([1,4,1],[M_00002_00001,M_00002_00002,-4],aux10)
weightedsumgeq([1,4,1],[M_00002_00001,M_00002_00002,-4],aux10)
weightedsumleq([4,1,1],[M_00002_00001,M_00002_00002,-4],aux11)
weightedsumgeq([4,1,1],[M_00002_00001,M_00002_00002,-4],aux11)
weightedsumleq([4,1,1],[M_00004_00001,M_00004_00002,-4],aux12)
weightedsumgeq([4,1,1],[M_00004_00001,M_00004_00002,-4],aux12)
weightedsumleq([1,4,1],[M_00004_00001,M_00004_00002,-4],aux13)
weightedsumgeq([1,4,1],[M_00004_00001,M_00004_00002,-4],aux13)
weightedsumleq([4,1,1],[M_00003_00001,M_00003_00002,-4],aux14)
weightedsumgeq([4,1,1],[M_00003_00001,M_00003_00002,-4],aux14)
weightedsumleq([1,4,1],[M_00003_00001,M_00003_00002,-4],aux15)
weightedsumgeq([1,4,1],[M_00003_00001,M_00003_00002,-4],aux15)
weightedsumleq([1,4,1],[-4,M_00001_00001,M_00001_00002],aux16)
weightedsumgeq([1,4,1],[-4,M_00001_00001,M_00001_00002],aux16)
weightedsumleq([1,1,4],[-4,M_00001_00001,M_00001_00002],aux17)
weightedsumgeq([1,1,4],[-4,M_00001_00001,M_00001_00002],aux17)
weightedsumleq([4,1],[M_00004_00002,-3],aux18)
weightedsumgeq([4,1],[M_00004_00002,-3],aux18)
weightedsumleq([4,1],[M_00004_00001,-3],aux19)
weightedsumgeq([4,1],[M_00004_00001,-3],aux19)
weightedsumleq([5,1],[M_00002_00001,-4],aux20)
weightedsumgeq([5,1],[M_00002_00001,-4],aux20)
weightedsumleq([5,1],[M_00002_00002,-4],aux21)
weightedsumgeq([5,1],[M_00002_00002,-4],aux21)
weightedsumleq([1,4],[-3,M_00001_00001],aux22)
weightedsumgeq([1,4],[-3,M_00001_00001],aux22)
weightedsumleq([1,4],[-3,M_00001_00002],aux23)
weightedsumgeq([1,4],[-3,M_00001_00002],aux23)
weightedsumleq([1,5],[-4,M_00001_00001],aux24)
weightedsumgeq([1,5],[-4,M_00001_00001],aux24)
weightedsumleq([1,5],[-4,M_00001_00002],aux25)
weightedsumgeq([1,5],[-4,M_00001_00002],aux25)
weightedsumleq([5,1],[M_00003_00002,-4],aux26)
weightedsumgeq([5,1],[M_00003_00002,-4],aux26)
weightedsumleq([5,1],[M_00003_00001,-4],aux27)
weightedsumgeq([5,1],[M_00003_00001,-4],aux27)
weightedsumleq([4,1],[M_00002_00001,-3],aux28)
weightedsumgeq([4,1],[M_00002_00001,-3],aux28)
weightedsumleq([4,1],[M_00002_00002,-3],aux29)
weightedsumgeq([4,1],[M_00002_00002,-3],aux29)
weightedsumleq([4,1],[M_00003_00001,-3],aux30)
weightedsumgeq([4,1],[M_00003_00001,-3],aux30)
weightedsumleq([4,1],[M_00003_00002,-3],aux31)
weightedsumgeq([4,1],[M_00003_00002,-3],aux31)
weightedsumleq([5,1],[M_00004_00002,-4],aux32)
weightedsumgeq([5,1],[M_00004_00002,-4],aux32)
weightedsumleq([5,1],[M_00004_00001,-4],aux33)
weightedsumgeq([5,1],[M_00004_00001,-4],aux33)
**EOF**
