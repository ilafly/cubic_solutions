MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 37
# CSE_active_eliminated_expressions = 78
# CSE_active_total_size = 232
**VARIABLES**
DISCRETE M_00001_00001 #
{1..2}
DISCRETE M_00001_00002 #
{2..3}
DISCRETE M_00001_00003 #
{1..3}
DISCRETE M_00002_00001 #
{1..3}
DISCRETE M_00002_00002 #
{1..3}
DISCRETE M_00002_00003 #
{1..3}
DISCRETE M_00003_00001 #
{1..3}
DISCRETE M_00003_00002 #
{1..3}
DISCRETE M_00003_00003 #
{1..3}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], (M_00003_00002 + 3*M_00003_00003 + -3))
{1..3}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], (M_00003_00001 + 3*M_00003_00003 + -3))
{1..3}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], (3*M_00002_00002 + M_00002_00003 + -3))
{1..3}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], (M_00002_00001 + 3*M_00002_00002 + -3))
{1..3}
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], (4*M_00003_00003 + -3))
{1..3}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], (4*M_00002_00002 + -3))
{1..3}
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003], (-3 + 3*M_00001_00001 + M_00001_00003))
{1..3}
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003], (-4 + 3*M_00001_00001 + M_00001_00002))
{1..3}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002], (-3 + 4*M_00001_00001))
{1..3}
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 3*M_00002_00003 + -3)
{2..8}
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 3*M_00002_00003 + -3)
{3..8}
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00002_00001 + M_00002_00003 + -3)
{2..8}
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00002_00001 + M_00002_00002 + -3)
{2..7}
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 3*M_00003_00003 + -3)
{2..8}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 3*M_00003_00003 + -3)
{2..7}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00003_00001 + M_00003_00003 + -3)
{2..8}
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00003_00001 + M_00003_00002 + -3)
{2..8}
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00003_00002 + M_00003_00003 + -3)
{2..8}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 3*M_00003_00002 + -3)
{3..8}
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + M_00001_00001 + 3*M_00001_00002)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux19, [1,2,4,5])
**VARIABLES**
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + M_00001_00001 + 3*M_00001_00003)
{2..7}
**CONSTRAINTS**
w-inintervalset(aux20, [2,2,4,5,7,7])
**VARIABLES**
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 3*M_00001_00002 + M_00001_00003)
{1..6}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + M_00001_00002 + 3*M_00001_00003)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux22, [1,2,4,5,7,8])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (3*M_00002_00002 + M_00002_00003 + -3)
{2..8}
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 3*M_00002_00002 + -3)
{2..8}
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 3*M_00001_00001 + M_00001_00002)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux25, [1,2,4,5])
**VARIABLES**
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + 3*M_00001_00001 + M_00001_00003)
{2..4}
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + -3)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux27, [1,1,5,5,9,9])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00003 + -3)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux28, [1,1,5,5,9,9])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00002 + -3)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux29, [1,1,5,5,9,9])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 4*M_00001_00002)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux30, [1,1,5,5])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + 4*M_00001_00003)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux31, [1,1,5,5,9,9])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 6 occurrences of this expression or equivalent: (-1 + M_00001_00002)
{1..2}
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + 4*M_00001_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux33, [1,1,5,5])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + -3)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux34, [1,1,5,5,9,9])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00002 + -3)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux35, [1,1,5,5,9,9])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00003 + -3)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux36, [1,1,5,5,9,9])
**VARIABLES**
DISCRETE aux37 #ElementOne([1, 2], M_00001_00001)
{1..2}
DISCRETE aux38 #ElementOne([2, 3], aux32)
{2..3}
DISCRETE aux39 #ElementOne([1, 2, 3], M_00001_00003)
{1..3}
DISCRETE aux40 #ElementOne([1, 2, 3], M_00002_00001)
{1..3}
DISCRETE aux41 #ElementOne([1, 2, 3], M_00002_00002)
{1..3}
DISCRETE aux42 #ElementOne([1, 2, 3], M_00002_00003)
{1..3}
DISCRETE aux43 #ElementOne([1, 2, 3], M_00003_00001)
{1..3}
DISCRETE aux44 #ElementOne([1, 2, 3], M_00003_00002)
{1..3}
DISCRETE aux45 #ElementOne([1, 2, 3], M_00003_00003)
{1..3}
DISCRETE aux46 #ElementOne([1, 3], M_00001_00001)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux46, [1,1,3,3])
**VARIABLES**
DISCRETE aux47 #ElementOne([1, 3, 2], M_00001_00003)
{1..3}
DISCRETE aux48 #ElementOne([3, 2], aux32)
{2..3}
DISCRETE aux49 #ElementOne([1, 3, 2], M_00003_00001)
{1..3}
DISCRETE aux50 #ElementOne([1, 3, 2], M_00003_00003)
{1..3}
DISCRETE aux51 #ElementOne([1, 3, 2], M_00003_00002)
{1..3}
DISCRETE aux52 #ElementOne([1, 3, 2], M_00002_00001)
{1..3}
DISCRETE aux53 #ElementOne([1, 3, 2], M_00002_00003)
{1..3}
DISCRETE aux54 #ElementOne([1, 3, 2], M_00002_00002)
{1..3}
DISCRETE aux55 #ElementOne([3, 2, 1], M_00003_00003)
{1..3}
DISCRETE aux56 #ElementOne([3, 2, 1], M_00003_00002)
{1..3}
DISCRETE aux57 #ElementOne([3, 2, 1], M_00003_00001)
{1..3}
DISCRETE aux58 #ElementOne([3, 2, 1], M_00002_00003)
{1..3}
DISCRETE aux59 #ElementOne([3, 2, 1], M_00002_00002)
{1..3}
DISCRETE aux60 #ElementOne([3, 2, 1], M_00002_00001)
{1..3}
DISCRETE aux61 #ElementOne([3, 2, 1], M_00001_00003)
{1..3}
DISCRETE aux62 #ElementOne([2, 1], aux32)
{1..2}
DISCRETE aux63 #ElementOne([3, 2], M_00001_00001)
{2..3}
DISCRETE aux64 #ElementOne([2, 3, 1], M_00003_00003)
{1..3}
DISCRETE aux65 #ElementOne([2, 3, 1], M_00003_00001)
{1..3}
DISCRETE aux66 #ElementOne([2, 3, 1], M_00003_00002)
{1..3}
DISCRETE aux67 #ElementOne([2, 3, 1], M_00001_00003)
{1..3}
DISCRETE aux68 #ElementOne([2, 3], M_00001_00001)
{2..3}
DISCRETE aux69 #ElementOne([3, 1], aux32)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux69, [1,1,3,3])
**VARIABLES**
DISCRETE aux70 #ElementOne([2, 3, 1], M_00002_00003)
{1..3}
DISCRETE aux71 #ElementOne([2, 3, 1], M_00002_00001)
{1..3}
DISCRETE aux72 #ElementOne([2, 3, 1], M_00002_00002)
{1..3}
DISCRETE aux73 #ElementOne([3, 1, 2], M_00002_00002)
{1..3}
DISCRETE aux74 #ElementOne([3, 1, 2], M_00002_00003)
{1..3}
DISCRETE aux75 #ElementOne([3, 1, 2], M_00002_00001)
{1..3}
DISCRETE aux76 #ElementOne([3, 1, 2], M_00003_00002)
{1..3}
DISCRETE aux77 #ElementOne([3, 1, 2], M_00003_00003)
{1..3}
DISCRETE aux78 #ElementOne([3, 1, 2], M_00003_00001)
{1..3}
DISCRETE aux79 #ElementOne([1, 2], aux32)
{1..2}
DISCRETE aux80 #ElementOne([3, 1, 2], M_00001_00003)
{1..3}
DISCRETE aux81 #ElementOne([3, 1], M_00001_00001)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux81, [1,1,3,3])
**VARIABLES**
DISCRETE aux82 #ElementOne([2, 1, 3], M_00002_00002)
{1..3}
DISCRETE aux83 #ElementOne([2, 1, 3], M_00002_00001)
{1..3}
DISCRETE aux84 #ElementOne([2, 1, 3], M_00002_00003)
{1..3}
DISCRETE aux85 #ElementOne([1, 3], aux32)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux85, [1,1,3,3])
**VARIABLES**
DISCRETE aux86 #ElementOne([2, 1], M_00001_00001)
{1..2}
DISCRETE aux87 #ElementOne([2, 1, 3], M_00001_00003)
{1..3}
DISCRETE aux88 #ElementOne([2, 1, 3], M_00003_00002)
{1..3}
DISCRETE aux89 #ElementOne([2, 1, 3], M_00003_00001)
{1..3}
DISCRETE aux90 #ElementOne([2, 1, 3], M_00003_00003)
{1..3}
**TUPLELIST**
rack 3 3
1 1 1 
2 2 2 
3 3 3 
**VARIABLES**
ALIAS rack[3,3]=[[1, 1, 1], [2, 2, 2], [3, 3, 3]]
**TUPLELIST**
perms 6 3
1 2 3 
1 3 2 
3 2 1 
3 1 2 
2 3 1 
2 1 3 
**VARIABLES**
ALIAS perms[6,3]=[[1, 2, 3], [1, 3, 2], [3, 2, 1], [3, 1, 2], [2, 3, 1], [2, 1, 3]]
**TUPLELIST**
inverses 6 3
1 2 3 
1 3 2 
3 2 1 
2 3 1 
3 1 2 
2 1 3 
**VARIABLES**
ALIAS inverses[6,3]=[[1, 2, 3], [1, 3, 2], [3, 2, 1], [2, 3, 1], [3, 1, 2], [2, 1, 3]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00001_00003],[M_00002_00001],[M_00002_00002],[M_00002_00003],[M_00003_00001],[M_00003_00002],[M_00003_00003]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003]
**CONSTRAINTS**
watchelement_one([1, 2], M_00001_00001, aux37)
watchelement_one([2, 3], aux32, aux38)
watchelement_one([1, 2, 3], M_00001_00003, aux39)
watchelement_one([1, 2, 3], M_00002_00001, aux40)
watchelement_one([1, 2, 3], M_00002_00002, aux41)
watchelement_one([1, 2, 3], M_00002_00003, aux42)
watchelement_one([1, 2, 3], M_00003_00001, aux43)
watchelement_one([1, 2, 3], M_00003_00002, aux44)
watchelement_one([1, 2, 3], M_00003_00003, aux45)
watchelement_one([1, 3], M_00001_00001, aux46)
watchelement_one([1, 3, 2], M_00001_00003, aux47)
watchelement_one([3, 2], aux32, aux48)
watchelement_one([1, 3, 2], M_00003_00001, aux49)
watchelement_one([1, 3, 2], M_00003_00003, aux50)
watchelement_one([1, 3, 2], M_00003_00002, aux51)
watchelement_one([1, 3, 2], M_00002_00001, aux52)
watchelement_one([1, 3, 2], M_00002_00003, aux53)
watchelement_one([1, 3, 2], M_00002_00002, aux54)
watchelement_one([3, 2, 1], M_00003_00003, aux55)
watchelement_one([3, 2, 1], M_00003_00002, aux56)
watchelement_one([3, 2, 1], M_00003_00001, aux57)
watchelement_one([3, 2, 1], M_00002_00003, aux58)
watchelement_one([3, 2, 1], M_00002_00002, aux59)
watchelement_one([3, 2, 1], M_00002_00001, aux60)
watchelement_one([3, 2, 1], M_00001_00003, aux61)
watchelement_one([2, 1], aux32, aux62)
watchelement_one([3, 2], M_00001_00001, aux63)
watchelement_one([2, 3, 1], M_00003_00003, aux64)
watchelement_one([2, 3, 1], M_00003_00001, aux65)
watchelement_one([2, 3, 1], M_00003_00002, aux66)
watchelement_one([2, 3, 1], M_00001_00003, aux67)
watchelement_one([2, 3], M_00001_00001, aux68)
watchelement_one([3, 1], aux32, aux69)
watchelement_one([2, 3, 1], M_00002_00003, aux70)
watchelement_one([2, 3, 1], M_00002_00001, aux71)
watchelement_one([2, 3, 1], M_00002_00002, aux72)
watchelement_one([3, 1, 2], M_00002_00002, aux73)
watchelement_one([3, 1, 2], M_00002_00003, aux74)
watchelement_one([3, 1, 2], M_00002_00001, aux75)
watchelement_one([3, 1, 2], M_00003_00002, aux76)
watchelement_one([3, 1, 2], M_00003_00003, aux77)
watchelement_one([3, 1, 2], M_00003_00001, aux78)
watchelement_one([1, 2], aux32, aux79)
watchelement_one([3, 1, 2], M_00001_00003, aux80)
watchelement_one([3, 1], M_00001_00001, aux81)
watchelement_one([2, 1, 3], M_00002_00002, aux82)
watchelement_one([2, 1, 3], M_00002_00001, aux83)
watchelement_one([2, 1, 3], M_00002_00003, aux84)
watchelement_one([1, 3], aux32, aux85)
watchelement_one([2, 1], M_00001_00001, aux86)
watchelement_one([2, 1, 3], M_00001_00003, aux87)
watchelement_one([2, 1, 3], M_00003_00002, aux88)
watchelement_one([2, 1, 3], M_00003_00001, aux89)
watchelement_one([2, 1, 3], M_00003_00003, aux90)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux13, aux0)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001], aux14, aux1)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux23, aux2)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux24, aux3)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux36, aux4)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux29, aux5)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001], aux26, aux6)
watchelement_one([M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003], aux25, aux7)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002], aux33, aux8)
gacalldiff([M_00001_00001, M_00001_00002, M_00001_00003])
gacalldiff([M_00002_00001, M_00002_00002, M_00002_00003])
gacalldiff([M_00003_00001, M_00003_00002, M_00003_00003])
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux27, aux8)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001], aux12, aux7)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux11, aux6)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux34, aux8)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux16, aux7)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux15, aux6)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux19, aux3)
watchelement_one([M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux30, aux5)
watchelement_one([M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux21, aux2)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux18, aux3)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux35, aux5)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux17, aux2)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001], aux20, aux1)
watchelement_one([M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux22, aux0)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux31, aux4)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux9, aux1)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002], aux10, aux0)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003], aux28, aux4)
watchelement_one([1, 1, 1, 2, 2], aux33, M_00001_00001)
watchelement_one([1, 1, 2, 2, 2], aux25, M_00001_00001)
watchelement_one([1, 1, 1, 2], aux26, M_00001_00001)
watchelement_one([2, 2, 2, 3, 3], aux19, M_00001_00002)
watchelement_one([2, 2, 3, 3, 3], aux30, M_00001_00002)
watchelement_one([2, 2, 2, 3, 3, 3], aux21, M_00001_00002)
watchelement_one([1, 1, 1, 2, 2, 2, 3], aux20, M_00001_00003)
watchelement_one([1, 1, 2, 2, 2, 3, 3, 3], aux22, M_00001_00003)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3, 3], aux31, M_00001_00003)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3, 3], aux27, M_00002_00001)
watchelement_one([1, 1, 1, 2, 2, 2, 3], aux12, M_00002_00001)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux11, M_00002_00001)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux24, M_00002_00002)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3, 3], aux29, M_00002_00002)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux23, M_00002_00002)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux9, M_00002_00003)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux10, M_00002_00003)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3, 3], aux28, M_00002_00003)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3, 3], aux34, M_00003_00001)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux16, M_00003_00001)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux15, M_00003_00001)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux18, M_00003_00002)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3, 3], aux35, M_00003_00002)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux17, M_00003_00002)
watchelement_one([1, 1, 1, 2, 2, 2, 3], aux14, M_00003_00003)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3], aux13, M_00003_00003)
watchelement_one([1, 1, 1, 2, 2, 2, 3, 3, 3], aux36, M_00003_00003)
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003],[aux37, aux38, aux39, aux40, aux41, aux42, aux43, aux44, aux45])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003],[aux46, aux47, aux48, aux49, aux50, aux51, aux52, aux53, aux54])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003],[aux55, aux56, aux57, aux58, aux59, aux60, aux61, aux62, aux63])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003],[aux64, aux65, aux66, aux67, aux68, aux69, aux70, aux71, aux72])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003],[aux73, aux74, aux75, aux76, aux77, aux78, aux79, aux80, aux81])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00002_00001, M_00002_00002, M_00002_00003, M_00003_00001, M_00003_00002, M_00003_00003],[aux82, aux83, aux84, aux85, aux86, aux87, aux88, aux89, aux90])
weightedsumleq([1,3,1],[M_00002_00001,M_00002_00003,-3],aux9)
weightedsumgeq([1,3,1],[M_00002_00001,M_00002_00003,-3],aux9)
weightedsumleq([1,3,1],[M_00002_00002,M_00002_00003,-3],aux10)
weightedsumgeq([1,3,1],[M_00002_00002,M_00002_00003,-3],aux10)
weightedsumleq([3,1,1],[M_00002_00001,M_00002_00003,-3],aux11)
weightedsumgeq([3,1,1],[M_00002_00001,M_00002_00003,-3],aux11)
weightedsumleq([3,1,1],[M_00002_00001,M_00002_00002,-3],aux12)
weightedsumgeq([3,1,1],[M_00002_00001,M_00002_00002,-3],aux12)
weightedsumleq([1,3,1],[M_00003_00002,M_00003_00003,-3],aux13)
weightedsumgeq([1,3,1],[M_00003_00002,M_00003_00003,-3],aux13)
weightedsumleq([1,3,1],[M_00003_00001,M_00003_00003,-3],aux14)
weightedsumgeq([1,3,1],[M_00003_00001,M_00003_00003,-3],aux14)
weightedsumleq([3,1,1],[M_00003_00001,M_00003_00003,-3],aux15)
weightedsumgeq([3,1,1],[M_00003_00001,M_00003_00003,-3],aux15)
weightedsumleq([3,1,1],[M_00003_00001,M_00003_00002,-3],aux16)
weightedsumgeq([3,1,1],[M_00003_00001,M_00003_00002,-3],aux16)
weightedsumleq([3,1,1],[M_00003_00002,M_00003_00003,-3],aux17)
weightedsumgeq([3,1,1],[M_00003_00002,M_00003_00003,-3],aux17)
weightedsumleq([1,3,1],[M_00003_00001,M_00003_00002,-3],aux18)
weightedsumgeq([1,3,1],[M_00003_00001,M_00003_00002,-3],aux18)
weightedsumleq([1,1,3],[-6,M_00001_00001,M_00001_00002],aux19)
weightedsumgeq([1,1,3],[-6,M_00001_00001,M_00001_00002],aux19)
weightedsumleq([1,1,3],[-3,M_00001_00001,M_00001_00003],aux20)
weightedsumgeq([1,1,3],[-3,M_00001_00001,M_00001_00003],aux20)
weightedsumleq([1,3,1],[-6,M_00001_00002,M_00001_00003],aux21)
weightedsumgeq([1,3,1],[-6,M_00001_00002,M_00001_00003],aux21)
weightedsumleq([1,1,3],[-4,M_00001_00002,M_00001_00003],aux22)
weightedsumgeq([1,1,3],[-4,M_00001_00002,M_00001_00003],aux22)
weightedsumleq([3,1,1],[M_00002_00002,M_00002_00003,-3],aux23)
weightedsumgeq([3,1,1],[M_00002_00002,M_00002_00003,-3],aux23)
weightedsumleq([1,3,1],[M_00002_00001,M_00002_00002,-3],aux24)
weightedsumgeq([1,3,1],[M_00002_00001,M_00002_00002,-3],aux24)
weightedsumleq([1,3,1],[-4,M_00001_00001,M_00001_00002],aux25)
weightedsumgeq([1,3,1],[-4,M_00001_00001,M_00001_00002],aux25)
weightedsumleq([1,3,1],[-3,M_00001_00001,M_00001_00003],aux26)
weightedsumgeq([1,3,1],[-3,M_00001_00001,M_00001_00003],aux26)
weightedsumleq([4,1],[M_00002_00001,-3],aux27)
weightedsumgeq([4,1],[M_00002_00001,-3],aux27)
weightedsumleq([4,1],[M_00002_00003,-3],aux28)
weightedsumgeq([4,1],[M_00002_00003,-3],aux28)
weightedsumleq([4,1],[M_00002_00002,-3],aux29)
weightedsumgeq([4,1],[M_00002_00002,-3],aux29)
weightedsumleq([1,4],[-7,M_00001_00002],aux30)
weightedsumgeq([1,4],[-7,M_00001_00002],aux30)
weightedsumleq([1,4],[-3,M_00001_00003],aux31)
weightedsumgeq([1,4],[-3,M_00001_00003],aux31)
sumleq([-1,M_00001_00002],aux32)
sumgeq([-1,M_00001_00002],aux32)
weightedsumleq([1,4],[-3,M_00001_00001],aux33)
weightedsumgeq([1,4],[-3,M_00001_00001],aux33)
weightedsumleq([4,1],[M_00003_00001,-3],aux34)
weightedsumgeq([4,1],[M_00003_00001,-3],aux34)
weightedsumleq([4,1],[M_00003_00002,-3],aux35)
weightedsumgeq([4,1],[M_00003_00002,-3],aux35)
weightedsumleq([4,1],[M_00003_00003,-3],aux36)
weightedsumgeq([4,1],[M_00003_00003,-3],aux36)
**EOF**
