MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 176
# CSE_active_eliminated_expressions = 396
# CSE_active_total_size = 868
**VARIABLES**
DISCRETE M_00001_00002 #
{2..3}
DISCRETE M_00001_00003 #
{2..3}
DISCRETE M_00001_00004 #
{4..5}
DISCRETE M_00001_00005 #
{4..5}
DISCRETE M_00002_00002 #
{2..3}
DISCRETE M_00002_00003 #
{2..3}
DISCRETE M_00002_00004 #
{4..5}
DISCRETE M_00002_00005 #
{4..5}
DISCRETE M_00003_00002 #
{2..3}
DISCRETE M_00003_00003 #
{2..3}
DISCRETE M_00003_00004 #
{4..5}
DISCRETE M_00003_00005 #
{4..5}
DISCRETE M_00004_00002 #
{2..3}
DISCRETE M_00004_00003 #
{2..3}
DISCRETE M_00004_00004 #
{4..5}
DISCRETE M_00004_00005 #
{4..5}
DISCRETE M_00005_00002 #
{2..3}
DISCRETE M_00005_00003 #
{2..3}
DISCRETE M_00005_00004 #
{4..5}
DISCRETE M_00005_00005 #
{4..5}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00001_00004))
{4..5}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00001_00005))
{4..5}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00001_00003))
{2..3}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00001_00002))
{2..3}
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00003_00004 + -3))
{4..5}
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00003_00005 + -3))
{4..5}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00003_00002 + -1))
{2..3}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00003_00003 + -1))
{2..3}
DISCRETE aux16 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00002_00004 + -3))
{4..5}
DISCRETE aux17 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00002_00005 + -3))
{4..5}
DISCRETE aux18 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00002 + -1))
{2..3}
DISCRETE aux19 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00002_00003 + -1))
{2..3}
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00002_00002 + -1))
{2..3}
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00002_00003 + -1))
{2..3}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00002_00004 + -3))
{4..5}
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00002_00005 + -3))
{4..5}
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00004_00002 + -1))
{2..3}
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00004_00003 + -1))
{2..3}
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00004_00005 + -3))
{4..5}
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00004_00004 + -3))
{4..5}
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00005_00002))
{2..3}
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00005_00003))
{2..3}
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00005_00004))
{4..5}
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (-3 + M_00005_00005))
{4..5}
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00004_00004 + -3))
{4..5}
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 4], (M_00004_00005 + -3))
{4..5}
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00004_00003 + -1))
{2..3}
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (M_00004_00002 + -1))
{2..3}
DISCRETE aux40 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (-1 + M_00005_00003))
{2..3}
DISCRETE aux41 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (-1 + M_00005_00002))
{2..3}
DISCRETE aux42 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (-3 + M_00005_00005))
{4..5}
DISCRETE aux43 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (-3 + M_00005_00004))
{4..5}
DISCRETE aux52 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00003_00005 + -3))
{4..5}
DISCRETE aux53 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00004, M_00001_00005], (M_00003_00004 + -3))
{4..5}
DISCRETE aux54 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00003_00003 + -1))
{2..3}
DISCRETE aux55 #Active-CSE: 3 occurrences of this expression or equivalent: ElementOne([M_00001_00002, M_00001_00003], (M_00003_00002 + -1))
{2..3}
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux56, [1,2,6,7])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux57, [1,2,6,7])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 5*M_00002_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux58, [1,2,6,7])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux59, [1,2,6,7])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux60, [1,2,6,7])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004 + 5*M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux61, [1,2,6,7])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux62, [1,2,6,7])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux63, [1,2,6,7])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux64, [1,2,6,7])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + M_00002_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux65, [1,2,6,7])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux66, [1,2,6,7])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux67, [1,2,6,7])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux68, [1,2,6,7])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux69, [1,2,6,7])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux70, [1,2,6,7])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux71, [1,2,6,7])
**VARIABLES**
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux72, [1,2,6,7])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux73, [1,2,6,7])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux74, [1,2,6,7])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux75, [1,2,6,7])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 5*M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux76, [1,2,6,7])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux77, [1,2,6,7])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux78, [1,2,6,7])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00004 + 5*M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux79, [1,2,6,7])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux80, [1,2,6,7])
**VARIABLES**
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux81, [1,2,6,7])
**VARIABLES**
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux82, [1,2,6,7])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux83, [1,2,6,7])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00004 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux84, [1,2,6,7])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00005 + -13)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux85, [1,2,6,7])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux86, [1,2,6,7])
**VARIABLES**
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux87, [1,2,6,7])
**VARIABLES**
DISCRETE aux88 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 5*M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux88, [1,2,6,7])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00004 + 5*M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux89, [1,2,6,7])
**VARIABLES**
DISCRETE aux90 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00004 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux90, [1,2,6,7])
**VARIABLES**
DISCRETE aux91 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00005 + -21)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux91, [1,2,6,7])
**VARIABLES**
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 5*M_00005_00004 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux92, [1,2,6,7])
**VARIABLES**
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00003 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux93, [1,2,6,7])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00003 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux94, [1,2,6,7])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00002 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux95, [1,2,6,7])
**VARIABLES**
DISCRETE aux96 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00005_00002 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux96, [1,2,6,7])
**VARIABLES**
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + M_00005_00004 + 5*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux97, [1,2,6,7])
**VARIABLES**
DISCRETE aux98 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00005_00002 + 5*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux98, [1,2,6,7])
**VARIABLES**
DISCRETE aux99 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00003 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux99, [1,2,6,7])
**VARIABLES**
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00003 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux100, [1,2,6,7])
**VARIABLES**
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00002 + M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux101, [1,2,6,7])
**VARIABLES**
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00005_00002 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux102, [1,2,6,7])
**VARIABLES**
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00005_00002 + M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux103, [1,2,6,7])
**VARIABLES**
DISCRETE aux104 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00003 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux104, [1,2,6,7])
**VARIABLES**
DISCRETE aux105 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00003 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux105, [1,2,6,7])
**VARIABLES**
DISCRETE aux106 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00002 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux106, [1,2,6,7])
**VARIABLES**
DISCRETE aux107 #Active-CSE: 2 occurrences of this expression or equivalent: (-21 + M_00001_00002 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux107, [1,2,6,7])
**VARIABLES**
DISCRETE aux108 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 5*M_00001_00004 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux108, [1,2,6,7])
**VARIABLES**
DISCRETE aux109 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + M_00001_00004 + 5*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux109, [1,2,6,7])
**VARIABLES**
DISCRETE aux110 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 5*M_00001_00002 + M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux110, [1,2,6,7])
**VARIABLES**
DISCRETE aux111 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00003 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux111, [1,2,6,7])
**VARIABLES**
DISCRETE aux112 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00003 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux112, [1,2,6,7])
**VARIABLES**
DISCRETE aux113 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00002 + M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux113, [1,2,6,7])
**VARIABLES**
DISCRETE aux114 #Active-CSE: 2 occurrences of this expression or equivalent: (-13 + 5*M_00001_00002 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux114, [1,2,6,7])
**VARIABLES**
DISCRETE aux115 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + M_00001_00002 + 5*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux115, [1,2,6,7])
**VARIABLES**
DISCRETE aux116 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux116, [1,1,6,6])
**VARIABLES**
DISCRETE aux117 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux117, [1,1,7,7])
**VARIABLES**
DISCRETE aux118 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux118, [1,1,7,7])
**VARIABLES**
DISCRETE aux119 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux119, [1,1,7,7])
**VARIABLES**
DISCRETE aux120 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux120, [1,1,7,7])
**VARIABLES**
DISCRETE aux121 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux121, [1,1,6,6])
**VARIABLES**
DISCRETE aux122 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux122, [1,1,6,6])
**VARIABLES**
DISCRETE aux123 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux123, [1,1,6,6])
**VARIABLES**
DISCRETE aux124 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00002 + -1)
{1..2}
DISCRETE aux125 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002 + -1)
{1..2}
DISCRETE aux126 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004 + -3)
{1..2}
DISCRETE aux127 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00005_00004)
{1..2}
DISCRETE aux128 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00005_00003)
{1..2}
DISCRETE aux129 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00003 + -1)
{1..2}
DISCRETE aux130 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux130, [1,1,7,7])
**VARIABLES**
DISCRETE aux131 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00001_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux131, [1,1,7,7])
**VARIABLES**
DISCRETE aux132 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00005)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux132, [1,1,6,6])
**VARIABLES**
DISCRETE aux133 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux133, [1,1,6,6])
**VARIABLES**
DISCRETE aux134 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux134, [1,1,6,6])
**VARIABLES**
DISCRETE aux135 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux135, [1,1,6,6])
**VARIABLES**
DISCRETE aux136 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux136, [1,1,7,7])
**VARIABLES**
DISCRETE aux137 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux137, [1,1,7,7])
**VARIABLES**
DISCRETE aux138 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004 + -3)
{1..2}
DISCRETE aux139 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004 + -3)
{1..2}
DISCRETE aux140 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00003 + -1)
{1..2}
DISCRETE aux141 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00001_00003)
{1..2}
DISCRETE aux142 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + M_00001_00002)
{1..2}
DISCRETE aux143 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00005 + -3)
{1..2}
DISCRETE aux144 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + M_00001_00005)
{1..2}
DISCRETE aux145 #Active-CSE: 2 occurrences of this expression or equivalent: (-3 + M_00001_00004)
{1..2}
DISCRETE aux146 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00005 + -3)
{1..2}
DISCRETE aux147 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00003 + -1)
{1..2}
DISCRETE aux148 #Active-CSE: 3 occurrences of this expression or equivalent: (-3 + M_00005_00005)
{1..2}
DISCRETE aux149 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux149, [1,1,6,6])
**VARIABLES**
DISCRETE aux150 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00005_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux150, [1,1,6,6])
**VARIABLES**
DISCRETE aux151 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00005_00005)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux151, [1,1,6,6])
**VARIABLES**
DISCRETE aux152 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00005_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux152, [1,1,6,6])
**VARIABLES**
DISCRETE aux153 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux153, [1,1,7,7])
**VARIABLES**
DISCRETE aux154 #Active-CSE: 2 occurrences of this expression or equivalent: (-23 + 6*M_00005_00005)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux154, [1,1,7,7])
**VARIABLES**
DISCRETE aux155 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00002)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux155, [1,1,7,7])
**VARIABLES**
DISCRETE aux156 #Active-CSE: 2 occurrences of this expression or equivalent: (-11 + 6*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux156, [1,1,7,7])
**VARIABLES**
DISCRETE aux157 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00005 + -3)
{1..2}
DISCRETE aux158 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux158, [1,1,7,7])
**VARIABLES**
DISCRETE aux159 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux159, [1,1,7,7])
**VARIABLES**
DISCRETE aux160 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux160, [1,1,7,7])
**VARIABLES**
DISCRETE aux161 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux161, [1,1,7,7])
**VARIABLES**
DISCRETE aux162 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux162, [1,1,6,6])
**VARIABLES**
DISCRETE aux163 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux163, [1,1,6,6])
**VARIABLES**
DISCRETE aux164 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux164, [1,1,6,6])
**VARIABLES**
DISCRETE aux165 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux165, [1,1,6,6])
**VARIABLES**
DISCRETE aux166 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00002 + -1)
{1..2}
DISCRETE aux167 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + M_00005_00002)
{1..2}
DISCRETE aux168 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00005 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux168, [1,1,6,6])
**VARIABLES**
DISCRETE aux169 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux169, [1,1,7,7])
**VARIABLES**
DISCRETE aux170 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux170, [1,1,7,7])
**VARIABLES**
DISCRETE aux171 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00002 + -11)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux171, [1,1,7,7])
**VARIABLES**
DISCRETE aux172 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00005 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux172, [1,1,7,7])
**VARIABLES**
DISCRETE aux173 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux173, [1,1,6,6])
**VARIABLES**
DISCRETE aux174 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -9)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux174, [1,1,6,6])
**VARIABLES**
DISCRETE aux175 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux175, [1,1,6,6])
**VARIABLES**
DISCRETE aux176 #ElementOne([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux173) --- ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux123)
{1..5}
DISCRETE aux177 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux57) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux171)
{1..5}
DISCRETE aux178 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux60) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux70)
{1..5}
DISCRETE aux179 #ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux68) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux119)
{1..5}
DISCRETE aux180 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux62) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux69)
{1..5}
DISCRETE aux181 #ElementOne([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux149) --- ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux121)
{1..5}
DISCRETE aux182 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux58) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux155)
{1..5}
DISCRETE aux183 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux59) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux103)
{1..5}
DISCRETE aux184 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux61) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux102)
{1..5}
DISCRETE aux185 #ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux101) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux117)
{1..5}
DISCRETE aux186 #ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux165) --- ElementOne([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux174)
{1..5}
DISCRETE aux187 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux87) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux76)
{1..5}
DISCRETE aux188 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux90) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux169)
{1..5}
DISCRETE aux189 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux159) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux72)
{1..5}
DISCRETE aux190 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux83) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux71)
{1..5}
DISCRETE aux191 #ElementOne([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux150) --- ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux164)
{1..5}
DISCRETE aux192 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux86) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux98)
{1..5}
DISCRETE aux193 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux91) --- ElementOne([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux156)
{1..5}
DISCRETE aux194 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux89) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux99)
{1..5}
DISCRETE aux195 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux160) --- ElementOne([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux100)
{1..5}
DISCRETE aux196 #ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux152) --- ElementOne([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux168)
{1..5}
DISCRETE aux197 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux95) --- ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux75)
{1..5}
DISCRETE aux198 #ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux94) --- ElementOne([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux77)
{1..5}
DISCRETE aux199 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux79) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux153)
{1..5}
DISCRETE aux200 #ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux92) --- ElementOne([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux172)
{1..5}
**TUPLELIST**
rack 5 5
1 2 3 4 5 
1 1 1 4 5 
1 1 1 4 5 
1 2 3 1 5 
1 2 3 4 1 
**VARIABLES**
ALIAS rack[5,5]=[[1, 2, 3, 4, 5], [1, 1, 1, 4, 5], [1, 1, 1, 4, 5], [1, 2, 3, 1, 5], [1, 2, 3, 4, 1]]
**TUPLELIST**
perms 4 5
1 2 3 4 5 
1 2 3 5 4 
1 3 2 4 5 
1 3 2 5 4 
**VARIABLES**
ALIAS perms[4,5]=[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4]]
**TUPLELIST**
inverses 4 5
1 2 3 4 5 
1 2 3 5 4 
1 3 2 4 5 
1 3 2 5 4 
**VARIABLES**
ALIAS inverses[4,5]=[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4]]
**SEARCH**
PRINT[[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00001_00005],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00002_00005],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00003_00005],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00004_00005],[M_00005_00002],[M_00005_00003],[M_00005_00004],[M_00005_00005]]
VARORDER STATIC [M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005]
**CONSTRAINTS**
watchelement_one([5, 4], aux145, aux0)
watchelement_one([5, 4], aux144, aux1)
watchelement_one([3, 2], aux141, aux2)
watchelement_one([3, 2], aux142, aux3)
watchelement_one([4, 5], aux126, M_00002_00004)
watchelement_one([4, 5], aux146, M_00002_00005)
watchelement_one([2, 3], aux129, M_00002_00003)
watchelement_one([2, 3], aux166, M_00002_00002)
watchelement_one([4, 5], aux138, M_00004_00004)
watchelement_one([4, 5], aux157, M_00004_00005)
watchelement_one([2, 3], aux125, M_00004_00002)
watchelement_one([2, 3], aux147, M_00004_00003)
watchelement_one([5, 4], aux139, aux12)
watchelement_one([5, 4], aux143, aux13)
watchelement_one([3, 2], aux124, aux14)
watchelement_one([3, 2], aux140, aux15)
watchelement_one([M_00001_00004, M_00001_00005], aux126, aux16)
watchelement_one([M_00001_00004, M_00001_00005], aux146, aux17)
watchelement_one([M_00001_00002, M_00001_00003], aux166, aux18)
watchelement_one([M_00001_00002, M_00001_00003], aux129, aux19)
watchelement_one([3, 2], aux166, aux20)
watchelement_one([3, 2], aux129, aux21)
watchelement_one([5, 4], aux126, aux22)
watchelement_one([5, 4], aux146, aux23)
watchelement_one([M_00001_00002, M_00001_00003], aux125, aux24)
watchelement_one([M_00001_00002, M_00001_00003], aux147, aux25)
watchelement_one([M_00001_00004, M_00001_00005], aux157, aux26)
watchelement_one([M_00001_00004, M_00001_00005], aux138, aux27)
watchelement_one([2, 3], aux140, M_00003_00003)
watchelement_one([2, 3], aux124, M_00003_00002)
watchelement_one([4, 5], aux143, M_00003_00005)
watchelement_one([4, 5], aux139, M_00003_00004)
watchelement_one([3, 2], aux167, aux32)
watchelement_one([3, 2], aux128, aux33)
watchelement_one([5, 4], aux127, aux34)
watchelement_one([5, 4], aux148, aux35)
watchelement_one([5, 4], aux138, aux36)
watchelement_one([5, 4], aux157, aux37)
watchelement_one([3, 2], aux147, aux38)
watchelement_one([3, 2], aux125, aux39)
watchelement_one([M_00001_00002, M_00001_00003], aux128, aux40)
watchelement_one([M_00001_00002, M_00001_00003], aux167, aux41)
watchelement_one([M_00001_00004, M_00001_00005], aux148, aux42)
watchelement_one([M_00001_00004, M_00001_00005], aux127, aux43)
watchelement_one([4, 5], aux144, M_00001_00005)
watchelement_one([4, 5], aux145, M_00001_00004)
watchelement_one([2, 3], aux142, M_00001_00002)
watchelement_one([2, 3], aux141, M_00001_00003)
watchelement_one([4, 5], aux148, M_00005_00005)
watchelement_one([4, 5], aux127, M_00005_00004)
watchelement_one([2, 3], aux167, M_00005_00002)
watchelement_one([2, 3], aux128, M_00005_00003)
watchelement_one([M_00001_00004, M_00001_00005], aux143, aux52)
watchelement_one([M_00001_00004, M_00001_00005], aux139, aux53)
watchelement_one([M_00001_00002, M_00001_00003], aux140, aux54)
watchelement_one([M_00001_00002, M_00001_00003], aux124, aux55)
gacalldiff([M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005])
gacalldiff([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005])
gacalldiff([M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005])
gacalldiff([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005])
gacalldiff([M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005])
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux135, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux136, aux18)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux110, aux19)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux114, aux16)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux113, aux17)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux134, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux115, aux55)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux137, aux54)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux112, aux53)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux111, aux52)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux133, 1)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux106, aux24)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux105, aux25)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux130, aux27)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux108, aux26)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux132, 1)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux107, aux41)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux104, aux40)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux109, aux43)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux131, aux42)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux116, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux118, aux18)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux63, aux19)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux64, aux16)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux65, aux17)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux163, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux161, aux18)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux82, aux19)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux81, aux16)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux80, aux17)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux122, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux56, aux55)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux120, aux54)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux67, aux53)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux66, aux52)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux162, 1)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux88, aux55)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux158, aux54)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux84, aux53)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux85, aux52)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux175, 1)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux74, aux24)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux78, aux25)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux170, aux27)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux73, aux26)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux151, 1)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux96, aux41)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux93, aux40)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux97, aux43)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux154, aux42)
watchelement_one([1, 1, 1, 4, 5, 1], aux135, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux136, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux110, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux114, M_00001_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux113, M_00001_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux134, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux115, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux137, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux112, M_00001_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux111, M_00001_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux133, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux106, M_00001_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux105, M_00001_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux130, 1)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux108, M_00001_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux132, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux107, M_00001_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux104, M_00001_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux109, M_00001_00004)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux131, 1)
watchelement_one([1, 1, 1, 4, 5, 1], aux116, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux118, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux63, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux64, M_00002_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux65, M_00002_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux122, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux56, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux120, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux67, M_00002_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux66, M_00002_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux123, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux57, M_00002_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux60, M_00002_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux119, 1)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux62, M_00002_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux121, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux58, M_00002_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux59, M_00002_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux61, M_00002_00004)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux117, 1)
watchelement_one([1, 1, 1, 4, 5, 1], aux163, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux161, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux82, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux81, M_00003_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux80, M_00003_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux162, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux88, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux158, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux84, M_00003_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux85, M_00003_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux165, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux87, M_00003_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux90, M_00003_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux159, 1)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux83, M_00003_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux164, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux86, M_00003_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux91, M_00003_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux89, M_00003_00004)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux160, 1)
watchelement_one([1, 1, 1, 4, 5, 1], aux173, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux171, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux70, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux68, M_00004_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux69, M_00004_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux174, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux76, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux169, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux72, M_00004_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux71, M_00004_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux175, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux74, M_00004_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux78, M_00004_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux170, 1)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux73, M_00004_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux168, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux75, M_00004_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux77, M_00004_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux79, M_00004_00004)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux172, 1)
watchelement_one([1, 1, 1, 4, 5, 1], aux149, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux155, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux103, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux102, M_00005_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux101, M_00005_00005)
watchelement_one([1, 1, 1, 4, 5, 1], aux150, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux98, 1)
watchelement_one([1, 1, 4, 5, 1, 1, 1], aux156, 1)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux99, M_00005_00004)
watchelement_one([4, 5, 1, 1, 1, 4, 5], aux100, M_00005_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux152, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux95, M_00005_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux94, M_00005_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux153, 1)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux92, M_00005_00005)
watchelement_one([1, 2, 3, 1, 5, 1], aux151, 1)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux96, M_00005_00002)
watchelement_one([2, 3, 1, 5, 1, 2, 3], aux93, M_00005_00003)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux97, M_00005_00004)
watchelement_one([1, 5, 1, 2, 3, 4, 1], aux154, 1)
lexleq([M_00001_00004, M_00001_00005, M_00002_00004, M_00002_00005, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00004, M_00005_00005],[aux1, aux0, aux23, aux22, aux13, aux12, M_00005_00002, M_00005_00003, aux35, aux34, aux37, aux36])
lexleq([M_00001_00002, M_00001_00003, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00004_00002, M_00004_00003, M_00005_00002, M_00005_00003],[aux2, aux3, aux15, aux14, M_00003_00004, M_00003_00005, aux21, aux20, aux38, aux39, aux33, aux32])
lexleq([M_00001_00002, M_00001_00003, M_00001_00004, M_00001_00005, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005],[aux2, aux3, aux1, aux0, aux15, aux14, aux13, aux12, aux21, aux20, aux23, aux22, aux33, aux32, aux35, aux34, aux38, aux39, aux37, aux36])
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux173, aux176)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux123, aux176)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux57, aux177)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux171, aux177)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux60, aux178)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux70, aux178)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux68, aux179)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux119, aux179)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux62, aux180)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux69, aux180)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux149, aux181)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux121, aux181)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux58, aux182)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux155, aux182)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux59, aux183)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux103, aux183)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux61, aux184)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux102, aux184)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux101, aux185)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux117, aux185)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux165, aux186)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux174, aux186)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux87, aux187)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux76, aux187)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux90, aux188)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux169, aux188)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux159, aux189)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux72, aux189)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux83, aux190)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux71, aux190)
watchelement_one([1, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1], aux150, aux191)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux164, aux191)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux86, aux192)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux98, aux192)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux91, aux193)
watchelement_one([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003], aux156, aux193)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux89, aux194)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux99, aux194)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux160, aux195)
watchelement_one([M_00002_00004, M_00002_00005, 1, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005], aux100, aux195)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux152, aux196)
watchelement_one([1, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1], aux168, aux196)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux95, aux197)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux75, aux197)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux94, aux198)
watchelement_one([M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003], aux77, aux198)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux79, aux199)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux153, aux199)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux92, aux200)
watchelement_one([M_00004_00004, M_00004_00005, 1, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005], aux172, aux200)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00003,-11],aux56)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00003,-11],aux56)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00004,-21],aux57)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00004,-21],aux57)
weightedsumleq([1,5,1],[M_00002_00002,M_00002_00005,-21],aux58)
weightedsumgeq([1,5,1],[M_00002_00002,M_00002_00005,-21],aux58)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00005,-21],aux59)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00005,-21],aux59)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-21],aux60)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-21],aux60)
weightedsumleq([1,5,1],[M_00002_00004,M_00002_00005,-23],aux61)
weightedsumgeq([1,5,1],[M_00002_00004,M_00002_00005,-23],aux61)
weightedsumleq([5,1,1],[M_00002_00004,M_00002_00005,-23],aux62)
weightedsumgeq([5,1,1],[M_00002_00004,M_00002_00005,-23],aux62)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00003,-11],aux63)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00003,-11],aux63)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00004,-13],aux64)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00004,-13],aux64)
weightedsumleq([5,1,1],[M_00002_00002,M_00002_00005,-13],aux65)
weightedsumgeq([5,1,1],[M_00002_00002,M_00002_00005,-13],aux65)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00005,-13],aux66)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00005,-13],aux66)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-13],aux67)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-13],aux67)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00004,-13],aux68)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00004,-13],aux68)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00005,-13],aux69)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00005,-13],aux69)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-11],aux70)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-11],aux70)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00005,-13],aux71)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00005,-13],aux71)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00004,-13],aux72)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00004,-13],aux72)
weightedsumleq([5,1,1],[M_00004_00004,M_00004_00005,-23],aux73)
weightedsumgeq([5,1,1],[M_00004_00004,M_00004_00005,-23],aux73)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00004,-21],aux74)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00004,-21],aux74)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00005,-21],aux75)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00005,-21],aux75)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-11],aux76)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-11],aux76)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00005,-21],aux77)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00005,-21],aux77)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00004,-21],aux78)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00004,-21],aux78)
weightedsumleq([1,5,1],[M_00004_00004,M_00004_00005,-23],aux79)
weightedsumgeq([1,5,1],[M_00004_00004,M_00004_00005,-23],aux79)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00005,-13],aux80)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00005,-13],aux80)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-13],aux81)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-13],aux81)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux82)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00003,-11],aux82)
weightedsumleq([5,1,1],[M_00003_00004,M_00003_00005,-23],aux83)
weightedsumgeq([5,1,1],[M_00003_00004,M_00003_00005,-23],aux83)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00004,-13],aux84)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00004,-13],aux84)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00005,-13],aux85)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00005,-13],aux85)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00005,-21],aux86)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00005,-21],aux86)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-21],aux87)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-21],aux87)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux88)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00003,-11],aux88)
weightedsumleq([1,5,1],[M_00003_00004,M_00003_00005,-23],aux89)
weightedsumgeq([1,5,1],[M_00003_00004,M_00003_00005,-23],aux89)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00004,-21],aux90)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00004,-21],aux90)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00005,-21],aux91)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00005,-21],aux91)
weightedsumleq([1,5,1],[-23,M_00005_00004,M_00005_00005],aux92)
weightedsumgeq([1,5,1],[-23,M_00005_00004,M_00005_00005],aux92)
weightedsumleq([1,1,5],[-21,M_00005_00003,M_00005_00005],aux93)
weightedsumgeq([1,1,5],[-21,M_00005_00003,M_00005_00005],aux93)
weightedsumleq([1,1,5],[-21,M_00005_00003,M_00005_00004],aux94)
weightedsumgeq([1,1,5],[-21,M_00005_00003,M_00005_00004],aux94)
weightedsumleq([1,1,5],[-21,M_00005_00002,M_00005_00004],aux95)
weightedsumgeq([1,1,5],[-21,M_00005_00002,M_00005_00004],aux95)
weightedsumleq([1,1,5],[-21,M_00005_00002,M_00005_00005],aux96)
weightedsumgeq([1,1,5],[-21,M_00005_00002,M_00005_00005],aux96)
weightedsumleq([1,1,5],[-23,M_00005_00004,M_00005_00005],aux97)
weightedsumgeq([1,1,5],[-23,M_00005_00004,M_00005_00005],aux97)
weightedsumleq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux98)
weightedsumgeq([1,1,5],[-11,M_00005_00002,M_00005_00003],aux98)
weightedsumleq([1,5,1],[-13,M_00005_00003,M_00005_00004],aux99)
weightedsumgeq([1,5,1],[-13,M_00005_00003,M_00005_00004],aux99)
weightedsumleq([1,5,1],[-13,M_00005_00003,M_00005_00005],aux100)
weightedsumgeq([1,5,1],[-13,M_00005_00003,M_00005_00005],aux100)
weightedsumleq([1,5,1],[-13,M_00005_00002,M_00005_00005],aux101)
weightedsumgeq([1,5,1],[-13,M_00005_00002,M_00005_00005],aux101)
weightedsumleq([1,5,1],[-13,M_00005_00002,M_00005_00004],aux102)
weightedsumgeq([1,5,1],[-13,M_00005_00002,M_00005_00004],aux102)
weightedsumleq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux103)
weightedsumgeq([1,5,1],[-11,M_00005_00002,M_00005_00003],aux103)
weightedsumleq([1,1,5],[-21,M_00001_00003,M_00001_00005],aux104)
weightedsumgeq([1,1,5],[-21,M_00001_00003,M_00001_00005],aux104)
weightedsumleq([1,1,5],[-21,M_00001_00003,M_00001_00004],aux105)
weightedsumgeq([1,1,5],[-21,M_00001_00003,M_00001_00004],aux105)
weightedsumleq([1,1,5],[-21,M_00001_00002,M_00001_00004],aux106)
weightedsumgeq([1,1,5],[-21,M_00001_00002,M_00001_00004],aux106)
weightedsumleq([1,1,5],[-21,M_00001_00002,M_00001_00005],aux107)
weightedsumgeq([1,1,5],[-21,M_00001_00002,M_00001_00005],aux107)
weightedsumleq([1,5,1],[-23,M_00001_00004,M_00001_00005],aux108)
weightedsumgeq([1,5,1],[-23,M_00001_00004,M_00001_00005],aux108)
weightedsumleq([1,1,5],[-23,M_00001_00004,M_00001_00005],aux109)
weightedsumgeq([1,1,5],[-23,M_00001_00004,M_00001_00005],aux109)
weightedsumleq([1,5,1],[-11,M_00001_00002,M_00001_00003],aux110)
weightedsumgeq([1,5,1],[-11,M_00001_00002,M_00001_00003],aux110)
weightedsumleq([1,5,1],[-13,M_00001_00003,M_00001_00005],aux111)
weightedsumgeq([1,5,1],[-13,M_00001_00003,M_00001_00005],aux111)
weightedsumleq([1,5,1],[-13,M_00001_00003,M_00001_00004],aux112)
weightedsumgeq([1,5,1],[-13,M_00001_00003,M_00001_00004],aux112)
weightedsumleq([1,5,1],[-13,M_00001_00002,M_00001_00005],aux113)
weightedsumgeq([1,5,1],[-13,M_00001_00002,M_00001_00005],aux113)
weightedsumleq([1,5,1],[-13,M_00001_00002,M_00001_00004],aux114)
weightedsumgeq([1,5,1],[-13,M_00001_00002,M_00001_00004],aux114)
weightedsumleq([1,1,5],[-11,M_00001_00002,M_00001_00003],aux115)
weightedsumgeq([1,1,5],[-11,M_00001_00002,M_00001_00003],aux115)
weightedsumleq([5,1],[M_00002_00002,-9],aux116)
weightedsumgeq([5,1],[M_00002_00002,-9],aux116)
weightedsumleq([6,1],[M_00002_00005,-23],aux117)
weightedsumgeq([6,1],[M_00002_00005,-23],aux117)
weightedsumleq([6,1],[M_00002_00002,-11],aux118)
weightedsumgeq([6,1],[M_00002_00002,-11],aux118)
weightedsumleq([6,1],[M_00002_00004,-23],aux119)
weightedsumgeq([6,1],[M_00002_00004,-23],aux119)
weightedsumleq([6,1],[M_00002_00003,-11],aux120)
weightedsumgeq([6,1],[M_00002_00003,-11],aux120)
weightedsumleq([5,1],[M_00002_00005,-19],aux121)
weightedsumgeq([5,1],[M_00002_00005,-19],aux121)
weightedsumleq([5,1],[M_00002_00003,-9],aux122)
weightedsumgeq([5,1],[M_00002_00003,-9],aux122)
weightedsumleq([5,1],[M_00002_00004,-19],aux123)
weightedsumgeq([5,1],[M_00002_00004,-19],aux123)
sumleq([M_00003_00002,-1],aux124)
sumgeq([M_00003_00002,-1],aux124)
sumleq([M_00004_00002,-1],aux125)
sumgeq([M_00004_00002,-1],aux125)
sumleq([M_00002_00004,-3],aux126)
sumgeq([M_00002_00004,-3],aux126)
sumleq([-3,M_00005_00004],aux127)
sumgeq([-3,M_00005_00004],aux127)
sumleq([-1,M_00005_00003],aux128)
sumgeq([-1,M_00005_00003],aux128)
sumleq([M_00002_00003,-1],aux129)
sumgeq([M_00002_00003,-1],aux129)
weightedsumleq([1,6],[-23,M_00001_00004],aux130)
weightedsumgeq([1,6],[-23,M_00001_00004],aux130)
weightedsumleq([1,6],[-23,M_00001_00005],aux131)
weightedsumgeq([1,6],[-23,M_00001_00005],aux131)
weightedsumleq([1,5],[-19,M_00001_00005],aux132)
weightedsumgeq([1,5],[-19,M_00001_00005],aux132)
weightedsumleq([1,5],[-19,M_00001_00004],aux133)
weightedsumgeq([1,5],[-19,M_00001_00004],aux133)
weightedsumleq([1,5],[-9,M_00001_00003],aux134)
weightedsumgeq([1,5],[-9,M_00001_00003],aux134)
weightedsumleq([1,5],[-9,M_00001_00002],aux135)
weightedsumgeq([1,5],[-9,M_00001_00002],aux135)
weightedsumleq([1,6],[-11,M_00001_00002],aux136)
weightedsumgeq([1,6],[-11,M_00001_00002],aux136)
weightedsumleq([1,6],[-11,M_00001_00003],aux137)
weightedsumgeq([1,6],[-11,M_00001_00003],aux137)
sumleq([M_00004_00004,-3],aux138)
sumgeq([M_00004_00004,-3],aux138)
sumleq([M_00003_00004,-3],aux139)
sumgeq([M_00003_00004,-3],aux139)
sumleq([M_00003_00003,-1],aux140)
sumgeq([M_00003_00003,-1],aux140)
sumleq([-1,M_00001_00003],aux141)
sumgeq([-1,M_00001_00003],aux141)
sumleq([-1,M_00001_00002],aux142)
sumgeq([-1,M_00001_00002],aux142)
sumleq([M_00003_00005,-3],aux143)
sumgeq([M_00003_00005,-3],aux143)
sumleq([-3,M_00001_00005],aux144)
sumgeq([-3,M_00001_00005],aux144)
sumleq([-3,M_00001_00004],aux145)
sumgeq([-3,M_00001_00004],aux145)
sumleq([M_00002_00005,-3],aux146)
sumgeq([M_00002_00005,-3],aux146)
sumleq([M_00004_00003,-1],aux147)
sumgeq([M_00004_00003,-1],aux147)
sumleq([-3,M_00005_00005],aux148)
sumgeq([-3,M_00005_00005],aux148)
weightedsumleq([1,5],[-9,M_00005_00002],aux149)
weightedsumgeq([1,5],[-9,M_00005_00002],aux149)
weightedsumleq([1,5],[-9,M_00005_00003],aux150)
weightedsumgeq([1,5],[-9,M_00005_00003],aux150)
weightedsumleq([1,5],[-19,M_00005_00005],aux151)
weightedsumgeq([1,5],[-19,M_00005_00005],aux151)
weightedsumleq([1,5],[-19,M_00005_00004],aux152)
weightedsumgeq([1,5],[-19,M_00005_00004],aux152)
weightedsumleq([1,6],[-23,M_00005_00004],aux153)
weightedsumgeq([1,6],[-23,M_00005_00004],aux153)
weightedsumleq([1,6],[-23,M_00005_00005],aux154)
weightedsumgeq([1,6],[-23,M_00005_00005],aux154)
weightedsumleq([1,6],[-11,M_00005_00002],aux155)
weightedsumgeq([1,6],[-11,M_00005_00002],aux155)
weightedsumleq([1,6],[-11,M_00005_00003],aux156)
weightedsumgeq([1,6],[-11,M_00005_00003],aux156)
sumleq([M_00004_00005,-3],aux157)
sumgeq([M_00004_00005,-3],aux157)
weightedsumleq([6,1],[M_00003_00003,-11],aux158)
weightedsumgeq([6,1],[M_00003_00003,-11],aux158)
weightedsumleq([6,1],[M_00003_00004,-23],aux159)
weightedsumgeq([6,1],[M_00003_00004,-23],aux159)
weightedsumleq([6,1],[M_00003_00005,-23],aux160)
weightedsumgeq([6,1],[M_00003_00005,-23],aux160)
weightedsumleq([6,1],[M_00003_00002,-11],aux161)
weightedsumgeq([6,1],[M_00003_00002,-11],aux161)
weightedsumleq([5,1],[M_00003_00003,-9],aux162)
weightedsumgeq([5,1],[M_00003_00003,-9],aux162)
weightedsumleq([5,1],[M_00003_00002,-9],aux163)
weightedsumgeq([5,1],[M_00003_00002,-9],aux163)
weightedsumleq([5,1],[M_00003_00005,-19],aux164)
weightedsumgeq([5,1],[M_00003_00005,-19],aux164)
weightedsumleq([5,1],[M_00003_00004,-19],aux165)
weightedsumgeq([5,1],[M_00003_00004,-19],aux165)
sumleq([M_00002_00002,-1],aux166)
sumgeq([M_00002_00002,-1],aux166)
sumleq([-1,M_00005_00002],aux167)
sumgeq([-1,M_00005_00002],aux167)
weightedsumleq([5,1],[M_00004_00005,-19],aux168)
weightedsumgeq([5,1],[M_00004_00005,-19],aux168)
weightedsumleq([6,1],[M_00004_00003,-11],aux169)
weightedsumgeq([6,1],[M_00004_00003,-11],aux169)
weightedsumleq([6,1],[M_00004_00004,-23],aux170)
weightedsumgeq([6,1],[M_00004_00004,-23],aux170)
weightedsumleq([6,1],[M_00004_00002,-11],aux171)
weightedsumgeq([6,1],[M_00004_00002,-11],aux171)
weightedsumleq([6,1],[M_00004_00005,-23],aux172)
weightedsumgeq([6,1],[M_00004_00005,-23],aux172)
weightedsumleq([5,1],[M_00004_00002,-9],aux173)
weightedsumgeq([5,1],[M_00004_00002,-9],aux173)
weightedsumleq([5,1],[M_00004_00003,-9],aux174)
weightedsumgeq([5,1],[M_00004_00003,-9],aux174)
weightedsumleq([5,1],[M_00004_00004,-19],aux175)
weightedsumgeq([5,1],[M_00004_00004,-19],aux175)
**EOF**
