language ESSENCE' 1.0

letting n be 2

letting perms be [
[ 1, 2 ],

]

letting inverses be [

[ 1, 2 ],

]

letting rack be 

[ [ 1, 2 ], [ 1, 1 ] ]


find M : matrix indexed by [int(1..n), int(1..n)] of int(1..n)

such that

forAll x : int(1..n) .
  allDiff(M[x,..]),

forAll x,y,z : int(1..n) .
  M[M[x,rack[x,y]],M[x,z]]=M[M[y,x],M[y,z]],

forAll x,y,z : int(1..n) .
  M[x,rack[y,z]]=rack[M[x,y],M[x,z]],
forAll p : int(1..1) .
      flatten( [ M[i,j] | i : int(1..n), j : int(1..n)] )
      <=lex flatten( [ inverses[p,M[perms[p,i],perms[p,j]]] | i : int(1..n), j : int(1..n)] ),

true

