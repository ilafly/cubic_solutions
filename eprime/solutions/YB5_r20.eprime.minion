MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 66
# CSE_active_eliminated_expressions = 212
# CSE_active_total_size = 384
**VARIABLES**
DISCRETE M_00001_00003 #
{3..4}
DISCRETE M_00001_00004 #
{3..4}
DISCRETE M_00002_00003 #
{3..4}
DISCRETE M_00002_00004 #
{3..4}
DISCRETE M_00003_00003 #
{3..4}
DISCRETE M_00003_00004 #
{3..4}
DISCRETE M_00004_00003 #
{3..4}
DISCRETE M_00004_00004 #
{3..4}
DISCRETE M_00005_00003 #
{3..4}
DISCRETE M_00005_00004 #
{3..4}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], (M_00003_00003 + 5*M_00003_00004 + -17))
{1..5}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], (5*M_00004_00003 + M_00004_00004 + -17))
{1..5}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, M_00003_00003, M_00003_00004, 5, 1, 2], (5*M_00004_00003 + -14))
{1..5}
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 1, 2, M_00004_00003, M_00004_00004, 5], (5*M_00004_00003 + -14))
{1..5}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2, M_00003_00003, M_00003_00004, 5, 1], (5*M_00003_00004 + -14))
{1..5}
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00004_00003 + -2))
{3..4}
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00004_00004 + -2))
{3..4}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00003_00004 + -2))
{3..4}
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00003_00003 + -2))
{3..4}
DISCRETE aux24 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00002_00003 + -2))
{3..4}
DISCRETE aux25 #Active-CSE: 4 occurrences of this expression or equivalent: ElementOne([M_00001_00003, M_00001_00004], (M_00002_00004 + -2))
{3..4}
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + M_00004_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux26, [1,2,6,7])
**VARIABLES**
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 5*M_00002_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux27, [1,2,6,7])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + M_00002_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux28, [1,2,6,7])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 5*M_00003_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux29, [1,2,6,7])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + 5*M_00004_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux30, [1,2,6,7])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00003 + M_00003_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux31, [1,2,6,7])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + M_00005_00003 + 5*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux32, [1,2,6,7])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 5*M_00005_00003 + M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux33, [1,2,6,7])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 5*M_00001_00003 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux34, [1,2,6,7])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + M_00001_00003 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux35, [1,2,6,7])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux36, [1,1,7,7])
**VARIABLES**
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00002_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux37, [1,1,7,7])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00002_00004 + -2)
{1..2}
DISCRETE aux39 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00004_00003 + -2)
{1..2}
DISCRETE aux40 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux40, [1,1,6,6])
**VARIABLES**
DISCRETE aux41 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00002_00003 + -2)
{1..2}
DISCRETE aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux42, [1,1,7,7])
**VARIABLES**
DISCRETE aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux43, [1,1,7,7])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00003_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux44, [1,1,6,6])
**VARIABLES**
DISCRETE aux45 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux45, [1,1,6,6])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00002_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux46, [1,1,6,6])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 5 occurrences of this expression or equivalent: (-2 + M_00001_00003)
{1..2}
DISCRETE aux48 #Active-CSE: 5 occurrences of this expression or equivalent: (-2 + M_00001_00004)
{1..2}
DISCRETE aux49 #Active-CSE: 6 occurrences of this expression or equivalent: (-14 + 5*M_00005_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux49, [1,1,6,6])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 6 occurrences of this expression or equivalent: (-14 + 5*M_00005_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux50, [1,1,6,6])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00003_00003 + -2)
{1..2}
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00005_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux52, [1,1,7,7])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (-17 + 6*M_00005_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux53, [1,1,7,7])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux54, [1,1,6,6])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux55, [1,1,7,7])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00003_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux56, [1,1,7,7])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 6 occurrences of this expression or equivalent: (-14 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux57, [1,1,6,6])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 6 occurrences of this expression or equivalent: (-14 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux58, [1,1,6,6])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 6 occurrences of this expression or equivalent: (5*M_00004_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux59, [1,1,6,6])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00004_00004 + -2)
{1..2}
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00003 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux61, [1,1,7,7])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (6*M_00004_00004 + -17)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux62, [1,1,7,7])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 5 occurrences of this expression or equivalent: (-2 + M_00005_00003)
{1..2}
DISCRETE aux64 #Active-CSE: 5 occurrences of this expression or equivalent: (-2 + M_00005_00004)
{1..2}
DISCRETE aux65 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00003_00004 + -2)
{1..2}
DISCRETE aux66 #ElementOne([M_00001_00003, M_00001_00004], aux63) --- ElementOne([M_00005_00003, M_00005_00004], aux47)
{3..4}
DISCRETE aux67 #ElementOne([M_00001_00003, M_00001_00004], aux64) --- ElementOne([M_00005_00003, M_00005_00004], aux48)
{3..4}
DISCRETE aux68 #ElementOne([M_00005_00003, M_00005_00004], aux41) --- ElementOne([M_00002_00003, M_00002_00004], aux63)
{3..4}
DISCRETE aux69 #ElementOne([M_00005_00003, M_00005_00004], aux38) --- ElementOne([M_00002_00003, M_00002_00004], aux64)
{3..4}
DISCRETE aux70 #ElementOne([M_00005_00003, M_00005_00004], aux51) --- ElementOne([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux52)
{3..4}
DISCRETE aux71 #ElementOne([M_00005_00003, M_00005_00004], aux65) --- ElementOne([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux33)
{3..4}
DISCRETE aux72 #ElementOne([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux32) --- ElementOne([M_00005_00003, M_00005_00004], aux39)
{3..4}
DISCRETE aux73 #ElementOne([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux53) --- ElementOne([M_00005_00003, M_00005_00004], aux60)
{3..4}
DISCRETE aux74 #ElementOne([4, 3], aux48)
{3..4}
DISCRETE aux75 #ElementOne([4, 3], aux47)
{3..4}
DISCRETE aux76 #ElementOne([4, 3], aux38)
{3..4}
DISCRETE aux77 #ElementOne([4, 3], aux41)
{3..4}
DISCRETE aux78 #ElementOne([4, 3], aux60)
{3..4}
DISCRETE aux79 #ElementOne([4, 3], aux39)
{3..4}
DISCRETE aux80 #ElementOne([4, 3], aux65)
{3..4}
DISCRETE aux81 #ElementOne([4, 3], aux51)
{3..4}
DISCRETE aux82 #ElementOne([4, 3], aux64)
{3..4}
DISCRETE aux83 #ElementOne([4, 3], aux63)
{3..4}
**TUPLELIST**
rack 5 5
1 2 3 4 5 
1 1 1 1 5 
1 4 1 4 5 
1 3 3 1 5 
1 2 3 4 5 
**VARIABLES**
ALIAS rack[5,5]=[[1, 2, 3, 4, 5], [1, 1, 1, 1, 5], [1, 4, 1, 4, 5], [1, 3, 3, 1, 5], [1, 2, 3, 4, 5]]
**TUPLELIST**
perms 2 5
1 2 3 4 5 
1 2 4 3 5 
**VARIABLES**
ALIAS perms[2,5]=[[1, 2, 3, 4, 5], [1, 2, 4, 3, 5]]
**TUPLELIST**
inverses 2 5
1 2 3 4 5 
1 2 4 3 5 
**VARIABLES**
ALIAS inverses[2,5]=[[1, 2, 3, 4, 5], [1, 2, 4, 3, 5]]
**SEARCH**
PRINT[[M_00001_00003],[M_00001_00004],[M_00002_00003],[M_00002_00004],[M_00003_00003],[M_00003_00004],[M_00004_00003],[M_00004_00004],[M_00005_00003],[M_00005_00004]]
VARORDER STATIC [M_00001_00003, M_00001_00004, M_00002_00003, M_00002_00004, M_00003_00003, M_00003_00004, M_00004_00003, M_00004_00004, M_00005_00003, M_00005_00004]
**CONSTRAINTS**
watchelement_one([4, 3], aux48, aux74)
watchelement_one([4, 3], aux47, aux75)
watchelement_one([4, 3], aux38, aux76)
watchelement_one([4, 3], aux41, aux77)
watchelement_one([4, 3], aux60, aux78)
watchelement_one([4, 3], aux39, aux79)
watchelement_one([4, 3], aux65, aux80)
watchelement_one([4, 3], aux51, aux81)
watchelement_one([4, 3], aux64, aux82)
watchelement_one([4, 3], aux63, aux83)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux29, aux0)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux26, aux1)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux56, aux1)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux61, aux0)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux59, aux8)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux59, aux5)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux59, aux6)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux40, aux5)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux40, aux8)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux40, aux6)
watchelement_one([3, 4], aux47, M_00001_00003)
watchelement_one([3, 4], aux48, M_00001_00004)
watchelement_one([3, 4], aux51, M_00003_00003)
watchelement_one([3, 4], aux65, M_00003_00004)
watchelement_one([3, 4], aux38, M_00002_00004)
watchelement_one([3, 4], aux41, M_00002_00003)
watchelement_one([M_00001_00003, M_00001_00004], aux39, aux16)
watchelement_one([M_00001_00003, M_00001_00004], aux60, aux17)
watchelement_one([3, 4], aux64, M_00005_00004)
watchelement_one([3, 4], aux63, M_00005_00003)
watchelement_one([3, 4], aux60, M_00004_00004)
watchelement_one([3, 4], aux39, M_00004_00003)
watchelement_one([M_00001_00003, M_00001_00004], aux65, aux22)
watchelement_one([M_00001_00003, M_00001_00004], aux51, aux23)
watchelement_one([M_00001_00003, M_00001_00004], aux41, aux24)
watchelement_one([M_00001_00003, M_00001_00004], aux38, aux25)
diseq(M_00001_00003,M_00001_00004)
diseq(M_00002_00003,M_00002_00004)
diseq(M_00003_00003,M_00003_00004)
diseq(M_00004_00003,M_00004_00004)
diseq(M_00005_00003,M_00005_00004)
watchelement_one([M_00002_00003, M_00002_00004], aux47, aux24)
watchelement_one([M_00002_00003, M_00002_00004], aux48, aux25)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux57, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux57, 2)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux42, aux23)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux34, aux22)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux57, 5)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux58, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux58, 2)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux35, aux16)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux43, aux17)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux58, 5)
watchelement_one([M_00002_00003, M_00002_00004], aux41, aux24)
watchelement_one([M_00002_00003, M_00002_00004], aux38, aux25)
watchelement_one([M_00002_00003, M_00002_00004], aux51, aux24)
watchelement_one([M_00002_00003, M_00002_00004], aux65, aux25)
watchelement_one([M_00002_00003, M_00002_00004], aux39, aux24)
watchelement_one([M_00002_00003, M_00002_00004], aux60, aux25)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux46, aux8)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux46, aux5)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux37, aux0)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux28, aux1)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux46, aux6)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux44, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux44, 2)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux55, aux23)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux31, aux22)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux44, 5)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux49, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux49, 2)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux49, 5)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux54, aux8)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux54, aux5)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux27, aux0)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux36, aux1)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux54, aux6)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux45, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux45, 2)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux30, aux16)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux62, aux17)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux45, 5)
watchelement_one([1, 2, M_00003_00003, M_00003_00004, 5, 1], aux50, 1)
watchelement_one([2, M_00003_00003, M_00003_00004, 5, 1, 2], aux50, 2)
watchelement_one([5, 1, 2, M_00004_00003, M_00004_00004, 5], aux50, 5)
watchelement_one([1, 1], aux47, 1)
watchelement_one([1, 1], aux48, 1)
watchelement_one([1, 4, 1, 4, 5, 1], aux57, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux57, M_00001_00004)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux42, 1)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux34, M_00001_00004)
watchelement_one([5, 1, 3, 3, 1, 5], aux57, 5)
watchelement_one([1, 4, 1, 4, 5, 1], aux58, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux58, M_00001_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux35, M_00001_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux43, 1)
watchelement_one([5, 1, 3, 3, 1, 5], aux58, 5)
watchelement_one([1, 1], aux41, 1)
watchelement_one([1, 1], aux38, 1)
watchelement_one([1, 4, 1, 4, 5, 1], aux46, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux46, M_00002_00004)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux37, 1)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux28, M_00002_00004)
watchelement_one([5, 1, 3, 3, 1, 5], aux46, 5)
watchelement_one([1, 4, 1, 4, 5, 1], aux54, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux54, M_00002_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux27, M_00002_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux36, 1)
watchelement_one([5, 1, 3, 3, 1, 5], aux54, 5)
watchelement_one([1, 1], aux51, 1)
watchelement_one([1, 1], aux65, 1)
watchelement_one([1, 4, 1, 4, 5, 1], aux44, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux44, M_00003_00004)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux55, 1)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux31, M_00003_00004)
watchelement_one([5, 1, 3, 3, 1, 5], aux44, 5)
watchelement_one([1, 4, 1, 4, 5, 1], aux40, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux40, M_00003_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux29, M_00003_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux56, 1)
watchelement_one([5, 1, 3, 3, 1, 5], aux40, 5)
watchelement_one([1, 1], aux39, 1)
watchelement_one([1, 1], aux60, 1)
watchelement_one([1, 4, 1, 4, 5, 1], aux59, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux59, M_00004_00004)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux61, 1)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux26, M_00004_00004)
watchelement_one([5, 1, 3, 3, 1, 5], aux59, 5)
watchelement_one([1, 4, 1, 4, 5, 1], aux45, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux45, M_00004_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux30, M_00004_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux62, 1)
watchelement_one([5, 1, 3, 3, 1, 5], aux45, 5)
watchelement_one([1, 1], aux63, 1)
watchelement_one([1, 1], aux64, 1)
watchelement_one([1, 4, 1, 4, 5, 1], aux49, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux49, M_00005_00004)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux52, 1)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux33, M_00005_00004)
watchelement_one([5, 1, 3, 3, 1, 5], aux49, 5)
watchelement_one([1, 4, 1, 4, 5, 1], aux50, 1)
watchelement_one([4, 1, 4, 5, 1, 3], aux50, M_00005_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux32, M_00005_00003)
watchelement_one([1, 4, 5, 1, 3, 3, 1], aux53, 1)
watchelement_one([5, 1, 3, 3, 1, 5], aux50, 5)
lexleq([M_00001_00003, M_00001_00004, M_00002_00003, M_00002_00004, M_00003_00003, M_00003_00004, M_00004_00003, M_00004_00004, M_00005_00003, M_00005_00004],[aux74, aux75, aux76, aux77, aux78, aux79, aux80, aux81, aux82, aux83])
watchelement_one([M_00001_00003, M_00001_00004], aux63, aux66)
watchelement_one([M_00005_00003, M_00005_00004], aux47, aux66)
watchelement_one([M_00001_00003, M_00001_00004], aux64, aux67)
watchelement_one([M_00005_00003, M_00005_00004], aux48, aux67)
watchelement_one([M_00005_00003, M_00005_00004], aux41, aux68)
watchelement_one([M_00002_00003, M_00002_00004], aux63, aux68)
watchelement_one([M_00005_00003, M_00005_00004], aux38, aux69)
watchelement_one([M_00002_00003, M_00002_00004], aux64, aux69)
watchelement_one([M_00005_00003, M_00005_00004], aux51, aux70)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux52, aux70)
watchelement_one([M_00005_00003, M_00005_00004], aux65, aux71)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux33, aux71)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux32, aux72)
watchelement_one([M_00005_00003, M_00005_00004], aux39, aux72)
watchelement_one([M_00003_00003, M_00003_00004, 5, 1, 2, M_00004_00003, M_00004_00004], aux53, aux73)
watchelement_one([M_00005_00003, M_00005_00004], aux60, aux73)
weightedsumleq([5,1,1],[M_00004_00003,M_00004_00004,-17],aux26)
weightedsumgeq([5,1,1],[M_00004_00003,M_00004_00004,-17],aux26)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-17],aux27)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-17],aux27)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-17],aux28)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-17],aux28)
weightedsumleq([1,5,1],[M_00003_00003,M_00003_00004,-17],aux29)
weightedsumgeq([1,5,1],[M_00003_00003,M_00003_00004,-17],aux29)
weightedsumleq([1,5,1],[M_00004_00003,M_00004_00004,-17],aux30)
weightedsumgeq([1,5,1],[M_00004_00003,M_00004_00004,-17],aux30)
weightedsumleq([5,1,1],[M_00003_00003,M_00003_00004,-17],aux31)
weightedsumgeq([5,1,1],[M_00003_00003,M_00003_00004,-17],aux31)
weightedsumleq([1,1,5],[-17,M_00005_00003,M_00005_00004],aux32)
weightedsumgeq([1,1,5],[-17,M_00005_00003,M_00005_00004],aux32)
weightedsumleq([1,5,1],[-17,M_00005_00003,M_00005_00004],aux33)
weightedsumgeq([1,5,1],[-17,M_00005_00003,M_00005_00004],aux33)
weightedsumleq([1,5,1],[-17,M_00001_00003,M_00001_00004],aux34)
weightedsumgeq([1,5,1],[-17,M_00001_00003,M_00001_00004],aux34)
weightedsumleq([1,1,5],[-17,M_00001_00003,M_00001_00004],aux35)
weightedsumgeq([1,1,5],[-17,M_00001_00003,M_00001_00004],aux35)
weightedsumleq([6,1],[M_00002_00004,-17],aux36)
weightedsumgeq([6,1],[M_00002_00004,-17],aux36)
weightedsumleq([6,1],[M_00002_00003,-17],aux37)
weightedsumgeq([6,1],[M_00002_00003,-17],aux37)
sumleq([M_00002_00004,-2],aux38)
sumgeq([M_00002_00004,-2],aux38)
sumleq([M_00004_00003,-2],aux39)
sumgeq([M_00004_00003,-2],aux39)
weightedsumleq([5,1],[M_00003_00004,-14],aux40)
weightedsumgeq([5,1],[M_00003_00004,-14],aux40)
sumleq([M_00002_00003,-2],aux41)
sumgeq([M_00002_00003,-2],aux41)
weightedsumleq([1,6],[-17,M_00001_00003],aux42)
weightedsumgeq([1,6],[-17,M_00001_00003],aux42)
weightedsumleq([1,6],[-17,M_00001_00004],aux43)
weightedsumgeq([1,6],[-17,M_00001_00004],aux43)
weightedsumleq([5,1],[M_00003_00003,-14],aux44)
weightedsumgeq([5,1],[M_00003_00003,-14],aux44)
weightedsumleq([5,1],[M_00004_00004,-14],aux45)
weightedsumgeq([5,1],[M_00004_00004,-14],aux45)
weightedsumleq([5,1],[M_00002_00003,-14],aux46)
weightedsumgeq([5,1],[M_00002_00003,-14],aux46)
sumleq([-2,M_00001_00003],aux47)
sumgeq([-2,M_00001_00003],aux47)
sumleq([-2,M_00001_00004],aux48)
sumgeq([-2,M_00001_00004],aux48)
weightedsumleq([1,5],[-14,M_00005_00003],aux49)
weightedsumgeq([1,5],[-14,M_00005_00003],aux49)
weightedsumleq([1,5],[-14,M_00005_00004],aux50)
weightedsumgeq([1,5],[-14,M_00005_00004],aux50)
sumleq([M_00003_00003,-2],aux51)
sumgeq([M_00003_00003,-2],aux51)
weightedsumleq([1,6],[-17,M_00005_00003],aux52)
weightedsumgeq([1,6],[-17,M_00005_00003],aux52)
weightedsumleq([1,6],[-17,M_00005_00004],aux53)
weightedsumgeq([1,6],[-17,M_00005_00004],aux53)
weightedsumleq([5,1],[M_00002_00004,-14],aux54)
weightedsumgeq([5,1],[M_00002_00004,-14],aux54)
weightedsumleq([6,1],[M_00003_00003,-17],aux55)
weightedsumgeq([6,1],[M_00003_00003,-17],aux55)
weightedsumleq([6,1],[M_00003_00004,-17],aux56)
weightedsumgeq([6,1],[M_00003_00004,-17],aux56)
weightedsumleq([1,5],[-14,M_00001_00003],aux57)
weightedsumgeq([1,5],[-14,M_00001_00003],aux57)
weightedsumleq([1,5],[-14,M_00001_00004],aux58)
weightedsumgeq([1,5],[-14,M_00001_00004],aux58)
weightedsumleq([5,1],[M_00004_00003,-14],aux59)
weightedsumgeq([5,1],[M_00004_00003,-14],aux59)
sumleq([M_00004_00004,-2],aux60)
sumgeq([M_00004_00004,-2],aux60)
weightedsumleq([6,1],[M_00004_00003,-17],aux61)
weightedsumgeq([6,1],[M_00004_00003,-17],aux61)
weightedsumleq([6,1],[M_00004_00004,-17],aux62)
weightedsumgeq([6,1],[M_00004_00004,-17],aux62)
sumleq([-2,M_00005_00003],aux63)
sumgeq([-2,M_00005_00003],aux63)
sumleq([-2,M_00005_00004],aux64)
sumgeq([-2,M_00005_00004],aux64)
sumleq([M_00003_00004,-2],aux65)
sumgeq([M_00003_00004,-2],aux65)
**EOF**
