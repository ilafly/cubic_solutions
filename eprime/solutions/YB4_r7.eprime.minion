MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 96
# CSE_active_eliminated_expressions = 192
# CSE_active_total_size = 458
**VARIABLES**
DISCRETE M_00001_00001 #
{1..2}
DISCRETE M_00001_00002 #
{1..2}
DISCRETE M_00001_00003 #
{3..4}
DISCRETE M_00001_00004 #
{3..4}
DISCRETE M_00002_00001 #
{1..2}
DISCRETE M_00002_00002 #
{1..2}
DISCRETE M_00002_00003 #
{3..4}
DISCRETE M_00002_00004 #
{3..4}
DISCRETE M_00003_00001 #
{1..2}
DISCRETE M_00003_00002 #
{1..2}
DISCRETE M_00003_00003 #
{3..4}
DISCRETE M_00003_00004 #
{3..4}
DISCRETE M_00004_00001 #
{1..2}
DISCRETE M_00004_00002 #
{1..2}
DISCRETE M_00004_00003 #
{3..4}
DISCRETE M_00004_00004 #
{3..4}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (-2 + M_00001_00003))
{3..4}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (-2 + M_00001_00004))
{3..4}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (-2 + M_00001_00003))
{3..4}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (-2 + M_00001_00004))
{3..4}
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (M_00003_00004 + -2))
{3..4}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (M_00003_00003 + -2))
{3..4}
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (M_00003_00003 + -2))
{3..4}
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (M_00003_00004 + -2))
{3..4}
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (M_00002_00003 + -2))
{3..4}
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (M_00002_00004 + -2))
{3..4}
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (M_00002_00003 + -2))
{3..4}
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (M_00002_00004 + -2))
{3..4}
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (M_00004_00003 + -2))
{3..4}
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (M_00004_00004 + -2))
{3..4}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (M_00004_00004 + -2))
{3..4}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (M_00004_00003 + -2))
{3..4}
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00001_00001)
{1..2}
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00001_00002)
{1..2}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], M_00001_00002)
{1..2}
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], M_00001_00001)
{1..2}
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], M_00003_00002)
{1..2}
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], M_00003_00001)
{1..2}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00003_00001)
{1..2}
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00003_00002)
{1..2}
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], M_00002_00002)
{1..2}
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], M_00002_00001)
{1..2}
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00002_00002)
{1..2}
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00002_00001)
{1..2}
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00004_00002)
{1..2}
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], M_00004_00001)
{1..2}
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], M_00004_00001)
{1..2}
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], M_00004_00002)
{1..2}
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 4*M_00002_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux32, [1,2,5,6])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 4*M_00002_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux33, [1,2,5,6])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001 + 4*M_00002_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux34, [2,2,5,5])
**VARIABLES**
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 4*M_00002_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux35, [1,2,5,6])
**VARIABLES**
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00002 + 4*M_00002_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux36, [1,2,5,6])
**VARIABLES**
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + 4*M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux37, [1,2,5,6])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00002 + M_00002_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux38, [1,2,5,6])
**VARIABLES**
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00002 + M_00002_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux39, [1,2,5,6])
**VARIABLES**
DISCRETE aux40 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + M_00002_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux40, [1,2,5,6])
**VARIABLES**
DISCRETE aux41 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + M_00002_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux41, [1,2,5,6])
**VARIABLES**
DISCRETE aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00001 + M_00002_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux42, [2,2,5,5])
**VARIABLES**
DISCRETE aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00002_00003 + M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux43, [1,2,5,6])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00001 + M_00004_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux44, [2,2,5,5])
**VARIABLES**
DISCRETE aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00001 + M_00004_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux45, [1,2,5,6])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00001 + M_00004_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux46, [1,2,5,6])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00002 + M_00004_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux47, [1,2,5,6])
**VARIABLES**
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00002 + M_00004_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux48, [1,2,5,6])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00004_00003 + M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux49, [1,2,5,6])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002 + 4*M_00004_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux50, [1,2,5,6])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 4*M_00004_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux51, [1,2,5,6])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001 + 4*M_00004_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux52, [2,2,5,5])
**VARIABLES**
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + M_00003_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux53, [1,2,5,6])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + M_00003_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux54, [2,2,5,5])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00002 + M_00003_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux55, [1,2,5,6])
**VARIABLES**
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00002 + M_00003_00003 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux56, [1,2,5,6])
**VARIABLES**
DISCRETE aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (4*M_00003_00001 + M_00003_00004 + -6)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux57, [1,2,5,6])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00002 + 4*M_00003_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux58, [1,2,5,6])
**VARIABLES**
DISCRETE aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 4*M_00003_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux59, [1,2,5,6])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001 + 4*M_00003_00002 + -4)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux60, [2,2,5,5])
**VARIABLES**
DISCRETE aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + 4*M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux61, [1,2,5,6])
**VARIABLES**
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 4*M_00001_00001 + M_00001_00002)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux62, [2,2,5,5])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 4*M_00001_00001 + M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux63, [1,2,5,6])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 4*M_00001_00001 + M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux64, [1,2,5,6])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 4*M_00001_00002 + M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux65, [1,2,5,6])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (-6 + 4*M_00001_00002 + M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux66, [1,2,5,6])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + M_00001_00001 + 4*M_00001_00002)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux67, [2,2,5,5])
**VARIABLES**
DISCRETE aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00001 + 4*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux68, [1,2,5,6])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00001 + 4*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux69, [1,2,5,6])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00002 + 4*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux70, [1,2,5,6])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (-12 + M_00001_00002 + 4*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux71, [1,2,5,6])
**VARIABLES**
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + M_00001_00003 + 4*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux72, [1,2,5,6])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 4*M_00001_00003 + M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux73, [1,2,5,6])
**VARIABLES**
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux74, [1,1,6,6])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux75, [1,1,6,6])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux76, [1,1,6,6])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00002_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux77, [1,1,6,6])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003 + -2)
{1..2}
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00004 + -2)
{1..2}
DISCRETE aux80 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + M_00001_00003)
{1..2}
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + M_00001_00004)
{1..2}
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00001)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux82, [1,1,6,6])
**VARIABLES**
DISCRETE aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (-4 + 5*M_00001_00002)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux83, [1,1,6,6])
**VARIABLES**
DISCRETE aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux84, [1,1,6,6])
**VARIABLES**
DISCRETE aux85 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux85, [1,1,6,6])
**VARIABLES**
DISCRETE aux86 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux86, [1,1,6,6])
**VARIABLES**
DISCRETE aux87 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux87, [1,1,6,6])
**VARIABLES**
DISCRETE aux88 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux88, [1,1,6,6])
**VARIABLES**
DISCRETE aux89 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004 + -2)
{1..2}
DISCRETE aux90 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003 + -2)
{1..2}
DISCRETE aux91 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003 + -2)
{1..2}
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00004 + -2)
{1..2}
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00002 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux93, [1,1,6,6])
**VARIABLES**
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux94, [1,1,6,6])
**VARIABLES**
DISCRETE aux95 #Active-CSE: 2 occurrences of this expression or equivalent: (5*M_00004_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux95, [1,1,6,6])
**VARIABLES**
DISCRETE aux96 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux82) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux74)
{1..4}
DISCRETE aux97 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux42) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux62)
{1..4}
DISCRETE aux98 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux40) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux64)
{1..4}
DISCRETE aux99 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux41) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux63)
{1..4}
DISCRETE aux100 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux87) --- ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux68)
{1..4}
DISCRETE aux101 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux54) --- ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux71)
{1..4}
DISCRETE aux102 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux53) --- ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux85)
{1..4}
DISCRETE aux103 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux57) --- ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux73)
{1..4}
DISCRETE aux104 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux94) --- ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux69)
{1..4}
DISCRETE aux105 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux44) --- ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux70)
{1..4}
DISCRETE aux106 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux45) --- ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux72)
{1..4}
DISCRETE aux107 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux46) --- ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux84)
{1..4}
DISCRETE aux108 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux34) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux67)
{1..4}
DISCRETE aux109 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux83) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux75)
{1..4}
DISCRETE aux110 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux39) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux65)
{1..4}
DISCRETE aux111 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux38) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux66)
{1..4}
DISCRETE aux112 #ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux33) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux60)
{1..4}
DISCRETE aux113 #ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux86) --- ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux35)
{1..4}
DISCRETE aux114 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux56) --- ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux76)
{1..4}
DISCRETE aux115 #ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux43) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux55)
{1..4}
DISCRETE aux116 #ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux32) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux52)
{1..4}
DISCRETE aux117 #ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux36) --- ElementOne([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux93)
{1..4}
DISCRETE aux118 #ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux37) --- ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux48)
{1..4}
DISCRETE aux119 #ElementOne([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux47) --- ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux77)
{1..4}
DISCRETE aux120 #ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux51) --- ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux59)
{1..4}
DISCRETE aux121 #ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux50) --- ElementOne([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux58)
{1..4}
DISCRETE aux122 #ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux61) --- ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux95)
{1..4}
DISCRETE aux123 #ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux49) --- ElementOne([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux88)
{1..4}
DISCRETE aux124 #(M_00003_00001 + 4*M_00003_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux124, [1,2,5,6])
**VARIABLES**
DISCRETE aux125 #(M_00003_00002 + 4*M_00003_00003 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux125, [1,2,5,6])
**VARIABLES**
DISCRETE aux126 #(5*M_00003_00003 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux126, [1,1,6,6])
**VARIABLES**
DISCRETE aux127 #(4*M_00003_00003 + M_00003_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux127, [1,2,5,6])
**VARIABLES**
DISCRETE aux128 #(M_00004_00001 + 4*M_00004_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux128, [1,2,5,6])
**VARIABLES**
DISCRETE aux129 #(M_00004_00002 + 4*M_00004_00004 + -12)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux129, [1,2,5,6])
**VARIABLES**
DISCRETE aux130 #(M_00004_00003 + 4*M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux130, [1,2,5,6])
**VARIABLES**
DISCRETE aux131 #(5*M_00004_00004 + -14)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux131, [1,1,6,6])
**VARIABLES**
**TUPLELIST**
rack 4 4
1 1 3 4 
2 2 3 4 
1 2 3 4 
1 2 3 4 
**VARIABLES**
ALIAS rack[4,4]=[[1, 1, 3, 4], [2, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]
**TUPLELIST**
perms 4 4
1 2 3 4 
1 2 4 3 
2 1 3 4 
2 1 4 3 
**VARIABLES**
ALIAS perms[4,4]=[[1, 2, 3, 4], [1, 2, 4, 3], [2, 1, 3, 4], [2, 1, 4, 3]]
**TUPLELIST**
inverses 4 4
1 2 3 4 
1 2 4 3 
2 1 3 4 
2 1 4 3 
**VARIABLES**
ALIAS inverses[4,4]=[[1, 2, 3, 4], [1, 2, 4, 3], [2, 1, 3, 4], [2, 1, 4, 3]]
**SEARCH**
PRINT[[M_00001_00001],[M_00001_00002],[M_00001_00003],[M_00001_00004],[M_00002_00001],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00003_00001],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004]]
VARORDER STATIC [M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004]
**CONSTRAINTS**
watchelement_one([4, 3], aux80, aux0)
watchelement_one([4, 3], aux81, aux1)
watchelement_one([3, 4], aux80, aux2)
watchelement_one([3, 4], aux81, aux3)
watchelement_one([4, 3], aux92, aux4)
watchelement_one([4, 3], aux91, aux5)
watchelement_one([3, 4], aux91, aux6)
watchelement_one([3, 4], aux92, aux7)
watchelement_one([4, 3], aux90, aux8)
watchelement_one([3, 4], aux89, aux9)
watchelement_one([3, 4], aux90, aux10)
watchelement_one([4, 3], aux89, aux11)
watchelement_one([4, 3], aux78, aux12)
watchelement_one([4, 3], aux79, aux13)
watchelement_one([3, 4], aux79, aux14)
watchelement_one([3, 4], aux78, aux15)
watchelement_one([2, 1], M_00001_00001, aux16)
watchelement_one([2, 1], M_00001_00002, aux17)
watchelement_one([1, 2], M_00001_00002, aux18)
watchelement_one([1, 2], M_00001_00001, aux19)
watchelement_one([1, 2], M_00003_00002, aux20)
watchelement_one([1, 2], M_00003_00001, aux21)
watchelement_one([2, 1], M_00003_00001, aux22)
watchelement_one([2, 1], M_00003_00002, aux23)
watchelement_one([1, 2], M_00002_00002, aux24)
watchelement_one([1, 2], M_00002_00001, aux25)
watchelement_one([2, 1], M_00002_00002, aux26)
watchelement_one([2, 1], M_00002_00001, aux27)
watchelement_one([2, 1], M_00004_00002, aux28)
watchelement_one([2, 1], M_00004_00001, aux29)
watchelement_one([1, 2], M_00004_00001, aux30)
watchelement_one([1, 2], M_00004_00002, aux31)
gacalldiff([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004])
gacalldiff([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004])
gacalldiff([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004])
gacalldiff([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004])
watchelement_one([1, 1, 3, 4, 2, 2], aux82, M_00001_00001)
watchelement_one([1, 1, 3, 4, 2], aux62, M_00001_00001)
watchelement_one([3, 4, 2, 2, 3, 4], aux64, M_00001_00003)
watchelement_one([3, 4, 2, 2, 3, 4], aux63, M_00001_00004)
watchelement_one([1, 1, 3, 4, 2], aux67, M_00001_00002)
watchelement_one([1, 1, 3, 4, 2, 2], aux83, M_00001_00002)
watchelement_one([3, 4, 2, 2, 3, 4], aux65, M_00001_00003)
watchelement_one([3, 4, 2, 2, 3, 4], aux66, M_00001_00004)
watchelement_one([1, 2, 3, 4, 1, 2], aux68, M_00001_00001)
watchelement_one([1, 2, 3, 4, 1, 2], aux71, M_00001_00002)
watchelement_one([3, 4, 1, 2, 3, 4], aux85, M_00001_00003)
watchelement_one([3, 4, 1, 2, 3, 4], aux73, M_00001_00004)
watchelement_one([1, 2, 3, 4, 1, 2], aux69, M_00001_00001)
watchelement_one([1, 2, 3, 4, 1, 2], aux70, M_00001_00002)
watchelement_one([3, 4, 1, 2, 3, 4], aux72, M_00001_00003)
watchelement_one([3, 4, 1, 2, 3, 4], aux84, M_00001_00004)
watchelement_one([1, 1, 3, 4, 2, 2], aux74, M_00002_00001)
watchelement_one([1, 1, 3, 4, 2], aux42, M_00002_00001)
watchelement_one([3, 4, 2, 2, 3, 4], aux40, M_00002_00003)
watchelement_one([3, 4, 2, 2, 3, 4], aux41, M_00002_00004)
watchelement_one([1, 1, 3, 4, 2], aux34, M_00002_00002)
watchelement_one([1, 1, 3, 4, 2, 2], aux75, M_00002_00002)
watchelement_one([3, 4, 2, 2, 3, 4], aux39, M_00002_00003)
watchelement_one([3, 4, 2, 2, 3, 4], aux38, M_00002_00004)
watchelement_one([1, 2, 3, 4, 1, 2], aux33, M_00002_00001)
watchelement_one([1, 2, 3, 4, 1, 2], aux35, M_00002_00002)
watchelement_one([3, 4, 1, 2, 3, 4], aux76, M_00002_00003)
watchelement_one([3, 4, 1, 2, 3, 4], aux43, M_00002_00004)
watchelement_one([1, 2, 3, 4, 1, 2], aux32, M_00002_00001)
watchelement_one([1, 2, 3, 4, 1, 2], aux36, M_00002_00002)
watchelement_one([3, 4, 1, 2, 3, 4], aux37, M_00002_00003)
watchelement_one([3, 4, 1, 2, 3, 4], aux77, M_00002_00004)
watchelement_one([1, 1, 3, 4, 2, 2], aux87, M_00003_00001)
watchelement_one([1, 1, 3, 4, 2], aux54, M_00003_00001)
watchelement_one([3, 4, 2, 2, 3, 4], aux53, M_00003_00003)
watchelement_one([3, 4, 2, 2, 3, 4], aux57, M_00003_00004)
watchelement_one([1, 1, 3, 4, 2], aux60, M_00003_00002)
watchelement_one([1, 1, 3, 4, 2, 2], aux86, M_00003_00002)
watchelement_one([3, 4, 2, 2, 3, 4], aux56, M_00003_00003)
watchelement_one([3, 4, 2, 2, 3, 4], aux55, M_00003_00004)
watchelement_one([1, 2, 3, 4, 1, 2], aux124, M_00003_00001)
watchelement_one([1, 2, 3, 4, 1, 2], aux125, M_00003_00002)
watchelement_one([3, 4, 1, 2, 3, 4], aux126, M_00003_00003)
watchelement_one([3, 4, 1, 2, 3, 4], aux127, M_00003_00004)
watchelement_one([1, 2, 3, 4, 1, 2], aux59, M_00003_00001)
watchelement_one([1, 2, 3, 4, 1, 2], aux58, M_00003_00002)
watchelement_one([3, 4, 1, 2, 3, 4], aux61, M_00003_00003)
watchelement_one([3, 4, 1, 2, 3, 4], aux88, M_00003_00004)
watchelement_one([1, 1, 3, 4, 2, 2], aux94, M_00004_00001)
watchelement_one([1, 1, 3, 4, 2], aux44, M_00004_00001)
watchelement_one([3, 4, 2, 2, 3, 4], aux45, M_00004_00003)
watchelement_one([3, 4, 2, 2, 3, 4], aux46, M_00004_00004)
watchelement_one([1, 1, 3, 4, 2], aux52, M_00004_00002)
watchelement_one([1, 1, 3, 4, 2, 2], aux93, M_00004_00002)
watchelement_one([3, 4, 2, 2, 3, 4], aux48, M_00004_00003)
watchelement_one([3, 4, 2, 2, 3, 4], aux47, M_00004_00004)
watchelement_one([1, 2, 3, 4, 1, 2], aux51, M_00004_00001)
watchelement_one([1, 2, 3, 4, 1, 2], aux50, M_00004_00002)
watchelement_one([3, 4, 1, 2, 3, 4], aux95, M_00004_00003)
watchelement_one([3, 4, 1, 2, 3, 4], aux49, M_00004_00004)
watchelement_one([1, 2, 3, 4, 1, 2], aux128, M_00004_00001)
watchelement_one([1, 2, 3, 4, 1, 2], aux129, M_00004_00002)
watchelement_one([3, 4, 1, 2, 3, 4], aux130, M_00004_00003)
watchelement_one([3, 4, 1, 2, 3, 4], aux131, M_00004_00004)
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004],[aux19, aux18, aux2, aux3, aux25, aux24, aux10, aux9, aux21, aux20, aux6, aux7, aux30, aux31, aux15, aux14])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004],[aux19, aux18, aux1, aux0, aux25, aux24, aux11, aux8, aux30, aux31, aux13, aux12, aux21, aux20, aux4, aux5])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004],[aux26, aux27, aux10, aux9, aux17, aux16, aux2, aux3, aux23, aux22, aux6, aux7, aux28, aux29, aux15, aux14])
lexleq([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004],[aux26, aux27, aux11, aux8, aux17, aux16, aux1, aux0, aux28, aux29, aux13, aux12, aux23, aux22, aux4, aux5])
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux82, aux96)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux74, aux96)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux42, aux97)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux62, aux97)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux40, aux98)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux64, aux98)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux41, aux99)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux63, aux99)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux87, aux100)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux68, aux100)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux54, aux101)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux71, aux101)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux53, aux102)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux85, aux102)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux57, aux103)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux73, aux103)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux94, aux104)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux69, aux104)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux44, aux105)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux70, aux105)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux45, aux106)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux72, aux106)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux46, aux107)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux84, aux107)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux34, aux108)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux67, aux108)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux83, aux109)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux75, aux109)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux39, aux110)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux65, aux110)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux38, aux111)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux66, aux111)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux33, aux112)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux60, aux112)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux86, aux113)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux35, aux113)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux56, aux114)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux76, aux114)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux43, aux115)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux55, aux115)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux32, aux116)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001], aux52, aux116)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux36, aux117)
watchelement_one([M_00001_00001, M_00001_00002, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002], aux93, aux117)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux37, aux118)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux48, aux118)
watchelement_one([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004], aux47, aux119)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux77, aux119)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux51, aux120)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux59, aux120)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux50, aux121)
watchelement_one([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002], aux58, aux121)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux61, aux122)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux95, aux122)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux49, aux123)
watchelement_one([M_00003_00003, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004], aux88, aux123)
weightedsumleq([1,4,1],[M_00003_00001,M_00003_00003,-12],aux124)
weightedsumgeq([1,4,1],[M_00003_00001,M_00003_00003,-12],aux124)
weightedsumleq([1,4,1],[M_00003_00002,M_00003_00003,-12],aux125)
weightedsumgeq([1,4,1],[M_00003_00002,M_00003_00003,-12],aux125)
weightedsumleq([5,1],[M_00003_00003,-14],aux126)
weightedsumgeq([5,1],[M_00003_00003,-14],aux126)
weightedsumleq([4,1,1],[M_00003_00003,M_00003_00004,-14],aux127)
weightedsumgeq([4,1,1],[M_00003_00003,M_00003_00004,-14],aux127)
weightedsumleq([1,4,1],[M_00004_00001,M_00004_00004,-12],aux128)
weightedsumgeq([1,4,1],[M_00004_00001,M_00004_00004,-12],aux128)
weightedsumleq([1,4,1],[M_00004_00002,M_00004_00004,-12],aux129)
weightedsumgeq([1,4,1],[M_00004_00002,M_00004_00004,-12],aux129)
weightedsumleq([1,4,1],[M_00004_00003,M_00004_00004,-14],aux130)
weightedsumgeq([1,4,1],[M_00004_00003,M_00004_00004,-14],aux130)
weightedsumleq([5,1],[M_00004_00004,-14],aux131)
weightedsumgeq([5,1],[M_00004_00004,-14],aux131)
weightedsumleq([1,4,1],[M_00002_00001,M_00002_00004,-12],aux32)
weightedsumgeq([1,4,1],[M_00002_00001,M_00002_00004,-12],aux32)
weightedsumleq([1,4,1],[M_00002_00001,M_00002_00003,-12],aux33)
weightedsumgeq([1,4,1],[M_00002_00001,M_00002_00003,-12],aux33)
weightedsumleq([1,4,1],[M_00002_00001,M_00002_00002,-4],aux34)
weightedsumgeq([1,4,1],[M_00002_00001,M_00002_00002,-4],aux34)
weightedsumleq([1,4,1],[M_00002_00002,M_00002_00003,-12],aux35)
weightedsumgeq([1,4,1],[M_00002_00002,M_00002_00003,-12],aux35)
weightedsumleq([1,4,1],[M_00002_00002,M_00002_00004,-12],aux36)
weightedsumgeq([1,4,1],[M_00002_00002,M_00002_00004,-12],aux36)
weightedsumleq([1,4,1],[M_00002_00003,M_00002_00004,-14],aux37)
weightedsumgeq([1,4,1],[M_00002_00003,M_00002_00004,-14],aux37)
weightedsumleq([4,1,1],[M_00002_00002,M_00002_00004,-6],aux38)
weightedsumgeq([4,1,1],[M_00002_00002,M_00002_00004,-6],aux38)
weightedsumleq([4,1,1],[M_00002_00002,M_00002_00003,-6],aux39)
weightedsumgeq([4,1,1],[M_00002_00002,M_00002_00003,-6],aux39)
weightedsumleq([4,1,1],[M_00002_00001,M_00002_00003,-6],aux40)
weightedsumgeq([4,1,1],[M_00002_00001,M_00002_00003,-6],aux40)
weightedsumleq([4,1,1],[M_00002_00001,M_00002_00004,-6],aux41)
weightedsumgeq([4,1,1],[M_00002_00001,M_00002_00004,-6],aux41)
weightedsumleq([4,1,1],[M_00002_00001,M_00002_00002,-4],aux42)
weightedsumgeq([4,1,1],[M_00002_00001,M_00002_00002,-4],aux42)
weightedsumleq([4,1,1],[M_00002_00003,M_00002_00004,-14],aux43)
weightedsumgeq([4,1,1],[M_00002_00003,M_00002_00004,-14],aux43)
weightedsumleq([4,1,1],[M_00004_00001,M_00004_00002,-4],aux44)
weightedsumgeq([4,1,1],[M_00004_00001,M_00004_00002,-4],aux44)
weightedsumleq([4,1,1],[M_00004_00001,M_00004_00003,-6],aux45)
weightedsumgeq([4,1,1],[M_00004_00001,M_00004_00003,-6],aux45)
weightedsumleq([4,1,1],[M_00004_00001,M_00004_00004,-6],aux46)
weightedsumgeq([4,1,1],[M_00004_00001,M_00004_00004,-6],aux46)
weightedsumleq([4,1,1],[M_00004_00002,M_00004_00004,-6],aux47)
weightedsumgeq([4,1,1],[M_00004_00002,M_00004_00004,-6],aux47)
weightedsumleq([4,1,1],[M_00004_00002,M_00004_00003,-6],aux48)
weightedsumgeq([4,1,1],[M_00004_00002,M_00004_00003,-6],aux48)
weightedsumleq([4,1,1],[M_00004_00003,M_00004_00004,-14],aux49)
weightedsumgeq([4,1,1],[M_00004_00003,M_00004_00004,-14],aux49)
weightedsumleq([1,4,1],[M_00004_00002,M_00004_00003,-12],aux50)
weightedsumgeq([1,4,1],[M_00004_00002,M_00004_00003,-12],aux50)
weightedsumleq([1,4,1],[M_00004_00001,M_00004_00003,-12],aux51)
weightedsumgeq([1,4,1],[M_00004_00001,M_00004_00003,-12],aux51)
weightedsumleq([1,4,1],[M_00004_00001,M_00004_00002,-4],aux52)
weightedsumgeq([1,4,1],[M_00004_00001,M_00004_00002,-4],aux52)
weightedsumleq([4,1,1],[M_00003_00001,M_00003_00003,-6],aux53)
weightedsumgeq([4,1,1],[M_00003_00001,M_00003_00003,-6],aux53)
weightedsumleq([4,1,1],[M_00003_00001,M_00003_00002,-4],aux54)
weightedsumgeq([4,1,1],[M_00003_00001,M_00003_00002,-4],aux54)
weightedsumleq([4,1,1],[M_00003_00002,M_00003_00004,-6],aux55)
weightedsumgeq([4,1,1],[M_00003_00002,M_00003_00004,-6],aux55)
weightedsumleq([4,1,1],[M_00003_00002,M_00003_00003,-6],aux56)
weightedsumgeq([4,1,1],[M_00003_00002,M_00003_00003,-6],aux56)
weightedsumleq([4,1,1],[M_00003_00001,M_00003_00004,-6],aux57)
weightedsumgeq([4,1,1],[M_00003_00001,M_00003_00004,-6],aux57)
weightedsumleq([1,4,1],[M_00003_00002,M_00003_00004,-12],aux58)
weightedsumgeq([1,4,1],[M_00003_00002,M_00003_00004,-12],aux58)
weightedsumleq([1,4,1],[M_00003_00001,M_00003_00004,-12],aux59)
weightedsumgeq([1,4,1],[M_00003_00001,M_00003_00004,-12],aux59)
weightedsumleq([1,4,1],[M_00003_00001,M_00003_00002,-4],aux60)
weightedsumgeq([1,4,1],[M_00003_00001,M_00003_00002,-4],aux60)
weightedsumleq([1,4,1],[M_00003_00003,M_00003_00004,-14],aux61)
weightedsumgeq([1,4,1],[M_00003_00003,M_00003_00004,-14],aux61)
weightedsumleq([1,4,1],[-4,M_00001_00001,M_00001_00002],aux62)
weightedsumgeq([1,4,1],[-4,M_00001_00001,M_00001_00002],aux62)
weightedsumleq([1,4,1],[-6,M_00001_00001,M_00001_00004],aux63)
weightedsumgeq([1,4,1],[-6,M_00001_00001,M_00001_00004],aux63)
weightedsumleq([1,4,1],[-6,M_00001_00001,M_00001_00003],aux64)
weightedsumgeq([1,4,1],[-6,M_00001_00001,M_00001_00003],aux64)
weightedsumleq([1,4,1],[-6,M_00001_00002,M_00001_00003],aux65)
weightedsumgeq([1,4,1],[-6,M_00001_00002,M_00001_00003],aux65)
weightedsumleq([1,4,1],[-6,M_00001_00002,M_00001_00004],aux66)
weightedsumgeq([1,4,1],[-6,M_00001_00002,M_00001_00004],aux66)
weightedsumleq([1,1,4],[-4,M_00001_00001,M_00001_00002],aux67)
weightedsumgeq([1,1,4],[-4,M_00001_00001,M_00001_00002],aux67)
weightedsumleq([1,1,4],[-12,M_00001_00001,M_00001_00003],aux68)
weightedsumgeq([1,1,4],[-12,M_00001_00001,M_00001_00003],aux68)
weightedsumleq([1,1,4],[-12,M_00001_00001,M_00001_00004],aux69)
weightedsumgeq([1,1,4],[-12,M_00001_00001,M_00001_00004],aux69)
weightedsumleq([1,1,4],[-12,M_00001_00002,M_00001_00004],aux70)
weightedsumgeq([1,1,4],[-12,M_00001_00002,M_00001_00004],aux70)
weightedsumleq([1,1,4],[-12,M_00001_00002,M_00001_00003],aux71)
weightedsumgeq([1,1,4],[-12,M_00001_00002,M_00001_00003],aux71)
weightedsumleq([1,1,4],[-14,M_00001_00003,M_00001_00004],aux72)
weightedsumgeq([1,1,4],[-14,M_00001_00003,M_00001_00004],aux72)
weightedsumleq([1,4,1],[-14,M_00001_00003,M_00001_00004],aux73)
weightedsumgeq([1,4,1],[-14,M_00001_00003,M_00001_00004],aux73)
weightedsumleq([5,1],[M_00002_00001,-4],aux74)
weightedsumgeq([5,1],[M_00002_00001,-4],aux74)
weightedsumleq([5,1],[M_00002_00002,-4],aux75)
weightedsumgeq([5,1],[M_00002_00002,-4],aux75)
weightedsumleq([5,1],[M_00002_00003,-14],aux76)
weightedsumgeq([5,1],[M_00002_00003,-14],aux76)
weightedsumleq([5,1],[M_00002_00004,-14],aux77)
weightedsumgeq([5,1],[M_00002_00004,-14],aux77)
sumleq([M_00004_00003,-2],aux78)
sumgeq([M_00004_00003,-2],aux78)
sumleq([M_00004_00004,-2],aux79)
sumgeq([M_00004_00004,-2],aux79)
sumleq([-2,M_00001_00003],aux80)
sumgeq([-2,M_00001_00003],aux80)
sumleq([-2,M_00001_00004],aux81)
sumgeq([-2,M_00001_00004],aux81)
weightedsumleq([1,5],[-4,M_00001_00001],aux82)
weightedsumgeq([1,5],[-4,M_00001_00001],aux82)
weightedsumleq([1,5],[-4,M_00001_00002],aux83)
weightedsumgeq([1,5],[-4,M_00001_00002],aux83)
weightedsumleq([1,5],[-14,M_00001_00004],aux84)
weightedsumgeq([1,5],[-14,M_00001_00004],aux84)
weightedsumleq([1,5],[-14,M_00001_00003],aux85)
weightedsumgeq([1,5],[-14,M_00001_00003],aux85)
weightedsumleq([5,1],[M_00003_00002,-4],aux86)
weightedsumgeq([5,1],[M_00003_00002,-4],aux86)
weightedsumleq([5,1],[M_00003_00001,-4],aux87)
weightedsumgeq([5,1],[M_00003_00001,-4],aux87)
weightedsumleq([5,1],[M_00003_00004,-14],aux88)
weightedsumgeq([5,1],[M_00003_00004,-14],aux88)
sumleq([M_00002_00004,-2],aux89)
sumgeq([M_00002_00004,-2],aux89)
sumleq([M_00002_00003,-2],aux90)
sumgeq([M_00002_00003,-2],aux90)
sumleq([M_00003_00003,-2],aux91)
sumgeq([M_00003_00003,-2],aux91)
sumleq([M_00003_00004,-2],aux92)
sumgeq([M_00003_00004,-2],aux92)
weightedsumleq([5,1],[M_00004_00002,-4],aux93)
weightedsumgeq([5,1],[M_00004_00002,-4],aux93)
weightedsumleq([5,1],[M_00004_00001,-4],aux94)
weightedsumgeq([5,1],[M_00004_00001,-4],aux94)
weightedsumleq([5,1],[M_00004_00003,-14],aux95)
weightedsumgeq([5,1],[M_00004_00003,-14],aux95)
**EOF**
