MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 8
# CSE_active_eliminated_expressions = 16
# CSE_active_total_size = 28
**VARIABLES**
DISCRETE L_00001_00001 #
{1..2}
DISCRETE L_00001_00002 #
{1..2}
DISCRETE L_00002_00001 #
{1..2}
DISCRETE L_00002_00002 #
{1..2}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: (L_00002_00001 + 2*L_00002_00002 + -2)
{1..4}
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: (2*L_00002_00001 + L_00002_00002 + -2)
{1..4}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + 2*L_00001_00001 + L_00001_00002)
{1..4}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + L_00001_00001 + 2*L_00001_00002)
{1..4}
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + 3*L_00001_00002)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux4, [1,1,4,4])
**VARIABLES**
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: (-2 + 3*L_00001_00001)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux5, [1,1,4,4])
**VARIABLES**
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: (3*L_00002_00002 + -2)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux6, [1,1,4,4])
**VARIABLES**
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: (3*L_00002_00001 + -2)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux7, [1,1,4,4])
**VARIABLES**
DISCRETE aux8 #ElementOne([1, 1, 1, 2], aux5) --- ElementOne([L_00001_00001, L_00001_00002], L_00001_00001)
{1..2}
DISCRETE aux9 #ElementOne([1, 1, 1, 2], aux2) --- ElementOne([L_00001_00001, L_00001_00002], L_00001_00002)
{1..2}
DISCRETE aux10 #ElementOne([1, 1, 1, 2], aux3) --- ElementOne([L_00001_00001, L_00001_00002], L_00002_00001)
{1..2}
DISCRETE aux11 #ElementOne([1, 1, 1, 2], aux4) --- ElementOne([L_00001_00001, L_00001_00002], L_00002_00002)
{1..2}
DISCRETE aux12 #ElementOne([1, 1, 1, 2], aux7) --- ElementOne([L_00002_00001, L_00002_00002], L_00001_00001)
{1..2}
DISCRETE aux13 #ElementOne([1, 1, 1, 2], aux1) --- ElementOne([L_00002_00001, L_00002_00002], L_00001_00002)
{1..2}
DISCRETE aux14 #ElementOne([1, 1, 1, 2], aux0) --- ElementOne([L_00002_00001, L_00002_00002], L_00002_00001)
{1..2}
DISCRETE aux15 #ElementOne([1, 1, 1, 2], aux6) --- ElementOne([L_00002_00001, L_00002_00002], L_00002_00002)
{1..2}
**TUPLELIST**
S 2 2
1 2 
1 2 
**VARIABLES**
ALIAS S[2,2]=[[1, 2], [1, 2]]
**TUPLELIST**
M 2 2
1 1 
1 2 
**VARIABLES**
ALIAS M[2,2]=[[1, 1], [1, 2]]
**SEARCH**
PRINT[[L_00001_00001],[L_00001_00002],[L_00002_00001],[L_00002_00002]]
VARORDER STATIC [L_00001_00001, L_00001_00002, L_00002_00001, L_00002_00002]
**CONSTRAINTS**
watchelement_one([1, 2, 1, 2], aux5, L_00001_00001)
watchelement_one([1, 2, 1, 2], aux3, L_00001_00001)
watchelement_one([1, 2, 1, 2], aux2, L_00001_00002)
watchelement_one([1, 2, 1, 2], aux4, L_00001_00002)
watchelement_one([1, 2, 1, 2], aux7, L_00002_00001)
watchelement_one([1, 2, 1, 2], aux0, L_00002_00001)
watchelement_one([1, 2, 1, 2], aux1, L_00002_00002)
watchelement_one([1, 2, 1, 2], aux6, L_00002_00002)
watchelement_one([1, 1, 1, 2], aux5, aux8)
watchelement_one([L_00001_00001, L_00001_00002], L_00001_00001, aux8)
watchelement_one([1, 1, 1, 2], aux2, aux9)
watchelement_one([L_00001_00001, L_00001_00002], L_00001_00002, aux9)
watchelement_one([1, 1, 1, 2], aux3, aux10)
watchelement_one([L_00001_00001, L_00001_00002], L_00002_00001, aux10)
watchelement_one([1, 1, 1, 2], aux4, aux11)
watchelement_one([L_00001_00001, L_00001_00002], L_00002_00002, aux11)
watchelement_one([1, 1, 1, 2], aux7, aux12)
watchelement_one([L_00002_00001, L_00002_00002], L_00001_00001, aux12)
watchelement_one([1, 1, 1, 2], aux1, aux13)
watchelement_one([L_00002_00001, L_00002_00002], L_00001_00002, aux13)
watchelement_one([1, 1, 1, 2], aux0, aux14)
watchelement_one([L_00002_00001, L_00002_00002], L_00002_00001, aux14)
watchelement_one([1, 1, 1, 2], aux6, aux15)
watchelement_one([L_00002_00001, L_00002_00002], L_00002_00002, aux15)
weightedsumleq([1,2,1],[L_00002_00001,L_00002_00002,-2],aux0)
weightedsumgeq([1,2,1],[L_00002_00001,L_00002_00002,-2],aux0)
weightedsumleq([2,1,1],[L_00002_00001,L_00002_00002,-2],aux1)
weightedsumgeq([2,1,1],[L_00002_00001,L_00002_00002,-2],aux1)
weightedsumleq([1,2,1],[-2,L_00001_00001,L_00001_00002],aux2)
weightedsumgeq([1,2,1],[-2,L_00001_00001,L_00001_00002],aux2)
weightedsumleq([1,1,2],[-2,L_00001_00001,L_00001_00002],aux3)
weightedsumgeq([1,1,2],[-2,L_00001_00001,L_00001_00002],aux3)
weightedsumleq([1,3],[-2,L_00001_00002],aux4)
weightedsumgeq([1,3],[-2,L_00001_00002],aux4)
weightedsumleq([1,3],[-2,L_00001_00001],aux5)
weightedsumgeq([1,3],[-2,L_00001_00001],aux5)
weightedsumleq([3,1],[L_00002_00002,-2],aux6)
weightedsumgeq([3,1],[L_00002_00002,-2],aux6)
weightedsumleq([3,1],[L_00002_00001,-2],aux7)
weightedsumgeq([3,1],[L_00002_00001,-2],aux7)
**EOF**
