MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 5
# CSE_active_eliminated_expressions = 23
# CSE_active_total_size = 15
**VARIABLES**
DISCRETE S_00001_00001 #
{1..4}
**CONSTRAINTS**
w-inintervalset(S_00001_00001, [1,1,4,4])
**VARIABLES**
DISCRETE S_00002_00002 #
{2..4}
**CONSTRAINTS**
w-inintervalset(S_00002_00002, [2,2,4,4])
**VARIABLES**
DISCRETE S_00002_00003 #
{3..5}
**CONSTRAINTS**
w-inintervalset(S_00002_00003, [3,3,5,5])
**VARIABLES**
DISCRETE aux0 #Active-CSE: 9 occurrences of this expression or equivalent: (-1 + S_00002_00002)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux0, [1,1,3,3])
**VARIABLES**
DISCRETE aux1 #Active-CSE: 8 occurrences of this expression or equivalent: (-2 + S_00002_00003)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux1, [1,1,3,3])
**VARIABLES**
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00001_00001 + -4)
{1..16}
**CONSTRAINTS**
w-inintervalset(aux2, [1,1,16,16])
**VARIABLES**
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: (-14 + 5*S_00002_00003)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux3, [1,1,11,11])
**VARIABLES**
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*S_00002_00002)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux4, [1,1,11,11])
**VARIABLES**
DISCRETE aux5 #(6*S_00001_00001 + -5)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux5, [1,1,19,19])
**VARIABLES**
DISCRETE aux6 #(5*S_00001_00001 + -6 + S_00002_00002)
{1..18}
**CONSTRAINTS**
w-inintervalset(aux6, [1,1,3,3,16,16,18,18])
**VARIABLES**
DISCRETE aux7 #(5*S_00001_00001 + -7 + S_00002_00003)
{1..18}
**CONSTRAINTS**
w-inintervalset(aux7, [1,1,3,3,16,16,18,18])
**VARIABLES**
DISCRETE aux8 #(S_00001_00001 + -10 + 5*S_00002_00002)
{1..14}
**CONSTRAINTS**
w-inintervalset(aux8, [1,1,4,4,11,11,14,14])
**VARIABLES**
DISCRETE aux9 #(-11 + 6*S_00002_00002)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux9, [1,1,13,13])
**VARIABLES**
DISCRETE aux10 #(-12 + 5*S_00002_00002 + S_00002_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux10, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux11 #(S_00001_00001 + -15 + 5*S_00002_00003)
{1..14}
**CONSTRAINTS**
w-inintervalset(aux11, [1,1,4,4,11,11,14,14])
**VARIABLES**
DISCRETE aux12 #(-16 + S_00002_00002 + 5*S_00002_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux12, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux13 #(-17 + 6*S_00002_00003)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux13, [1,1,13,13])
**VARIABLES**
**TUPLELIST**
M 5 5
1 1 3 1 3 
1 1 3 1 3 
3 3 1 3 1 
1 1 3 4 5 
3 3 1 5 4 
**VARIABLES**
ALIAS M[5,5]=[[1, 1, 3, 1, 3], [1, 1, 3, 1, 3], [3, 3, 1, 3, 1], [1, 1, 3, 4, 5], [3, 3, 1, 5, 4]]
**SEARCH**
PRINT[[S_00001_00001],[S_00002_00002],[S_00002_00003]]
VARORDER STATIC [S_00001_00001, S_00002_00002, S_00002_00003]
**CONSTRAINTS**
watchelement_one([1, 1, 3, 1], S_00001_00001, 1)
watchelement_one([3, 3, 1, 3], S_00001_00001, 3)
watchelement_one([1, 3, 1], aux0, 1)
watchelement_one([3, 1, 3], aux0, 3)
watchelement_one([3, 1, 3], aux1, 3)
watchelement_one([1, 3, 1], aux1, 1)
watchelement_one([S_00001_00001, S_00001_00001, S_00001_00001, 1], S_00001_00001, 1)
watchelement_one([S_00002_00002, S_00002_00002, S_00002_00002, 2], S_00001_00001, 2)
watchelement_one([S_00002_00003, S_00002_00003, S_00002_00003, 3], S_00001_00001, 3)
watchelement_one([S_00001_00001, S_00001_00001, 1], aux0, 1)
watchelement_one([S_00002_00002, S_00002_00002, 2], aux0, 2)
watchelement_one([S_00002_00003, S_00002_00003, 3], aux0, 3)
watchelement_one([S_00001_00001, 1, 1], aux1, 1)
watchelement_one([S_00002_00002, 2, 2], aux1, 2)
watchelement_one([S_00002_00003, 3, 3], aux1, 3)
watchelement_one([1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4], aux5, S_00001_00001)
watchelement_one([1, 3, 1, 3, 1, 1, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4], aux6, S_00001_00001)
watchelement_one([3, 1, 3, 1, 1, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4, 5], aux7, S_00002_00003)
watchelement_one([1, 3, 1, 1, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4], aux2, S_00001_00001)
watchelement_one([3, 1, 1, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4, 5], aux2, S_00002_00003)
watchelement_one([1, 1, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4], aux8, S_00001_00001)
watchelement_one([1, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4], aux9, S_00001_00001)
watchelement_one([3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4, 5], aux10, S_00002_00003)
watchelement_one([1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 4], aux4, S_00001_00001)
watchelement_one([3, 3, 3, 1, 3, 1, 1, 1, 3, 4, 5], aux4, S_00002_00003)
watchelement_one([3, 3, 1, 3, 1, 1, 1, 3, 4, 5, 3, 3, 1, 5], aux11, S_00002_00003)
watchelement_one([3, 1, 3, 1, 1, 1, 3, 4, 5, 3, 3, 1, 5], aux12, S_00002_00003)
watchelement_one([1, 3, 1, 1, 1, 3, 4, 5, 3, 3, 1, 5, 4], aux13, S_00001_00001)
watchelement_one([3, 1, 1, 1, 3, 4, 5, 3, 3, 1, 5], aux3, S_00002_00003)
watchelement_one([1, 1, 1, 3, 4, 5, 3, 3, 1, 5, 4], aux3, S_00001_00001)
watchelement_one([1, 1, 3, 4], S_00001_00001, S_00001_00001)
watchelement_one([1, 3, 4], aux0, S_00001_00001)
watchelement_one([3, 4, 5], aux1, S_00002_00003)
watchelement_one([3, 3, 1, 5], S_00001_00001, S_00002_00003)
watchelement_one([3, 1, 5], aux0, S_00002_00003)
watchelement_one([1, 5, 4], aux1, S_00001_00001)
watchelement_one([S_00001_00001, S_00002_00002, S_00002_00003, 4], S_00001_00001, S_00001_00001)
watchelement_one([S_00002_00002, S_00002_00003, 4], aux0, S_00002_00002)
watchelement_one([S_00002_00003, 4, 5], aux1, S_00002_00003)
watchelement_one([1, 2, 3, 4], S_00001_00001, S_00001_00001)
watchelement_one([2, 3, 4], aux0, S_00002_00002)
weightedsumleq([6,1],[S_00001_00001,-5],aux5)
weightedsumgeq([6,1],[S_00001_00001,-5],aux5)
weightedsumleq([5,1,1],[S_00001_00001,-6,S_00002_00002],aux6)
weightedsumgeq([5,1,1],[S_00001_00001,-6,S_00002_00002],aux6)
weightedsumleq([5,1,1],[S_00001_00001,-7,S_00002_00003],aux7)
weightedsumgeq([5,1,1],[S_00001_00001,-7,S_00002_00003],aux7)
weightedsumleq([1,1,5],[S_00001_00001,-10,S_00002_00002],aux8)
weightedsumgeq([1,1,5],[S_00001_00001,-10,S_00002_00002],aux8)
weightedsumleq([1,6],[-11,S_00002_00002],aux9)
weightedsumgeq([1,6],[-11,S_00002_00002],aux9)
weightedsumleq([1,5,1],[-12,S_00002_00002,S_00002_00003],aux10)
weightedsumgeq([1,5,1],[-12,S_00002_00002,S_00002_00003],aux10)
weightedsumleq([1,1,5],[S_00001_00001,-15,S_00002_00003],aux11)
weightedsumgeq([1,1,5],[S_00001_00001,-15,S_00002_00003],aux11)
weightedsumleq([1,1,5],[-16,S_00002_00002,S_00002_00003],aux12)
weightedsumgeq([1,1,5],[-16,S_00002_00002,S_00002_00003],aux12)
weightedsumleq([1,6],[-17,S_00002_00003],aux13)
weightedsumgeq([1,6],[-17,S_00002_00003],aux13)
sumleq([-1,S_00002_00002],aux0)
sumgeq([-1,S_00002_00002],aux0)
sumleq([-2,S_00002_00003],aux1)
sumgeq([-2,S_00002_00003],aux1)
weightedsumleq([5,1],[S_00001_00001,-4],aux2)
weightedsumgeq([5,1],[S_00001_00001,-4],aux2)
weightedsumleq([1,5],[-14,S_00002_00003],aux3)
weightedsumgeq([1,5],[-14,S_00002_00003],aux3)
weightedsumleq([1,5],[-9,S_00002_00002],aux4)
weightedsumgeq([1,5],[-9,S_00002_00002],aux4)
**EOF**
