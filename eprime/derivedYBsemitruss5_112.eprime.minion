MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 1
# CSE_active_eliminated_expressions = 4
# CSE_active_total_size = 3
**VARIABLES**
DISCRETE S_00005_00005 #
{1..5}
**CONSTRAINTS**
w-inintervalset(S_00005_00005, [1,1,5,5])
**VARIABLES**
DISCRETE aux0 #Active-CSE: 4 occurrences of this expression or equivalent: (5*S_00005_00005 + -4)
{1..21}
**CONSTRAINTS**
w-inintervalset(aux0, [1,1,21,21])
**VARIABLES**
DISCRETE aux1 #(6*S_00005_00005 + -5)
{1..25}
**CONSTRAINTS**
w-inintervalset(aux1, [1,1,25,25])
**VARIABLES**
DISCRETE aux2 #ElementOne([1, 2, 4, 3, 5], S_00005_00005)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux2, [1,1,5,5])
**VARIABLES**
DISCRETE aux3 #ElementOne([1, 3, 4, 2, 5], S_00005_00005)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux3, [1,1,5,5])
**VARIABLES**
DISCRETE aux4 #ElementOne([1, 4, 3, 2, 5], S_00005_00005)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux4, [1,1,5,5])
**VARIABLES**
DISCRETE aux5 #ElementOne([1, 4, 2, 3, 5], S_00005_00005)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux5, [1,1,5,5])
**VARIABLES**
DISCRETE aux6 #ElementOne([1, 3, 2, 4, 5], S_00005_00005)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux6, [1,1,5,5])
**VARIABLES**
**TUPLELIST**
perms 5 5
1 2 4 3 5 
1 4 2 3 5 
1 4 3 2 5 
1 3 4 2 5 
1 3 2 4 5 
**VARIABLES**
ALIAS perms[5,5]=[[1, 2, 4, 3, 5], [1, 4, 2, 3, 5], [1, 4, 3, 2, 5], [1, 3, 4, 2, 5], [1, 3, 2, 4, 5]]
**TUPLELIST**
inverses 5 5
1 2 4 3 5 
1 3 4 2 5 
1 4 3 2 5 
1 4 2 3 5 
1 3 2 4 5 
**VARIABLES**
ALIAS inverses[5,5]=[[1, 2, 4, 3, 5], [1, 3, 4, 2, 5], [1, 4, 3, 2, 5], [1, 4, 2, 3, 5], [1, 3, 2, 4, 5]]
**TUPLELIST**
M 5 5
1 1 1 1 5 
1 1 1 1 5 
1 1 1 1 5 
1 1 1 1 5 
5 5 5 5 5 
**VARIABLES**
ALIAS M[5,5]=[[1, 1, 1, 1, 5], [1, 1, 1, 1, 5], [1, 1, 1, 1, 5], [1, 1, 1, 1, 5], [5, 5, 5, 5, 5]]
**SEARCH**
PRINT[[S_00005_00005]]
VARORDER STATIC [S_00005_00005]
**CONSTRAINTS**
watchelement_one([1, 2, 4, 3, 5], S_00005_00005, aux2)
watchelement_one([1, 3, 4, 2, 5], S_00005_00005, aux3)
watchelement_one([1, 4, 3, 2, 5], S_00005_00005, aux4)
watchelement_one([1, 4, 2, 3, 5], S_00005_00005, aux5)
watchelement_one([1, 3, 2, 4, 5], S_00005_00005, aux6)
watchelement_one([5, 5, 5, 5, 5], S_00005_00005, 5)
watchelement_one([5, 5, 5, 5, S_00005_00005], S_00005_00005, 5)
watchelement_one([1, 1, 1, 1, 5], S_00005_00005, S_00005_00005)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 5], aux0, S_00005_00005)
watchelement_one([1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 5, 5], aux0, S_00005_00005)
watchelement_one([1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 5, 5, 5], aux0, S_00005_00005)
watchelement_one([1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 5, 5, 5, 5], aux0, S_00005_00005)
watchelement_one([1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5], aux1, S_00005_00005)
watchelement_one([1, 2, 3, 4, 5], S_00005_00005, S_00005_00005)
watchelement_one([1, 2, 3, 4, S_00005_00005], S_00005_00005, S_00005_00005)
ineq(S_00005_00005, aux2, 0)
ineq(S_00005_00005, aux3, 0)
ineq(S_00005_00005, aux4, 0)
ineq(S_00005_00005, aux5, 0)
ineq(S_00005_00005, aux6, 0)
weightedsumleq([6,1],[S_00005_00005,-5],aux1)
weightedsumgeq([6,1],[S_00005_00005,-5],aux1)
weightedsumleq([5,1],[S_00005_00005,-4],aux0)
weightedsumgeq([5,1],[S_00005_00005,-4],aux0)
**EOF**
