MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 36
# CSE_active_eliminated_expressions = 81
# CSE_active_total_size = 126
**VARIABLES**
DISCRETE L_00001_00001 #
{2..3}
DISCRETE L_00001_00002 #
{2..3}
DISCRETE L_00001_00003 #
{2..3}
DISCRETE L_00002_00001 #
{2..3}
DISCRETE L_00002_00002 #
{2..3}
DISCRETE L_00002_00003 #
{2..3}
DISCRETE L_00003_00001 #
{2..3}
DISCRETE L_00003_00002 #
{2..3}
DISCRETE L_00003_00003 #
{2..3}
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: (3*L_00002_00002 + L_00002_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux0, [1,2,4,5])
**VARIABLES**
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: (3*L_00002_00001 + L_00002_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux1, [1,2,4,5])
**VARIABLES**
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: (3*L_00002_00001 + L_00002_00002 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux2, [1,2,4,5])
**VARIABLES**
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: (L_00002_00001 + 3*L_00002_00002 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux3, [1,2,4,5])
**VARIABLES**
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: (L_00002_00001 + 3*L_00002_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux4, [1,2,4,5])
**VARIABLES**
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: (L_00002_00002 + 3*L_00002_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux5, [1,2,4,5])
**VARIABLES**
DISCRETE aux6 #Active-CSE: 2 occurrences of this expression or equivalent: (3*L_00003_00001 + L_00003_00002 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux6, [1,2,4,5])
**VARIABLES**
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: (3*L_00003_00001 + L_00003_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux7, [1,2,4,5])
**VARIABLES**
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: (3*L_00003_00002 + L_00003_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux8, [1,2,4,5])
**VARIABLES**
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: (L_00003_00001 + 3*L_00003_00002 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux9, [1,2,4,5])
**VARIABLES**
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: (L_00003_00001 + 3*L_00003_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux10, [1,2,4,5])
**VARIABLES**
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: (L_00003_00002 + 3*L_00003_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux11, [1,2,4,5])
**VARIABLES**
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + L_00001_00001 + 3*L_00001_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux12, [1,2,4,5])
**VARIABLES**
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + L_00001_00001 + 3*L_00001_00002)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux13, [1,2,4,5])
**VARIABLES**
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + L_00001_00002 + 3*L_00001_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux14, [1,2,4,5])
**VARIABLES**
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 3*L_00001_00002 + L_00001_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux15, [1,2,4,5])
**VARIABLES**
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 3*L_00001_00001 + L_00001_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux16, [1,2,4,5])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 3*L_00001_00001 + L_00001_00002)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux17, [1,2,4,5])
**VARIABLES**
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 4*L_00001_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux18, [1,1,5,5])
**VARIABLES**
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 4*L_00001_00002)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux19, [1,1,5,5])
**VARIABLES**
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (-7 + 4*L_00001_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux20, [1,1,5,5])
**VARIABLES**
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (4*L_00003_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux21, [1,1,5,5])
**VARIABLES**
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: (4*L_00003_00001 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux22, [1,1,5,5])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (4*L_00003_00002 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux23, [1,1,5,5])
**VARIABLES**
DISCRETE aux24 #Active-CSE: 3 occurrences of this expression or equivalent: (L_00002_00002 + -1)
{1..2}
DISCRETE aux25 #Active-CSE: 3 occurrences of this expression or equivalent: (L_00002_00001 + -1)
{1..2}
DISCRETE aux26 #Active-CSE: 3 occurrences of this expression or equivalent: (L_00002_00003 + -1)
{1..2}
DISCRETE aux27 #Active-CSE: 3 occurrences of this expression or equivalent: (L_00003_00003 + -1)
{1..2}
DISCRETE aux28 #Active-CSE: 3 occurrences of this expression or equivalent: (L_00003_00002 + -1)
{1..2}
DISCRETE aux29 #Active-CSE: 3 occurrences of this expression or equivalent: (L_00003_00001 + -1)
{1..2}
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (4*L_00002_00003 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux30, [1,1,5,5])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (4*L_00002_00002 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux31, [1,1,5,5])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (4*L_00002_00001 + -7)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux32, [1,1,5,5])
**VARIABLES**
DISCRETE aux33 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + L_00001_00001)
{1..2}
DISCRETE aux34 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + L_00001_00003)
{1..2}
DISCRETE aux35 #Active-CSE: 3 occurrences of this expression or equivalent: (-1 + L_00001_00002)
{1..2}
DISCRETE aux36 #ElementOne([2, 2, 1, 2, 3], aux20) --- ElementOne([L_00001_00002, L_00001_00003], aux33)
{2..3}
DISCRETE aux37 #ElementOne([L_00001_00002, L_00001_00003], aux35) --- ElementOne([2, 2, 1, 2, 3], aux17)
{2..3}
DISCRETE aux38 #ElementOne([L_00001_00002, L_00001_00003], aux34) --- ElementOne([2, 2, 1, 2, 3], aux16)
{2..3}
DISCRETE aux39 #ElementOne([L_00001_00002, L_00001_00003], aux25) --- ElementOne([2, 2, 1, 2, 3], aux13)
{2..3}
DISCRETE aux40 #ElementOne([L_00001_00002, L_00001_00003], aux24) --- ElementOne([2, 2, 1, 2, 3], aux19)
{2..3}
DISCRETE aux41 #ElementOne([L_00001_00002, L_00001_00003], aux26) --- ElementOne([2, 2, 1, 2, 3], aux15)
{2..3}
DISCRETE aux42 #ElementOne([L_00001_00002, L_00001_00003], aux29) --- ElementOne([2, 2, 1, 2, 3], aux12)
{2..3}
DISCRETE aux43 #ElementOne([L_00001_00002, L_00001_00003], aux28) --- ElementOne([2, 2, 1, 2, 3], aux14)
{2..3}
DISCRETE aux44 #ElementOne([L_00001_00002, L_00001_00003], aux27) --- ElementOne([2, 2, 1, 2, 3], aux18)
{2..3}
DISCRETE aux45 #ElementOne([L_00002_00002, L_00002_00003], aux33) --- ElementOne([2, 2, 1, 2, 3], aux32)
{2..3}
DISCRETE aux46 #ElementOne([2, 2, 1, 2, 3], aux2) --- ElementOne([L_00002_00002, L_00002_00003], aux35)
{2..3}
DISCRETE aux47 #ElementOne([2, 2, 1, 2, 3], aux1) --- ElementOne([L_00002_00002, L_00002_00003], aux34)
{2..3}
DISCRETE aux48 #ElementOne([2, 2, 1, 2, 3], aux3) --- ElementOne([L_00002_00002, L_00002_00003], aux25)
{2..3}
DISCRETE aux49 #ElementOne([L_00002_00002, L_00002_00003], aux24) --- ElementOne([2, 2, 1, 2, 3], aux31)
{2..3}
DISCRETE aux50 #ElementOne([2, 2, 1, 2, 3], aux0) --- ElementOne([L_00002_00002, L_00002_00003], aux26)
{2..3}
DISCRETE aux51 #ElementOne([2, 2, 1, 2, 3], aux4) --- ElementOne([L_00002_00002, L_00002_00003], aux29)
{2..3}
DISCRETE aux52 #ElementOne([2, 2, 1, 2, 3], aux5) --- ElementOne([L_00002_00002, L_00002_00003], aux28)
{2..3}
DISCRETE aux53 #ElementOne([L_00002_00002, L_00002_00003], aux27) --- ElementOne([2, 2, 1, 2, 3], aux30)
{2..3}
DISCRETE aux54 #ElementOne([2, 2, 1, 2, 3], aux22) --- ElementOne([L_00003_00002, L_00003_00003], aux33)
{2..3}
DISCRETE aux55 #ElementOne([2, 2, 1, 2, 3], aux6) --- ElementOne([L_00003_00002, L_00003_00003], aux35)
{2..3}
DISCRETE aux56 #ElementOne([2, 2, 1, 2, 3], aux7) --- ElementOne([L_00003_00002, L_00003_00003], aux34)
{2..3}
DISCRETE aux57 #ElementOne([2, 2, 1, 2, 3], aux9) --- ElementOne([L_00003_00002, L_00003_00003], aux25)
{2..3}
DISCRETE aux58 #ElementOne([L_00003_00002, L_00003_00003], aux24) --- ElementOne([2, 2, 1, 2, 3], aux23)
{2..3}
DISCRETE aux59 #ElementOne([2, 2, 1, 2, 3], aux8) --- ElementOne([L_00003_00002, L_00003_00003], aux26)
{2..3}
DISCRETE aux60 #ElementOne([2, 2, 1, 2, 3], aux10) --- ElementOne([L_00003_00002, L_00003_00003], aux29)
{2..3}
DISCRETE aux61 #ElementOne([2, 2, 1, 2, 3], aux11) --- ElementOne([L_00003_00002, L_00003_00003], aux28)
{2..3}
DISCRETE aux62 #ElementOne([2, 2, 1, 2, 3], aux21) --- ElementOne([L_00003_00002, L_00003_00003], aux27)
{2..3}
**TUPLELIST**
S 3 3
2 2 3 
1 2 3 
1 2 3 
**VARIABLES**
ALIAS S[3,3]=[[2, 2, 3], [1, 2, 3], [1, 2, 3]]
**TUPLELIST**
M 3 3
1 1 1 
1 2 2 
1 2 3 
**VARIABLES**
ALIAS M[3,3]=[[1, 1, 1], [1, 2, 2], [1, 2, 3]]
**SEARCH**
PRINT[[L_00001_00001],[L_00001_00002],[L_00001_00003],[L_00002_00001],[L_00002_00002],[L_00002_00003],[L_00003_00001],[L_00003_00002],[L_00003_00003]]
VARORDER STATIC [L_00001_00001, L_00001_00002, L_00001_00003, L_00002_00001, L_00002_00002, L_00002_00003, L_00003_00001, L_00003_00002, L_00003_00003]
**CONSTRAINTS**
watchelement_one([2, 3, 1, 2, 3], aux20, L_00001_00002)
watchelement_one([2, 3, 1, 2, 3], aux13, L_00001_00001)
watchelement_one([2, 3, 1, 2, 3], aux12, L_00001_00001)
watchelement_one([2, 3, 1, 2, 3], aux17, L_00001_00002)
watchelement_one([2, 3, 1, 2, 3], aux19, L_00001_00002)
watchelement_one([2, 3, 1, 2, 3], aux14, L_00001_00002)
watchelement_one([2, 3, 1, 2, 3], aux16, L_00001_00003)
watchelement_one([2, 3, 1, 2, 3], aux15, L_00001_00003)
watchelement_one([2, 3, 1, 2, 3], aux18, L_00001_00003)
watchelement_one([2, 3, 1, 2, 3], aux32, L_00002_00002)
watchelement_one([2, 3, 1, 2, 3], aux3, L_00002_00001)
watchelement_one([2, 3, 1, 2, 3], aux4, L_00002_00001)
watchelement_one([2, 3, 1, 2, 3], aux2, L_00002_00002)
watchelement_one([2, 3, 1, 2, 3], aux31, L_00002_00002)
watchelement_one([2, 3, 1, 2, 3], aux5, L_00002_00002)
watchelement_one([2, 3, 1, 2, 3], aux1, L_00002_00003)
watchelement_one([2, 3, 1, 2, 3], aux0, L_00002_00003)
watchelement_one([2, 3, 1, 2, 3], aux30, L_00002_00003)
watchelement_one([2, 3, 1, 2, 3], aux22, L_00003_00002)
watchelement_one([2, 3, 1, 2, 3], aux9, L_00003_00001)
watchelement_one([2, 3, 1, 2, 3], aux10, L_00003_00001)
watchelement_one([2, 3, 1, 2, 3], aux6, L_00003_00002)
watchelement_one([2, 3, 1, 2, 3], aux23, L_00003_00002)
watchelement_one([2, 3, 1, 2, 3], aux11, L_00003_00002)
watchelement_one([2, 3, 1, 2, 3], aux7, L_00003_00003)
watchelement_one([2, 3, 1, 2, 3], aux8, L_00003_00003)
watchelement_one([2, 3, 1, 2, 3], aux21, L_00003_00003)
watchelement_one([2, 2, 1, 2, 3], aux20, aux36)
watchelement_one([L_00001_00002, L_00001_00003], aux33, aux36)
watchelement_one([L_00001_00002, L_00001_00003], aux35, aux37)
watchelement_one([2, 2, 1, 2, 3], aux17, aux37)
watchelement_one([L_00001_00002, L_00001_00003], aux34, aux38)
watchelement_one([2, 2, 1, 2, 3], aux16, aux38)
watchelement_one([L_00001_00002, L_00001_00003], aux25, aux39)
watchelement_one([2, 2, 1, 2, 3], aux13, aux39)
watchelement_one([L_00001_00002, L_00001_00003], aux24, aux40)
watchelement_one([2, 2, 1, 2, 3], aux19, aux40)
watchelement_one([L_00001_00002, L_00001_00003], aux26, aux41)
watchelement_one([2, 2, 1, 2, 3], aux15, aux41)
watchelement_one([L_00001_00002, L_00001_00003], aux29, aux42)
watchelement_one([2, 2, 1, 2, 3], aux12, aux42)
watchelement_one([L_00001_00002, L_00001_00003], aux28, aux43)
watchelement_one([2, 2, 1, 2, 3], aux14, aux43)
watchelement_one([L_00001_00002, L_00001_00003], aux27, aux44)
watchelement_one([2, 2, 1, 2, 3], aux18, aux44)
watchelement_one([L_00002_00002, L_00002_00003], aux33, aux45)
watchelement_one([2, 2, 1, 2, 3], aux32, aux45)
watchelement_one([2, 2, 1, 2, 3], aux2, aux46)
watchelement_one([L_00002_00002, L_00002_00003], aux35, aux46)
watchelement_one([2, 2, 1, 2, 3], aux1, aux47)
watchelement_one([L_00002_00002, L_00002_00003], aux34, aux47)
watchelement_one([2, 2, 1, 2, 3], aux3, aux48)
watchelement_one([L_00002_00002, L_00002_00003], aux25, aux48)
watchelement_one([L_00002_00002, L_00002_00003], aux24, aux49)
watchelement_one([2, 2, 1, 2, 3], aux31, aux49)
watchelement_one([2, 2, 1, 2, 3], aux0, aux50)
watchelement_one([L_00002_00002, L_00002_00003], aux26, aux50)
watchelement_one([2, 2, 1, 2, 3], aux4, aux51)
watchelement_one([L_00002_00002, L_00002_00003], aux29, aux51)
watchelement_one([2, 2, 1, 2, 3], aux5, aux52)
watchelement_one([L_00002_00002, L_00002_00003], aux28, aux52)
watchelement_one([L_00002_00002, L_00002_00003], aux27, aux53)
watchelement_one([2, 2, 1, 2, 3], aux30, aux53)
watchelement_one([2, 2, 1, 2, 3], aux22, aux54)
watchelement_one([L_00003_00002, L_00003_00003], aux33, aux54)
watchelement_one([2, 2, 1, 2, 3], aux6, aux55)
watchelement_one([L_00003_00002, L_00003_00003], aux35, aux55)
watchelement_one([2, 2, 1, 2, 3], aux7, aux56)
watchelement_one([L_00003_00002, L_00003_00003], aux34, aux56)
watchelement_one([2, 2, 1, 2, 3], aux9, aux57)
watchelement_one([L_00003_00002, L_00003_00003], aux25, aux57)
watchelement_one([L_00003_00002, L_00003_00003], aux24, aux58)
watchelement_one([2, 2, 1, 2, 3], aux23, aux58)
watchelement_one([2, 2, 1, 2, 3], aux8, aux59)
watchelement_one([L_00003_00002, L_00003_00003], aux26, aux59)
watchelement_one([2, 2, 1, 2, 3], aux10, aux60)
watchelement_one([L_00003_00002, L_00003_00003], aux29, aux60)
watchelement_one([2, 2, 1, 2, 3], aux11, aux61)
watchelement_one([L_00003_00002, L_00003_00003], aux28, aux61)
watchelement_one([2, 2, 1, 2, 3], aux21, aux62)
watchelement_one([L_00003_00002, L_00003_00003], aux27, aux62)
weightedsumleq([3,1,1],[L_00002_00002,L_00002_00003,-7],aux0)
weightedsumgeq([3,1,1],[L_00002_00002,L_00002_00003,-7],aux0)
weightedsumleq([3,1,1],[L_00002_00001,L_00002_00003,-7],aux1)
weightedsumgeq([3,1,1],[L_00002_00001,L_00002_00003,-7],aux1)
weightedsumleq([3,1,1],[L_00002_00001,L_00002_00002,-7],aux2)
weightedsumgeq([3,1,1],[L_00002_00001,L_00002_00002,-7],aux2)
weightedsumleq([1,3,1],[L_00002_00001,L_00002_00002,-7],aux3)
weightedsumgeq([1,3,1],[L_00002_00001,L_00002_00002,-7],aux3)
weightedsumleq([1,3,1],[L_00002_00001,L_00002_00003,-7],aux4)
weightedsumgeq([1,3,1],[L_00002_00001,L_00002_00003,-7],aux4)
weightedsumleq([1,3,1],[L_00002_00002,L_00002_00003,-7],aux5)
weightedsumgeq([1,3,1],[L_00002_00002,L_00002_00003,-7],aux5)
weightedsumleq([3,1,1],[L_00003_00001,L_00003_00002,-7],aux6)
weightedsumgeq([3,1,1],[L_00003_00001,L_00003_00002,-7],aux6)
weightedsumleq([3,1,1],[L_00003_00001,L_00003_00003,-7],aux7)
weightedsumgeq([3,1,1],[L_00003_00001,L_00003_00003,-7],aux7)
weightedsumleq([3,1,1],[L_00003_00002,L_00003_00003,-7],aux8)
weightedsumgeq([3,1,1],[L_00003_00002,L_00003_00003,-7],aux8)
weightedsumleq([1,3,1],[L_00003_00001,L_00003_00002,-7],aux9)
weightedsumgeq([1,3,1],[L_00003_00001,L_00003_00002,-7],aux9)
weightedsumleq([1,3,1],[L_00003_00001,L_00003_00003,-7],aux10)
weightedsumgeq([1,3,1],[L_00003_00001,L_00003_00003,-7],aux10)
weightedsumleq([1,3,1],[L_00003_00002,L_00003_00003,-7],aux11)
weightedsumgeq([1,3,1],[L_00003_00002,L_00003_00003,-7],aux11)
weightedsumleq([1,1,3],[-7,L_00001_00001,L_00001_00003],aux12)
weightedsumgeq([1,1,3],[-7,L_00001_00001,L_00001_00003],aux12)
weightedsumleq([1,1,3],[-7,L_00001_00001,L_00001_00002],aux13)
weightedsumgeq([1,1,3],[-7,L_00001_00001,L_00001_00002],aux13)
weightedsumleq([1,1,3],[-7,L_00001_00002,L_00001_00003],aux14)
weightedsumgeq([1,1,3],[-7,L_00001_00002,L_00001_00003],aux14)
weightedsumleq([1,3,1],[-7,L_00001_00002,L_00001_00003],aux15)
weightedsumgeq([1,3,1],[-7,L_00001_00002,L_00001_00003],aux15)
weightedsumleq([1,3,1],[-7,L_00001_00001,L_00001_00003],aux16)
weightedsumgeq([1,3,1],[-7,L_00001_00001,L_00001_00003],aux16)
weightedsumleq([1,3,1],[-7,L_00001_00001,L_00001_00002],aux17)
weightedsumgeq([1,3,1],[-7,L_00001_00001,L_00001_00002],aux17)
weightedsumleq([1,4],[-7,L_00001_00003],aux18)
weightedsumgeq([1,4],[-7,L_00001_00003],aux18)
weightedsumleq([1,4],[-7,L_00001_00002],aux19)
weightedsumgeq([1,4],[-7,L_00001_00002],aux19)
weightedsumleq([1,4],[-7,L_00001_00001],aux20)
weightedsumgeq([1,4],[-7,L_00001_00001],aux20)
weightedsumleq([4,1],[L_00003_00003,-7],aux21)
weightedsumgeq([4,1],[L_00003_00003,-7],aux21)
weightedsumleq([4,1],[L_00003_00001,-7],aux22)
weightedsumgeq([4,1],[L_00003_00001,-7],aux22)
weightedsumleq([4,1],[L_00003_00002,-7],aux23)
weightedsumgeq([4,1],[L_00003_00002,-7],aux23)
sumleq([L_00002_00002,-1],aux24)
sumgeq([L_00002_00002,-1],aux24)
sumleq([L_00002_00001,-1],aux25)
sumgeq([L_00002_00001,-1],aux25)
sumleq([L_00002_00003,-1],aux26)
sumgeq([L_00002_00003,-1],aux26)
sumleq([L_00003_00003,-1],aux27)
sumgeq([L_00003_00003,-1],aux27)
sumleq([L_00003_00002,-1],aux28)
sumgeq([L_00003_00002,-1],aux28)
sumleq([L_00003_00001,-1],aux29)
sumgeq([L_00003_00001,-1],aux29)
weightedsumleq([4,1],[L_00002_00003,-7],aux30)
weightedsumgeq([4,1],[L_00002_00003,-7],aux30)
weightedsumleq([4,1],[L_00002_00002,-7],aux31)
weightedsumgeq([4,1],[L_00002_00002,-7],aux31)
weightedsumleq([4,1],[L_00002_00001,-7],aux32)
weightedsumgeq([4,1],[L_00002_00001,-7],aux32)
sumleq([-1,L_00001_00001],aux33)
sumgeq([-1,L_00001_00001],aux33)
sumleq([-1,L_00001_00003],aux34)
sumgeq([-1,L_00001_00003],aux34)
sumleq([-1,L_00001_00002],aux35)
sumgeq([-1,L_00001_00002],aux35)
**EOF**
