MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 33
# CSE_active_eliminated_expressions = 117
# CSE_active_total_size = 180
**VARIABLES**
DISCRETE S_00001_00001 #
{1..2}
DISCRETE S_00001_00004 #
{1..2}
DISCRETE S_00001_00005 #
{1..2}
DISCRETE S_00004_00001 #
{2..4}
**CONSTRAINTS**
w-inintervalset(S_00004_00001, [2,2,4,4])
**VARIABLES**
DISCRETE S_00004_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(S_00004_00004, [2,2,4,4])
**VARIABLES**
DISCRETE S_00004_00005 #
{2..4}
**CONSTRAINTS**
w-inintervalset(S_00004_00005, [2,2,4,4])
**VARIABLES**
DISCRETE S_00005_00001 #
{2..5}
**CONSTRAINTS**
w-inintervalset(S_00005_00001, [2,2,5,5])
**VARIABLES**
DISCRETE S_00005_00004 #
{2..5}
**CONSTRAINTS**
w-inintervalset(S_00005_00004, [2,2,5,5])
**VARIABLES**
DISCRETE S_00005_00005 #
{2..5}
**CONSTRAINTS**
w-inintervalset(S_00005_00005, [2,2,5,5])
**VARIABLES**
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 3, 1], (S_00004_00001 + -1))
{1..3}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 3, 1], (S_00004_00004 + -1))
{1..3}
DISCRETE aux3 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 3, 5], (S_00004_00001 + -1))
{2..5}
**CONSTRAINTS**
w-inintervalset(aux3, [2,3,5,5])
**VARIABLES**
DISCRETE aux4 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 3, 1], (S_00004_00005 + -1))
{1..3}
DISCRETE aux7 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 3, 5], (S_00004_00004 + -1))
{2..5}
**CONSTRAINTS**
w-inintervalset(aux7, [2,3,5,5])
**VARIABLES**
DISCRETE aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 3, 5], (S_00004_00005 + -1))
{2..5}
**CONSTRAINTS**
w-inintervalset(aux8, [2,3,5,5])
**VARIABLES**
DISCRETE aux9 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 2], S_00001_00005)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux9, [2,2,4,4])
**VARIABLES**
DISCRETE aux10 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 2], S_00001_00004)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux10, [2,2,4,4])
**VARIABLES**
DISCRETE aux11 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 2], S_00001_00001)
{2..4}
**CONSTRAINTS**
w-inintervalset(aux11, [2,2,4,4])
**VARIABLES**
DISCRETE aux12 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 2], S_00001_00004)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux12, [2,2,5,5])
**VARIABLES**
DISCRETE aux13 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 2], S_00001_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux13, [2,2,5,5])
**VARIABLES**
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 2], S_00001_00005)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux14, [2,2,5,5])
**VARIABLES**
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00005_00001 + -9)
{1..16}
**CONSTRAINTS**
w-inintervalset(aux18, [1,1,16,16])
**VARIABLES**
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00005_00004 + -9)
{1..16}
**CONSTRAINTS**
w-inintervalset(aux19, [1,1,16,16])
**VARIABLES**
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00005_00005 + -9)
{1..16}
**CONSTRAINTS**
w-inintervalset(aux20, [1,1,16,16])
**VARIABLES**
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00001_00005 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux21, [1,1,6,6])
**VARIABLES**
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00001_00004 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux22, [1,1,6,6])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00001_00001 + -4)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux23, [1,1,6,6])
**VARIABLES**
DISCRETE aux24 #Active-CSE: 9 occurrences of this expression or equivalent: (S_00004_00001 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux24, [1,1,3,3])
**VARIABLES**
DISCRETE aux25 #Active-CSE: 9 occurrences of this expression or equivalent: (S_00004_00004 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux25, [1,1,3,3])
**VARIABLES**
DISCRETE aux26 #Active-CSE: 12 occurrences of this expression or equivalent: (S_00005_00005 + -1)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux26, [1,1,4,4])
**VARIABLES**
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00004_00005 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux27, [1,1,11,11])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00004_00004 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux28, [1,1,11,11])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (5*S_00004_00001 + -9)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux29, [1,1,11,11])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 9 occurrences of this expression or equivalent: (S_00004_00005 + -1)
{1..3}
**CONSTRAINTS**
w-inintervalset(aux30, [1,1,3,3])
**VARIABLES**
DISCRETE aux31 #Active-CSE: 12 occurrences of this expression or equivalent: (S_00005_00001 + -1)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux31, [1,1,4,4])
**VARIABLES**
DISCRETE aux32 #Active-CSE: 12 occurrences of this expression or equivalent: (S_00005_00004 + -1)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux32, [1,1,4,4])
**VARIABLES**
DISCRETE aux33 #(6*S_00001_00001 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux33, [1,1,7,7])
**VARIABLES**
DISCRETE aux34 #(5*S_00001_00001 + S_00001_00004 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux34, [1,2,6,7])
**VARIABLES**
DISCRETE aux35 #(5*S_00001_00001 + S_00001_00005 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux35, [1,2,6,7])
**VARIABLES**
DISCRETE aux36 #(S_00001_00001 + 5*S_00001_00004 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux36, [1,2,6,7])
**VARIABLES**
DISCRETE aux37 #(6*S_00001_00004 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux37, [1,1,7,7])
**VARIABLES**
DISCRETE aux38 #(5*S_00001_00004 + S_00001_00005 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux38, [1,2,6,7])
**VARIABLES**
DISCRETE aux39 #(S_00001_00001 + 5*S_00001_00005 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux39, [1,2,6,7])
**VARIABLES**
DISCRETE aux40 #(S_00001_00004 + 5*S_00001_00005 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux40, [1,2,6,7])
**VARIABLES**
DISCRETE aux41 #(6*S_00001_00005 + -5)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux41, [1,1,7,7])
**VARIABLES**
DISCRETE aux42 #(6*S_00004_00001 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux42, [1,1,13,13])
**VARIABLES**
DISCRETE aux43 #(5*S_00004_00001 + S_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux43, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux44 #(5*S_00004_00001 + S_00004_00005 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux44, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux45 #(S_00004_00001 + 5*S_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux45, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux46 #(6*S_00004_00004 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux46, [1,1,13,13])
**VARIABLES**
DISCRETE aux47 #(5*S_00004_00004 + S_00004_00005 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux47, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux48 #(S_00004_00001 + 5*S_00004_00005 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux48, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux49 #(S_00004_00004 + 5*S_00004_00005 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux49, [1,1,3,3,11,11,13,13])
**VARIABLES**
DISCRETE aux50 #(6*S_00004_00005 + -11)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux50, [1,1,13,13])
**VARIABLES**
DISCRETE aux51 #(6*S_00005_00001 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux51, [1,1,19,19])
**VARIABLES**
DISCRETE aux52 #(5*S_00005_00001 + S_00005_00004 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux52, [1,1,4,4,16,16,19,19])
**VARIABLES**
DISCRETE aux53 #(5*S_00005_00001 + S_00005_00005 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux53, [1,1,4,4,16,16,19,19])
**VARIABLES**
DISCRETE aux54 #(S_00005_00001 + 5*S_00005_00004 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux54, [1,1,4,4,16,16,19,19])
**VARIABLES**
DISCRETE aux55 #(6*S_00005_00004 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux55, [1,1,19,19])
**VARIABLES**
DISCRETE aux56 #(5*S_00005_00004 + S_00005_00005 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux56, [1,1,4,4,16,16,19,19])
**VARIABLES**
DISCRETE aux57 #(S_00005_00001 + 5*S_00005_00005 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux57, [1,1,4,4,16,16,19,19])
**VARIABLES**
DISCRETE aux58 #(S_00005_00004 + 5*S_00005_00005 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux58, [1,1,4,4,16,16,19,19])
**VARIABLES**
DISCRETE aux59 #(6*S_00005_00005 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux59, [1,1,19,19])
**VARIABLES**
DISCRETE aux60 #ElementOne([2, 3, 5, 4], aux31)
{2..5}
DISCRETE aux61 #ElementOne([2, 3, 5, 4], aux26)
{2..5}
DISCRETE aux62 #ElementOne([2, 3, 5, 4], aux32)
{2..5}
DISCRETE aux63 #ElementOne([2, 3, 5, 1], aux26)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux63, [1,3,5,5])
**VARIABLES**
DISCRETE aux64 #ElementOne([2, 3, 5, 1], aux31)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux64, [1,3,5,5])
**VARIABLES**
DISCRETE aux65 #ElementOne([2, 3, 5, 1], aux32)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux65, [1,3,5,5])
**VARIABLES**
DISCRETE aux66 #ElementOne([2, 3, 4, 1], aux26)
{1..4}
DISCRETE aux67 #ElementOne([2, 3, 4, 1], aux32)
{1..4}
DISCRETE aux68 #ElementOne([2, 3, 4, 1], aux31)
{1..4}
DISCRETE aux69 #ElementOne([2, 3, 1, 4], aux32)
{1..4}
DISCRETE aux70 #ElementOne([2, 3, 1, 4], aux26)
{1..4}
DISCRETE aux71 #ElementOne([2, 3, 1, 4], aux31)
{1..4}
DISCRETE aux72 #ElementOne([2, 3, 1, 5], aux32)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux72, [1,3,5,5])
**VARIABLES**
DISCRETE aux73 #ElementOne([2, 3, 1, 5], aux31)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux73, [1,3,5,5])
**VARIABLES**
DISCRETE aux74 #ElementOne([2, 3, 1, 5], aux26)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux74, [1,3,5,5])
**VARIABLES**
**TUPLELIST**
perms 5 5
1 2 3 5 4 
5 2 3 1 4 
5 2 3 4 1 
4 2 3 5 1 
4 2 3 1 5 
**VARIABLES**
ALIAS perms[5,5]=[[1, 2, 3, 5, 4], [5, 2, 3, 1, 4], [5, 2, 3, 4, 1], [4, 2, 3, 5, 1], [4, 2, 3, 1, 5]]
**TUPLELIST**
inverses 5 5
1 2 3 5 4 
4 2 3 5 1 
5 2 3 4 1 
5 2 3 1 4 
4 2 3 1 5 
**VARIABLES**
ALIAS inverses[5,5]=[[1, 2, 3, 5, 4], [4, 2, 3, 5, 1], [5, 2, 3, 4, 1], [5, 2, 3, 1, 4], [4, 2, 3, 1, 5]]
**TUPLELIST**
M 5 5
1 1 1 4 5 
1 2 2 4 5 
1 2 3 4 5 
1 4 4 4 5 
1 5 5 4 5 
**VARIABLES**
ALIAS M[5,5]=[[1, 1, 1, 4, 5], [1, 2, 2, 4, 5], [1, 2, 3, 4, 5], [1, 4, 4, 4, 5], [1, 5, 5, 4, 5]]
**SEARCH**
PRINT[[S_00001_00001],[S_00001_00004],[S_00001_00005],[S_00004_00001],[S_00004_00004],[S_00004_00005],[S_00005_00001],[S_00005_00004],[S_00005_00005]]
VARORDER STATIC [S_00001_00001, S_00001_00004, S_00001_00005, S_00004_00001, S_00004_00004, S_00004_00005, S_00005_00001, S_00005_00004, S_00005_00005]
**CONSTRAINTS**
watchelement_one([2, 3, 5, 4], aux31, aux60)
watchelement_one([2, 3, 5, 4], aux26, aux61)
watchelement_one([2, 3, 5, 4], aux32, aux62)
watchelement_one([2, 3, 5, 1], aux26, aux63)
watchelement_one([2, 3, 5, 1], aux31, aux64)
watchelement_one([2, 3, 5, 1], aux32, aux65)
watchelement_one([2, 3, 4, 1], aux26, aux66)
watchelement_one([2, 3, 4, 1], aux32, aux67)
watchelement_one([2, 3, 4, 1], aux31, aux68)
watchelement_one([2, 3, 1, 4], aux32, aux69)
watchelement_one([2, 3, 1, 4], aux26, aux70)
watchelement_one([2, 3, 1, 4], aux31, aux71)
watchelement_one([2, 3, 1, 5], aux32, aux72)
watchelement_one([2, 3, 1, 5], aux31, aux73)
watchelement_one([2, 3, 1, 5], aux26, aux74)
watchelement_one([2, 3, 1], aux24, aux0)
watchelement_one([2, 3, 4], aux24, S_00004_00001)
watchelement_one([2, 3, 1], aux25, aux2)
watchelement_one([2, 3, 5], aux24, aux3)
watchelement_one([2, 3, 1], aux30, aux4)
watchelement_one([2, 3, 4], aux25, S_00004_00004)
watchelement_one([2, 3, 4], aux30, S_00004_00005)
watchelement_one([2, 3, 5], aux25, aux7)
watchelement_one([2, 3, 5], aux30, aux8)
watchelement_one([4, 2], S_00001_00005, aux9)
watchelement_one([4, 2], S_00001_00004, aux10)
watchelement_one([4, 2], S_00001_00001, aux11)
watchelement_one([5, 2], S_00001_00004, aux12)
watchelement_one([5, 2], S_00001_00001, aux13)
watchelement_one([5, 2], S_00001_00005, aux14)
watchelement_one([1, 2], S_00001_00004, S_00001_00004)
watchelement_one([1, 2], S_00001_00001, S_00001_00001)
watchelement_one([1, 2], S_00001_00005, S_00001_00005)
watchelement_one([1, 1], S_00001_00001, 1)
watchelement_one([4, 4, 4], aux24, 4)
watchelement_one([5, 5, 4, 5], aux31, 5)
watchelement_one([1, 1], S_00001_00004, 1)
watchelement_one([4, 4, 4], aux25, 4)
watchelement_one([5, 5, 4, 5], aux32, 5)
watchelement_one([1, 1], S_00001_00005, 1)
watchelement_one([4, 4, 4], aux30, 4)
watchelement_one([5, 5, 4, 5], aux26, 5)
watchelement_one([S_00001_00001, 1], S_00001_00001, 1)
watchelement_one([4, 4, S_00004_00004], aux24, 4)
watchelement_one([5, 5, S_00004_00005, S_00005_00005], aux31, 5)
watchelement_one([S_00001_00001, 1], S_00001_00004, 1)
watchelement_one([4, 4, S_00004_00004], aux25, 4)
watchelement_one([5, 5, S_00004_00005, S_00005_00005], aux32, 5)
watchelement_one([S_00001_00001, 1], S_00001_00005, 1)
watchelement_one([4, 4, S_00004_00004], aux30, 4)
watchelement_one([5, 5, S_00004_00005, S_00005_00005], aux26, 5)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux33, S_00001_00001)
watchelement_one([1, 1, 4, 5, 1, 2], aux23, S_00001_00001)
watchelement_one([1, 4, 5, 1, 2, 2], aux23, S_00001_00001)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux34, S_00001_00004)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux35, S_00001_00005)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux36, S_00001_00001)
watchelement_one([1, 1, 4, 5, 1, 2], aux22, S_00001_00004)
watchelement_one([1, 4, 5, 1, 2, 2], aux22, S_00001_00004)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux37, S_00001_00004)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux38, S_00001_00005)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux39, S_00001_00001)
watchelement_one([1, 1, 4, 5, 1, 2], aux21, S_00001_00005)
watchelement_one([1, 4, 5, 1, 2, 2], aux21, S_00001_00005)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux40, S_00001_00004)
watchelement_one([1, 1, 1, 4, 5, 1, 2], aux41, S_00001_00005)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux42, S_00004_00001)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4], aux29, S_00004_00001)
watchelement_one([2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4], aux29, S_00004_00001)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux43, S_00004_00004)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux44, S_00004_00005)
watchelement_one([2, 2, 4], aux24, S_00004_00001)
watchelement_one([2, 2, 4], aux25, S_00004_00004)
watchelement_one([2, 2, 4], aux30, S_00004_00005)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux45, S_00004_00001)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4], aux28, S_00004_00004)
watchelement_one([2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4], aux28, S_00004_00004)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux46, S_00004_00004)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux47, S_00004_00005)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux48, S_00004_00001)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4], aux27, S_00004_00005)
watchelement_one([2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4], aux27, S_00004_00005)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux49, S_00004_00004)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4], aux50, S_00004_00005)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux51, S_00005_00001)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5], aux18, S_00005_00001)
watchelement_one([2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5], aux18, S_00005_00001)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux52, S_00005_00004)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux53, S_00005_00005)
watchelement_one([2, 2, 4, 5], aux31, S_00005_00001)
watchelement_one([2, 2, 4, 5], aux32, S_00005_00004)
watchelement_one([2, 2, 4, 5], aux26, S_00005_00005)
watchelement_one([2, 3, 4, 5], aux31, S_00005_00001)
watchelement_one([2, 3, 4, 5], aux32, S_00005_00004)
watchelement_one([2, 3, 4, 5], aux26, S_00005_00005)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux54, S_00005_00001)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5], aux19, S_00005_00004)
watchelement_one([2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5], aux19, S_00005_00004)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux55, S_00005_00004)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux56, S_00005_00005)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux57, S_00005_00001)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5], aux20, S_00005_00005)
watchelement_one([2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5], aux20, S_00005_00005)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux58, S_00005_00004)
watchelement_one([2, 2, 4, 5, 1, 2, 3, 4, 5, 1, 4, 4, 4, 5, 1, 5, 5, 4, 5], aux59, S_00005_00005)
watchelement_one([S_00001_00001, 2], S_00001_00001, S_00001_00001)
watchelement_one([S_00001_00001, 2], S_00001_00004, S_00001_00004)
watchelement_one([S_00001_00001, 2], S_00001_00005, S_00001_00005)
watchelement_one([S_00004_00001, 2], S_00001_00001, S_00004_00001)
watchelement_one([S_00004_00001, 2], S_00001_00004, S_00004_00004)
watchelement_one([S_00004_00001, 2], S_00001_00005, S_00004_00005)
watchelement_one([S_00005_00001, 2], S_00001_00001, S_00005_00001)
watchelement_one([S_00005_00001, 2], S_00001_00004, S_00005_00004)
watchelement_one([S_00005_00001, 2], S_00001_00005, S_00005_00005)
watchelement_one([2, 3, S_00001_00004], aux24, S_00001_00001)
watchelement_one([2, 3, S_00001_00004], aux25, S_00001_00004)
watchelement_one([2, 3, S_00001_00004], aux30, S_00001_00005)
watchelement_one([2, 3, S_00004_00004], aux24, S_00004_00001)
watchelement_one([2, 3, S_00004_00004], aux25, S_00004_00004)
watchelement_one([2, 3, S_00004_00004], aux30, S_00004_00005)
watchelement_one([2, 3, S_00005_00004], aux24, S_00005_00001)
watchelement_one([2, 3, S_00005_00004], aux25, S_00005_00004)
watchelement_one([2, 3, S_00005_00004], aux30, S_00005_00005)
watchelement_one([2, 3, S_00001_00004, S_00001_00005], aux31, S_00001_00001)
watchelement_one([2, 3, S_00001_00004, S_00001_00005], aux32, S_00001_00004)
watchelement_one([2, 3, S_00001_00004, S_00001_00005], aux26, S_00001_00005)
watchelement_one([2, 3, S_00004_00004, S_00004_00005], aux31, S_00004_00001)
watchelement_one([2, 3, S_00004_00004, S_00004_00005], aux32, S_00004_00004)
watchelement_one([2, 3, S_00004_00004, S_00004_00005], aux26, S_00004_00005)
watchelement_one([2, 3, S_00005_00004, S_00005_00005], aux31, S_00005_00001)
watchelement_one([2, 3, S_00005_00004, S_00005_00005], aux32, S_00005_00004)
watchelement_one([2, 3, S_00005_00004, S_00005_00005], aux26, S_00005_00005)
lexleq([S_00001_00004, S_00004_00001, S_00004_00004, S_00004_00005, S_00005_00001, S_00005_00004, S_00005_00005],[S_00001_00005, aux60, aux61, aux62, aux3, aux8, aux7])
lexleq([S_00001_00001, S_00001_00004, S_00001_00005, S_00004_00001, S_00004_00004, S_00004_00005, S_00005_00001, S_00005_00004, S_00005_00005],[aux63, aux64, aux65, aux9, aux11, aux10, aux8, aux3, aux7])
lexleq([S_00001_00001, S_00001_00004, S_00001_00005, S_00004_00001, S_00005_00001, S_00005_00004, S_00005_00005],[aux66, aux67, aux68, S_00004_00005, aux14, aux12, aux13])
lexleq([S_00001_00001, S_00001_00004, S_00001_00005, S_00004_00001, S_00004_00004, S_00004_00005, S_00005_00001, S_00005_00004, S_00005_00005],[aux2, aux4, aux0, aux69, aux70, aux71, aux12, aux14, aux13])
lexleq([S_00001_00001, S_00001_00004, S_00001_00005, S_00004_00001, S_00004_00004, S_00004_00005, S_00005_00001, S_00005_00004, S_00005_00005],[aux2, aux0, aux4, aux10, aux11, aux9, aux72, aux73, aux74])
weightedsumleq([6,1],[S_00001_00001,-5],aux33)
weightedsumgeq([6,1],[S_00001_00001,-5],aux33)
weightedsumleq([5,1,1],[S_00001_00001,S_00001_00004,-5],aux34)
weightedsumgeq([5,1,1],[S_00001_00001,S_00001_00004,-5],aux34)
weightedsumleq([5,1,1],[S_00001_00001,S_00001_00005,-5],aux35)
weightedsumgeq([5,1,1],[S_00001_00001,S_00001_00005,-5],aux35)
weightedsumleq([1,5,1],[S_00001_00001,S_00001_00004,-5],aux36)
weightedsumgeq([1,5,1],[S_00001_00001,S_00001_00004,-5],aux36)
weightedsumleq([6,1],[S_00001_00004,-5],aux37)
weightedsumgeq([6,1],[S_00001_00004,-5],aux37)
weightedsumleq([5,1,1],[S_00001_00004,S_00001_00005,-5],aux38)
weightedsumgeq([5,1,1],[S_00001_00004,S_00001_00005,-5],aux38)
weightedsumleq([1,5,1],[S_00001_00001,S_00001_00005,-5],aux39)
weightedsumgeq([1,5,1],[S_00001_00001,S_00001_00005,-5],aux39)
weightedsumleq([1,5,1],[S_00001_00004,S_00001_00005,-5],aux40)
weightedsumgeq([1,5,1],[S_00001_00004,S_00001_00005,-5],aux40)
weightedsumleq([6,1],[S_00001_00005,-5],aux41)
weightedsumgeq([6,1],[S_00001_00005,-5],aux41)
weightedsumleq([6,1],[S_00004_00001,-11],aux42)
weightedsumgeq([6,1],[S_00004_00001,-11],aux42)
weightedsumleq([5,1,1],[S_00004_00001,S_00004_00004,-11],aux43)
weightedsumgeq([5,1,1],[S_00004_00001,S_00004_00004,-11],aux43)
weightedsumleq([5,1,1],[S_00004_00001,S_00004_00005,-11],aux44)
weightedsumgeq([5,1,1],[S_00004_00001,S_00004_00005,-11],aux44)
weightedsumleq([1,5,1],[S_00004_00001,S_00004_00004,-11],aux45)
weightedsumgeq([1,5,1],[S_00004_00001,S_00004_00004,-11],aux45)
weightedsumleq([6,1],[S_00004_00004,-11],aux46)
weightedsumgeq([6,1],[S_00004_00004,-11],aux46)
weightedsumleq([5,1,1],[S_00004_00004,S_00004_00005,-11],aux47)
weightedsumgeq([5,1,1],[S_00004_00004,S_00004_00005,-11],aux47)
weightedsumleq([1,5,1],[S_00004_00001,S_00004_00005,-11],aux48)
weightedsumgeq([1,5,1],[S_00004_00001,S_00004_00005,-11],aux48)
weightedsumleq([1,5,1],[S_00004_00004,S_00004_00005,-11],aux49)
weightedsumgeq([1,5,1],[S_00004_00004,S_00004_00005,-11],aux49)
weightedsumleq([6,1],[S_00004_00005,-11],aux50)
weightedsumgeq([6,1],[S_00004_00005,-11],aux50)
weightedsumleq([6,1],[S_00005_00001,-11],aux51)
weightedsumgeq([6,1],[S_00005_00001,-11],aux51)
weightedsumleq([5,1,1],[S_00005_00001,S_00005_00004,-11],aux52)
weightedsumgeq([5,1,1],[S_00005_00001,S_00005_00004,-11],aux52)
weightedsumleq([5,1,1],[S_00005_00001,S_00005_00005,-11],aux53)
weightedsumgeq([5,1,1],[S_00005_00001,S_00005_00005,-11],aux53)
weightedsumleq([1,5,1],[S_00005_00001,S_00005_00004,-11],aux54)
weightedsumgeq([1,5,1],[S_00005_00001,S_00005_00004,-11],aux54)
weightedsumleq([6,1],[S_00005_00004,-11],aux55)
weightedsumgeq([6,1],[S_00005_00004,-11],aux55)
weightedsumleq([5,1,1],[S_00005_00004,S_00005_00005,-11],aux56)
weightedsumgeq([5,1,1],[S_00005_00004,S_00005_00005,-11],aux56)
weightedsumleq([1,5,1],[S_00005_00001,S_00005_00005,-11],aux57)
weightedsumgeq([1,5,1],[S_00005_00001,S_00005_00005,-11],aux57)
weightedsumleq([1,5,1],[S_00005_00004,S_00005_00005,-11],aux58)
weightedsumgeq([1,5,1],[S_00005_00004,S_00005_00005,-11],aux58)
weightedsumleq([6,1],[S_00005_00005,-11],aux59)
weightedsumgeq([6,1],[S_00005_00005,-11],aux59)
weightedsumleq([5,1],[S_00005_00001,-9],aux18)
weightedsumgeq([5,1],[S_00005_00001,-9],aux18)
weightedsumleq([5,1],[S_00005_00004,-9],aux19)
weightedsumgeq([5,1],[S_00005_00004,-9],aux19)
weightedsumleq([5,1],[S_00005_00005,-9],aux20)
weightedsumgeq([5,1],[S_00005_00005,-9],aux20)
weightedsumleq([5,1],[S_00001_00005,-4],aux21)
weightedsumgeq([5,1],[S_00001_00005,-4],aux21)
weightedsumleq([5,1],[S_00001_00004,-4],aux22)
weightedsumgeq([5,1],[S_00001_00004,-4],aux22)
weightedsumleq([5,1],[S_00001_00001,-4],aux23)
weightedsumgeq([5,1],[S_00001_00001,-4],aux23)
sumleq([S_00004_00001,-1],aux24)
sumgeq([S_00004_00001,-1],aux24)
sumleq([S_00004_00004,-1],aux25)
sumgeq([S_00004_00004,-1],aux25)
sumleq([S_00005_00005,-1],aux26)
sumgeq([S_00005_00005,-1],aux26)
weightedsumleq([5,1],[S_00004_00005,-9],aux27)
weightedsumgeq([5,1],[S_00004_00005,-9],aux27)
weightedsumleq([5,1],[S_00004_00004,-9],aux28)
weightedsumgeq([5,1],[S_00004_00004,-9],aux28)
weightedsumleq([5,1],[S_00004_00001,-9],aux29)
weightedsumgeq([5,1],[S_00004_00001,-9],aux29)
sumleq([S_00004_00005,-1],aux30)
sumgeq([S_00004_00005,-1],aux30)
sumleq([S_00005_00001,-1],aux31)
sumgeq([S_00005_00001,-1],aux31)
sumleq([S_00005_00004,-1],aux32)
sumgeq([S_00005_00004,-1],aux32)
**EOF**
